/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: mj20sYUsPblw
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import ItemSectionTitleDescriptionItem from "../../ItemSectionTitleDescriptionItem"; // plasmic-import: jaOmCC9X_Oxf/component
import ItemArticleCardItemWithDescription from "../../ItemArticleCardItemWithDescription"; // plasmic-import: m6xY8jJvNbEQ/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicCardListMemberNewsWithDescription.module.css"; // plasmic-import: mj20sYUsPblw/css

createPlasmicElementProxy;

export const PlasmicCardListMemberNewsWithDescription__VariantProps =
  new Array();

export const PlasmicCardListMemberNewsWithDescription__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCardListMemberNewsWithDescription__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const new$Queries = {
    getLatestMemberNews: usePlasmicDataOp(() => {
      return {
        sourceId: "tbVV8SR67UpQ6Z9zuPcDPB",
        opId: "b55a6c6e-402c-4ba0-b683-67c437478b08",
        userArgs: {},
        cacheKey: `plasmic.$.b55a6c6e-402c-4ba0-b683-67c437478b08.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <ItemSectionTitleDescriptionItem
        data-plasmic-name={"itemSectionTitleDescriptionItem"}
        data-plasmic-override={overrides.itemSectionTitleDescriptionItem}
        className={classNames(
          "__wab_instance",
          sty.itemSectionTitleDescriptionItem
        )}
        descriptionSection={``}
        title={"Member News"}
      />

      <Stack__
        as={"div"}
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        hasGap={true}
        className={classNames(projectcss.all, sty.columns)}
      >
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return $queries.getLatestMemberNews.data.response.items;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <div
              data-plasmic-name={"column"}
              data-plasmic-override={overrides.column}
              className={classNames(projectcss.all, sty.column)}
              key={currentIndex}
            >
              <ItemArticleCardItemWithDescription
                data-plasmic-name={"itemArticleCardItemWithDescription"}
                data-plasmic-override={
                  overrides.itemArticleCardItemWithDescription
                }
                articleTitle={(() => {
                  try {
                    return currentItem.fields.title;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                className={classNames(
                  "__wab_instance",
                  sty.itemArticleCardItemWithDescription
                )}
                description={(() => {
                  try {
                    return currentItem.fields.description;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                heading={(() => {
                  try {
                    return currentItem.fields.source;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                linkUrl={(() => {
                  try {
                    return currentItem.fields.url;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            </div>
          );
        })}
      </Stack__>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "itemSectionTitleDescriptionItem",
    "columns",
    "column",
    "itemArticleCardItemWithDescription"
  ],

  itemSectionTitleDescriptionItem: ["itemSectionTitleDescriptionItem"],
  columns: ["columns", "column", "itemArticleCardItemWithDescription"],
  column: ["column", "itemArticleCardItemWithDescription"],
  itemArticleCardItemWithDescription: ["itemArticleCardItemWithDescription"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames:
            PlasmicCardListMemberNewsWithDescription__ArgProps,
          internalVariantPropNames:
            PlasmicCardListMemberNewsWithDescription__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCardListMemberNewsWithDescription__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCardListMemberNewsWithDescription";
  } else {
    func.displayName = `PlasmicCardListMemberNewsWithDescription.${nodeName}`;
  }
  return func;
}

export const PlasmicCardListMemberNewsWithDescription = Object.assign(
  // Top-level PlasmicCardListMemberNewsWithDescription renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    itemSectionTitleDescriptionItem: makeNodeComponent(
      "itemSectionTitleDescriptionItem"
    ),
    columns: makeNodeComponent("columns"),
    column: makeNodeComponent("column"),
    itemArticleCardItemWithDescription: makeNodeComponent(
      "itemArticleCardItemWithDescription"
    ),
    // Metadata about props expected for PlasmicCardListMemberNewsWithDescription
    internalVariantProps:
      PlasmicCardListMemberNewsWithDescription__VariantProps,
    internalArgProps: PlasmicCardListMemberNewsWithDescription__ArgProps
  }
);

export default PlasmicCardListMemberNewsWithDescription;
/* prettier-ignore-end */
