/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: uZtc9KQvjCJf
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import CardEvent from "../../CardEvent"; // plasmic-import: 5J_xjozhBz7-/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicSectionUpcomingEvents.module.css"; // plasmic-import: uZtc9KQvjCJf/css
import ChevronRightIcon from "./icons/PlasmicIcon__ChevronRight"; // plasmic-import: va1d9Qs_I7Zr/icon

createPlasmicElementProxy;

export const PlasmicSectionUpcomingEvents__VariantProps = new Array();

export const PlasmicSectionUpcomingEvents__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSectionUpcomingEvents__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const new$Queries = {
    getAnnualMeeting: usePlasmicDataOp(() => {
      return {
        sourceId: "tbVV8SR67UpQ6Z9zuPcDPB",
        opId: "02c9fa1e-3afb-48ad-979e-a7288f9ff10b",
        userArgs: {},
        cacheKey: `plasmic.$.02c9fa1e-3afb-48ad-979e-a7288f9ff10b.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getEvents: usePlasmicDataOp(() => {
      return {
        sourceId: "tbVV8SR67UpQ6Z9zuPcDPB",
        opId: "0203e8e4-662e-4973-b5ce-ff57549bffaa",
        userArgs: {},
        cacheKey: `plasmic.$.0203e8e4-662e-4973-b5ce-ff57549bffaa.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <section
        data-plasmic-name={"titleBar"}
        data-plasmic-override={overrides.titleBar}
        className={classNames(projectcss.all, sty.titleBar)}
      >
        <div className={classNames(projectcss.all, sty.columns___8JhTn)}>
          <div className={classNames(projectcss.all, sty.column___2EwW)}>
            <h3
              data-plasmic-name={"h3"}
              data-plasmic-override={overrides.h3}
              className={classNames(
                projectcss.all,
                projectcss.h3,
                projectcss.__wab_text,
                sty.h3
              )}
            >
              {"Upcoming Courses & Events"}
            </h3>
          </div>
          <div className={classNames(projectcss.all, sty.column__xtSzc)}>
            <div className={classNames(projectcss.all, sty.freeBox__hhSro)}>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zKn
                )}
              >
                {"View All Events"}
              </div>
              <ChevronRightIcon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(projectcss.all, sty.svg)}
                role={"img"}
              />
            </div>
          </div>
        </div>
      </section>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.columns__pWT)}
      >
        <div className={classNames(projectcss.all, sty.column__aEuP)}>
          <CardEvent
            data-plasmic-name={"cardEvent"}
            data-plasmic-override={overrides.cardEvent}
            className={classNames("__wab_instance", sty.cardEvent)}
          />
        </div>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.column___4GgG3)}
        >
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $queries.getEvents.data.response.items;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox___4Ndxb)}
                key={currentIndex}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__hdolF
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return currentItem.fields.title;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__tuOx2
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return currentItem.fields.category[0];
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ukjVk
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return currentItem.fields.dates;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </Stack__>
            );
          })}
        </Stack__>
      </Stack__>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "titleBar", "h3", "svg", "cardEvent"],
  titleBar: ["titleBar", "h3", "svg"],
  h3: ["h3"],
  svg: ["svg"],
  cardEvent: ["cardEvent"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSectionUpcomingEvents__ArgProps,
          internalVariantPropNames: PlasmicSectionUpcomingEvents__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSectionUpcomingEvents__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSectionUpcomingEvents";
  } else {
    func.displayName = `PlasmicSectionUpcomingEvents.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionUpcomingEvents = Object.assign(
  // Top-level PlasmicSectionUpcomingEvents renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    titleBar: makeNodeComponent("titleBar"),
    h3: makeNodeComponent("h3"),
    svg: makeNodeComponent("svg"),
    cardEvent: makeNodeComponent("cardEvent"),
    // Metadata about props expected for PlasmicSectionUpcomingEvents
    internalVariantProps: PlasmicSectionUpcomingEvents__VariantProps,
    internalArgProps: PlasmicSectionUpcomingEvents__ArgProps
  }
);

export default PlasmicSectionUpcomingEvents;
/* prettier-ignore-end */
