/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: aDAIm3T_wfOv
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import ComponentEventCard from "../../ComponentEventCard"; // plasmic-import: jiQVfwnxU6BH/component
import ComponentEventInfo from "../../ComponentEventInfo"; // plasmic-import: UPjziaoo_XKO/component
import { useScreenVariants as useScreenVariantsdjBtUr72ZExV } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: DJBtUr72ZExV/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicSectionUpcomingEvents.module.css"; // plasmic-import: aDAIm3T_wfOv/css

createPlasmicElementProxy;

export const PlasmicSectionUpcomingEvents__VariantProps = new Array();

export const PlasmicSectionUpcomingEvents__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSectionUpcomingEvents__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsdjBtUr72ZExV()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"section7"}
        data-plasmic-override={overrides.section7}
        hasGap={true}
        className={classNames(projectcss.all, sty.section7)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"frame2"}
          data-plasmic-override={overrides.frame2}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame2)}
        >
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {"Upcoming Courses & Events"}
          </div>
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"row"}
          data-plasmic-override={overrides.row}
          hasGap={true}
          className={classNames(projectcss.all, sty.row)}
        >
          <div className={classNames(projectcss.all, sty.column__pgAlg)}>
            <div
              data-plasmic-name={"articleImageCard"}
              data-plasmic-override={overrides.articleImageCard}
              className={classNames(projectcss.all, sty.articleImageCard)}
            >
              <ComponentEventCard
                data-plasmic-name={"componentEventCard"}
                data-plasmic-override={overrides.componentEventCard}
              />
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.column__i6Z77)}>
            <div
              data-plasmic-name={"frame5"}
              data-plasmic-override={overrides.frame5}
              className={classNames(projectcss.all, sty.frame5)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"articleCard"}
                data-plasmic-override={overrides.articleCard}
                hasGap={true}
                className={classNames(projectcss.all, sty.articleCard)}
              >
                <ComponentEventInfo
                  className={classNames(
                    "__wab_instance",
                    sty.componentEventInfo__eoQKy
                  )}
                />
              </Stack__>
              <section
                className={classNames(projectcss.all, sty.section__m3UMs)}
              />

              <Stack__
                as={"div"}
                data-plasmic-name={"articleCard2"}
                data-plasmic-override={overrides.articleCard2}
                hasGap={true}
                className={classNames(projectcss.all, sty.articleCard2)}
              >
                <ComponentEventInfo
                  className={classNames(
                    "__wab_instance",
                    sty.componentEventInfo__nMWkN
                  )}
                />
              </Stack__>
              <section
                className={classNames(projectcss.all, sty.section__maiK3)}
              />

              <Stack__
                as={"div"}
                data-plasmic-name={"articleCard3"}
                data-plasmic-override={overrides.articleCard3}
                hasGap={true}
                className={classNames(projectcss.all, sty.articleCard3)}
              >
                <ComponentEventInfo
                  className={classNames(
                    "__wab_instance",
                    sty.componentEventInfo___0HVoC
                  )}
                />
              </Stack__>
            </div>
          </div>
        </Stack__>
      </Stack__>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "section7",
    "frame2",
    "text",
    "row",
    "articleImageCard",
    "componentEventCard",
    "frame5",
    "articleCard",
    "articleCard2",
    "articleCard3"
  ],

  section7: [
    "section7",
    "frame2",
    "text",
    "row",
    "articleImageCard",
    "componentEventCard",
    "frame5",
    "articleCard",
    "articleCard2",
    "articleCard3"
  ],

  frame2: ["frame2", "text"],
  text: ["text"],
  row: [
    "row",
    "articleImageCard",
    "componentEventCard",
    "frame5",
    "articleCard",
    "articleCard2",
    "articleCard3"
  ],

  articleImageCard: ["articleImageCard", "componentEventCard"],
  componentEventCard: ["componentEventCard"],
  frame5: ["frame5", "articleCard", "articleCard2", "articleCard3"],
  articleCard: ["articleCard"],
  articleCard2: ["articleCard2"],
  articleCard3: ["articleCard3"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSectionUpcomingEvents__ArgProps,
          internalVariantPropNames: PlasmicSectionUpcomingEvents__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSectionUpcomingEvents__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSectionUpcomingEvents";
  } else {
    func.displayName = `PlasmicSectionUpcomingEvents.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionUpcomingEvents = Object.assign(
  // Top-level PlasmicSectionUpcomingEvents renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section7: makeNodeComponent("section7"),
    frame2: makeNodeComponent("frame2"),
    text: makeNodeComponent("text"),
    row: makeNodeComponent("row"),
    articleImageCard: makeNodeComponent("articleImageCard"),
    componentEventCard: makeNodeComponent("componentEventCard"),
    frame5: makeNodeComponent("frame5"),
    articleCard: makeNodeComponent("articleCard"),
    articleCard2: makeNodeComponent("articleCard2"),
    articleCard3: makeNodeComponent("articleCard3"),
    // Metadata about props expected for PlasmicSectionUpcomingEvents
    internalVariantProps: PlasmicSectionUpcomingEvents__VariantProps,
    internalArgProps: PlasmicSectionUpcomingEvents__ArgProps
  }
);

export default PlasmicSectionUpcomingEvents;
/* prettier-ignore-end */
