/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: HfgRxg6hxFsA
import * as React from "react";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import ItemSectionTitleDescriptionItem from "../../ItemSectionTitleDescriptionItem"; // plasmic-import: jaOmCC9X_Oxf/component
import ItemArticleCardItemWithDescription from "../../ItemArticleCardItemWithDescription"; // plasmic-import: m6xY8jJvNbEQ/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: -2HqLDJqJBwh/component
import { useScreenVariants as useScreenVariantsdjBtUr72ZExV } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: DJBtUr72ZExV/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicBlockArticleCardList.module.css"; // plasmic-import: HfgRxg6hxFsA/css

createPlasmicElementProxy;

export const PlasmicBlockArticleCardList__VariantProps = new Array();

export const PlasmicBlockArticleCardList__ArgProps = new Array("name");

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBlockArticleCardList__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          name: "Advocacy: Current Issues Links"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "subLinks",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return (() => {
                  const entryMap = Object.fromEntries(
                    $queries.getCardList.data.response.includes.Entry.map(
                      entry => [entry.sys.id, entry]
                    )
                  );
                  const links =
                    $queries.getCardList.data.response.items?.[0]?.fields
                      ?.featuredContent || [];
                  return links
                    .map(link => {
                      const entry = entryMap[link.sys.id];
                      return {
                        id: link.sys.id,
                        label: entry?.fields.label || "Label missing",
                        order: Number(entry?.fields.order) || 0,
                        url: entry?.fields.url || "#",
                        subText: entry?.fields.subText || "",
                        thumb: entry?.fields.thumb || "",
                        type: entry?.fields.type || "",
                        description: entry?.fields.description || ""
                      };
                    })
                    .sort((a, b) => a.order - b.order);
                })();
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "childLinks",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                return (() => {
                  const entryMap = Object.fromEntries(
                    $queries.getCardList.data.response.includes.Entry.map(
                      entry => [entry.sys.id, entry]
                    )
                  );
                  const links =
                    $queries.getCardList.data.response.items?.[0]?.fields
                      ?.childLinks || [];
                  return links
                    .map(link => {
                      const entry = entryMap[link.sys.id];
                      return {
                        id: link.sys.id,
                        label: entry?.fields.label || "Label missing",
                        order: Number(entry?.fields.order) || 0,
                        url: entry?.fields.url || "#",
                        subText: entry?.fields.subText || "",
                        thumb: entry?.fields.thumb || "",
                        type: entry?.fields.type || "",
                        description: entry?.fields.description || ""
                      };
                    })
                    .sort((a, b) => a.order - b.order);
                })();
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    getCardList: usePlasmicDataOp(() => {
      return {
        sourceId: "tbVV8SR67UpQ6Z9zuPcDPB",
        opId: "cd767760-3d32-4b02-933e-cd25d3232278",
        userArgs: {
          params: [$props.name]
        },
        cacheKey: `plasmic.$.cd767760-3d32-4b02-933e-cd25d3232278.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsdjBtUr72ZExV()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <ItemSectionTitleDescriptionItem
        data-plasmic-name={"itemSectionTitleDescriptionItem"}
        data-plasmic-override={overrides.itemSectionTitleDescriptionItem}
        className={classNames(
          "__wab_instance",
          sty.itemSectionTitleDescriptionItem
        )}
        descriptionSection={(() => {
          try {
            return $queries.getCardList.data.response.items[0].fields.subText;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        title={(() => {
          try {
            return $queries.getCardList.data.response.items[0].fields.label;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
      />

      <div className={classNames(projectcss.all, sty.freeBox__wHb3H)}>
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return $state.subLinks;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <div
              className={classNames(projectcss.all, sty.freeBox__j6D4O)}
              key={currentIndex}
            >
              <ItemArticleCardItemWithDescription
                data-plasmic-name={"itemArticleCardItemWithDescription"}
                data-plasmic-override={
                  overrides.itemArticleCardItemWithDescription
                }
                articleTitle={(() => {
                  try {
                    return currentItem.label !== "Label missing"
                      ? currentItem.label
                      : undefined;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                className={classNames(
                  "__wab_instance",
                  sty.itemArticleCardItemWithDescription
                )}
                description={(() => {
                  try {
                    return currentItem.description.content[0].content[0].value;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                heading={(() => {
                  try {
                    return currentItem.type;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                imageId={(() => {
                  try {
                    return currentItem.thumb.sys.id;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                linkUrl={(() => {
                  try {
                    return currentItem.url;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            </div>
          );
        })}
      </div>
      {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
        (() => {
          try {
            return $state.childLinks;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return [];
            }
            throw e;
          }
        })()
      ).map((__plasmic_item_0, __plasmic_idx_0) => {
        const currentItem = __plasmic_item_0;
        const currentIndex = __plasmic_idx_0;
        return (
          <div
            className={classNames(projectcss.all, sty.freeBox__u2Y8W)}
            key={currentIndex}
          >
            <ButtonPrimary
              data-plasmic-name={"buttonPrimary"}
              data-plasmic-override={overrides.buttonPrimary}
              className={classNames("__wab_instance", sty.buttonPrimary)}
              text={(() => {
                try {
                  return currentItem.label;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              textArrowButton={true}
              url={(() => {
                try {
                  return currentItem.url;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            />
          </div>
        );
      })}
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "itemSectionTitleDescriptionItem",
    "itemArticleCardItemWithDescription",
    "buttonPrimary"
  ],

  itemSectionTitleDescriptionItem: ["itemSectionTitleDescriptionItem"],
  itemArticleCardItemWithDescription: ["itemArticleCardItemWithDescription"],
  buttonPrimary: ["buttonPrimary"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBlockArticleCardList__ArgProps,
          internalVariantPropNames: PlasmicBlockArticleCardList__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBlockArticleCardList__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBlockArticleCardList";
  } else {
    func.displayName = `PlasmicBlockArticleCardList.${nodeName}`;
  }
  return func;
}

export const PlasmicBlockArticleCardList = Object.assign(
  // Top-level PlasmicBlockArticleCardList renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    itemSectionTitleDescriptionItem: makeNodeComponent(
      "itemSectionTitleDescriptionItem"
    ),
    itemArticleCardItemWithDescription: makeNodeComponent(
      "itemArticleCardItemWithDescription"
    ),
    buttonPrimary: makeNodeComponent("buttonPrimary"),
    // Metadata about props expected for PlasmicBlockArticleCardList
    internalVariantProps: PlasmicBlockArticleCardList__VariantProps,
    internalArgProps: PlasmicBlockArticleCardList__ArgProps
  }
);

export default PlasmicBlockArticleCardList;
/* prettier-ignore-end */
