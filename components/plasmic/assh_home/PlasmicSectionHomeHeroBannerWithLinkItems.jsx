/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: KrK4IjZZwAsd
import * as React from "react";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: -2HqLDJqJBwh/component
import BlockHeroBannerBlockItem from "../../BlockHeroBannerBlockItem"; // plasmic-import: uP-uUACbvTsG/component
import { useScreenVariants as useScreenVariantsdjBtUr72ZExV } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: DJBtUr72ZExV/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicSectionHomeHeroBannerWithLinkItems.module.css"; // plasmic-import: KrK4IjZZwAsd/css
import ContainerIcon from "./icons/PlasmicIcon__Container"; // plasmic-import: LdpaQ2yuf9hP/icon
import Container2Icon from "./icons/PlasmicIcon__Container2"; // plasmic-import: TKWn1DDMMFQp/icon

createPlasmicElementProxy;

export const PlasmicSectionHomeHeroBannerWithLinkItems__VariantProps =
  new Array();

export const PlasmicSectionHomeHeroBannerWithLinkItems__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSectionHomeHeroBannerWithLinkItems__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsdjBtUr72ZExV()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"frame2"}
        data-plasmic-override={overrides.frame2}
        className={classNames(projectcss.all, sty.frame2)}
      >
        <div
          data-plasmic-name={"row"}
          data-plasmic-override={overrides.row}
          className={classNames(projectcss.all, sty.row)}
        >
          <div className={classNames(projectcss.all, sty.column__oI4O)}>
            <Stack__
              as={"div"}
              data-plasmic-name={"frame3"}
              data-plasmic-override={overrides.frame3}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame3)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"frame4"}
                data-plasmic-override={overrides.frame4}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame4)}
              >
                <div
                  data-plasmic-name={"frame5"}
                  data-plasmic-override={overrides.frame5}
                  className={classNames(projectcss.all, sty.frame5)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qn6Qx
                    )}
                  >
                    {"Join. Connect. Grow:"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tft5J
                    )}
                  >
                    {"The ASSH Advantage"}
                  </div>
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___1YPEw
                  )}
                >
                  {
                    "Discover how the ASSH helps you grow clinically, professionally, and personally."
                  }
                </div>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame6"}
                  data-plasmic-override={overrides.frame6}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame6)}
                >
                  <ButtonPrimary
                    className={classNames(
                      "__wab_instance",
                      sty.buttonPrimary___8T3UC
                    )}
                    darkInteractions={"dark"}
                    text={"Find a Surgeon"}
                    url={"https://www.handcare.org/fahs"}
                  />

                  <ButtonPrimary
                    className={classNames(
                      "__wab_instance",
                      sty.buttonPrimary___0Qdhs
                    )}
                    darkInteractions={"dark"}
                    text={"Join ASSH"}
                    url={"https://www.assh.org/membership/join-assh"}
                  />
                </Stack__>
              </Stack__>
            </Stack__>
          </div>
          <div className={classNames(projectcss.all, sty.column__f9WDi)}>
            <div
              data-plasmic-name={"column"}
              data-plasmic-override={overrides.column}
              className={classNames(projectcss.all, sty.column)}
            />
          </div>
        </div>
        <Stack__
          as={"div"}
          data-plasmic-name={"section2"}
          data-plasmic-override={overrides.section2}
          hasGap={true}
          className={classNames(projectcss.all, sty.section2)}
        >
          <div
            data-plasmic-name={"row2"}
            data-plasmic-override={overrides.row2}
            className={classNames(projectcss.all, sty.row2)}
          >
            <BlockHeroBannerBlockItem
              _1={["_1"]}
              className={classNames(
                "__wab_instance",
                sty.blockHeroBannerBlockItem__r2JjN
              )}
            />

            <BlockHeroBannerBlockItem
              _1={[]}
              _2={["_2"]}
              className={classNames(
                "__wab_instance",
                sty.blockHeroBannerBlockItem__cpn8W
              )}
            />

            <BlockHeroBannerBlockItem
              _1={[]}
              _2={[]}
              _3={["_3"]}
              className={classNames(
                "__wab_instance",
                sty.blockHeroBannerBlockItem__rbh3B
              )}
            />

            <BlockHeroBannerBlockItem
              _1={[]}
              _2={[]}
              _4={["_4"]}
              className={classNames(
                "__wab_instance",
                sty.blockHeroBannerBlockItem__je8S3
              )}
            />
          </div>
        </Stack__>
      </div>
      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : false) ? (
        <div
          data-plasmic-name={"row3"}
          data-plasmic-override={overrides.row3}
          className={classNames(projectcss.all, sty.row3)}
        >
          <div
            data-plasmic-name={"column2"}
            data-plasmic-override={overrides.column2}
            className={classNames(projectcss.all, sty.column2)}
          />

          <Stack__
            as={"div"}
            data-plasmic-name={"frame7"}
            data-plasmic-override={overrides.frame7}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame7)}
          >
            <div
              data-plasmic-name={"frame8"}
              data-plasmic-override={overrides.frame8}
              className={classNames(projectcss.all, sty.frame8)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__gQgM5
                )}
              >
                {"Join. Connect. Grow:"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__uc5Uk
                )}
              >
                {"The ASSH Advantage"}
              </div>
            </div>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__sf21J
              )}
            >
              {
                "Discover how the ASSH helps you grow clinically, professionally, and personally."
              }
            </div>
            <Stack__
              as={"div"}
              data-plasmic-name={"frame9"}
              data-plasmic-override={overrides.frame9}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame9)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"buttonPrimaryDark5"}
                data-plasmic-override={overrides.buttonPrimaryDark5}
                hasGap={true}
                className={classNames(projectcss.all, sty.buttonPrimaryDark5)}
              >
                {false ? (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"icon12X125"}
                    data-plasmic-override={overrides.icon12X125}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.icon12X125)}
                  >
                    <Stack__
                      as={ContainerIcon}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.svg__x1Cy0)}
                      role={"img"}
                    />
                  </Stack__>
                ) : null}
                <div
                  data-plasmic-name={"buttonPrimaryDark6"}
                  data-plasmic-override={overrides.buttonPrimaryDark6}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.buttonPrimaryDark6
                  )}
                >
                  {"Find a Surgeon"}
                </div>
                {false ? (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"icon12X126"}
                    data-plasmic-override={overrides.icon12X126}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.icon12X126)}
                  >
                    <Stack__
                      as={Container2Icon}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.svg__skR6K)}
                      role={"img"}
                    />
                  </Stack__>
                ) : null}
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"buttonPrimaryDark7"}
                data-plasmic-override={overrides.buttonPrimaryDark7}
                hasGap={true}
                className={classNames(projectcss.all, sty.buttonPrimaryDark7)}
              >
                {false ? (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"icon12X127"}
                    data-plasmic-override={overrides.icon12X127}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.icon12X127)}
                  >
                    <Stack__
                      as={ContainerIcon}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.svg__qXiMg)}
                      role={"img"}
                    />
                  </Stack__>
                ) : null}
                <div
                  data-plasmic-name={"buttonPrimaryDark8"}
                  data-plasmic-override={overrides.buttonPrimaryDark8}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.buttonPrimaryDark8
                  )}
                >
                  {"Join ASSH"}
                </div>
                {false ? (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"icon12X128"}
                    data-plasmic-override={overrides.icon12X128}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.icon12X128)}
                  >
                    <Stack__
                      as={Container2Icon}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.svg__rLf9K)}
                      role={"img"}
                    />
                  </Stack__>
                ) : null}
              </Stack__>
            </Stack__>
          </Stack__>
        </div>
      ) : null}
      {(hasVariant(globalVariants, "screen", "mobileOnly") ? true : false) ? (
        <Stack__
          as={"div"}
          data-plasmic-name={"frame10"}
          data-plasmic-override={overrides.frame10}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame10)}
        >
          <div
            data-plasmic-name={"row4"}
            data-plasmic-override={overrides.row4}
            className={classNames(projectcss.all, sty.row4)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"inner5"}
              data-plasmic-override={overrides.inner5}
              hasGap={true}
              className={classNames(projectcss.all, sty.inner5)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"content5"}
                data-plasmic-override={overrides.content5}
                hasGap={true}
                className={classNames(projectcss.all, sty.content5)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bz16G
                  )}
                >
                  {"ASSH Coding App"}
                </div>
                <Stack__
                  as={PlasmicImg__}
                  hasGap={true}
                  alt={""}
                  className={classNames(sty.img__p0NzP)}
                  displayHeight={"30px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"30px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/assh_home/images/frame3.svg",
                    fullWidth: 30,
                    fullHeight: 30,
                    aspectRatio: undefined
                  }}
                />
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"inner6"}
              data-plasmic-override={overrides.inner6}
              hasGap={true}
              className={classNames(projectcss.all, sty.inner6)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"content6"}
                data-plasmic-override={overrides.content6}
                hasGap={true}
                className={classNames(projectcss.all, sty.content6)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ljvSk
                  )}
                >
                  {"Practice Management Resources"}
                </div>
                <Stack__
                  as={PlasmicImg__}
                  hasGap={true}
                  alt={""}
                  className={classNames(sty.img__bTmob)}
                  displayHeight={"30px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"30px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/assh_home/images/frame4.svg",
                    fullWidth: 30,
                    fullHeight: 30,
                    aspectRatio: undefined
                  }}
                />
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"inner7"}
              data-plasmic-override={overrides.inner7}
              hasGap={true}
              className={classNames(projectcss.all, sty.inner7)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"content7"}
                data-plasmic-override={overrides.content7}
                hasGap={true}
                className={classNames(projectcss.all, sty.content7)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ujgjl
                  )}
                >
                  {"Surgical Education"}
                </div>
                <Stack__
                  as={PlasmicImg__}
                  hasGap={true}
                  alt={""}
                  className={classNames(sty.img__dp0Ow)}
                  displayHeight={"30px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"30px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/assh_home/images/frame3.svg",
                    fullWidth: 30,
                    fullHeight: 30,
                    aspectRatio: undefined
                  }}
                />
              </Stack__>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"inner8"}
              data-plasmic-override={overrides.inner8}
              hasGap={true}
              className={classNames(projectcss.all, sty.inner8)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"content8"}
                data-plasmic-override={overrides.content8}
                hasGap={true}
                className={classNames(projectcss.all, sty.content8)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__lKeLs
                  )}
                >
                  {"ASSH Annual Meeting"}
                </div>
                <Stack__
                  as={PlasmicImg__}
                  hasGap={true}
                  alt={""}
                  className={classNames(sty.img___8KupR)}
                  displayHeight={"30px"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"100%"}
                  displayMinHeight={"0"}
                  displayMinWidth={"0"}
                  displayWidth={"30px"}
                  loading={"lazy"}
                  src={{
                    src: "/plasmic/assh_home/images/frame4.svg",
                    fullWidth: 30,
                    fullHeight: 30,
                    aspectRatio: undefined
                  }}
                />
              </Stack__>
            </Stack__>
          </div>
        </Stack__>
      ) : null}
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "frame2",
    "row",
    "frame3",
    "frame4",
    "frame5",
    "frame6",
    "column",
    "section2",
    "row2",
    "row3",
    "column2",
    "frame7",
    "frame8",
    "frame9",
    "buttonPrimaryDark5",
    "icon12X125",
    "buttonPrimaryDark6",
    "icon12X126",
    "buttonPrimaryDark7",
    "icon12X127",
    "buttonPrimaryDark8",
    "icon12X128",
    "frame10",
    "row4",
    "inner5",
    "content5",
    "inner6",
    "content6",
    "inner7",
    "content7",
    "inner8",
    "content8"
  ],

  frame2: [
    "frame2",
    "row",
    "frame3",
    "frame4",
    "frame5",
    "frame6",
    "column",
    "section2",
    "row2"
  ],

  row: ["row", "frame3", "frame4", "frame5", "frame6", "column"],
  frame3: ["frame3", "frame4", "frame5", "frame6"],
  frame4: ["frame4", "frame5", "frame6"],
  frame5: ["frame5"],
  frame6: ["frame6"],
  column: ["column"],
  section2: ["section2", "row2"],
  row2: ["row2"],
  row3: [
    "row3",
    "column2",
    "frame7",
    "frame8",
    "frame9",
    "buttonPrimaryDark5",
    "icon12X125",
    "buttonPrimaryDark6",
    "icon12X126",
    "buttonPrimaryDark7",
    "icon12X127",
    "buttonPrimaryDark8",
    "icon12X128"
  ],

  column2: ["column2"],
  frame7: [
    "frame7",
    "frame8",
    "frame9",
    "buttonPrimaryDark5",
    "icon12X125",
    "buttonPrimaryDark6",
    "icon12X126",
    "buttonPrimaryDark7",
    "icon12X127",
    "buttonPrimaryDark8",
    "icon12X128"
  ],

  frame8: ["frame8"],
  frame9: [
    "frame9",
    "buttonPrimaryDark5",
    "icon12X125",
    "buttonPrimaryDark6",
    "icon12X126",
    "buttonPrimaryDark7",
    "icon12X127",
    "buttonPrimaryDark8",
    "icon12X128"
  ],

  buttonPrimaryDark5: [
    "buttonPrimaryDark5",
    "icon12X125",
    "buttonPrimaryDark6",
    "icon12X126"
  ],

  icon12X125: ["icon12X125"],
  buttonPrimaryDark6: ["buttonPrimaryDark6"],
  icon12X126: ["icon12X126"],
  buttonPrimaryDark7: [
    "buttonPrimaryDark7",
    "icon12X127",
    "buttonPrimaryDark8",
    "icon12X128"
  ],

  icon12X127: ["icon12X127"],
  buttonPrimaryDark8: ["buttonPrimaryDark8"],
  icon12X128: ["icon12X128"],
  frame10: [
    "frame10",
    "row4",
    "inner5",
    "content5",
    "inner6",
    "content6",
    "inner7",
    "content7",
    "inner8",
    "content8"
  ],

  row4: [
    "row4",
    "inner5",
    "content5",
    "inner6",
    "content6",
    "inner7",
    "content7",
    "inner8",
    "content8"
  ],

  inner5: ["inner5", "content5"],
  content5: ["content5"],
  inner6: ["inner6", "content6"],
  content6: ["content6"],
  inner7: ["inner7", "content7"],
  content7: ["content7"],
  inner8: ["inner8", "content8"],
  content8: ["content8"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames:
            PlasmicSectionHomeHeroBannerWithLinkItems__ArgProps,
          internalVariantPropNames:
            PlasmicSectionHomeHeroBannerWithLinkItems__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSectionHomeHeroBannerWithLinkItems__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSectionHomeHeroBannerWithLinkItems";
  } else {
    func.displayName = `PlasmicSectionHomeHeroBannerWithLinkItems.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionHomeHeroBannerWithLinkItems = Object.assign(
  // Top-level PlasmicSectionHomeHeroBannerWithLinkItems renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    frame2: makeNodeComponent("frame2"),
    row: makeNodeComponent("row"),
    frame3: makeNodeComponent("frame3"),
    frame4: makeNodeComponent("frame4"),
    frame5: makeNodeComponent("frame5"),
    frame6: makeNodeComponent("frame6"),
    column: makeNodeComponent("column"),
    section2: makeNodeComponent("section2"),
    row2: makeNodeComponent("row2"),
    row3: makeNodeComponent("row3"),
    column2: makeNodeComponent("column2"),
    frame7: makeNodeComponent("frame7"),
    frame8: makeNodeComponent("frame8"),
    frame9: makeNodeComponent("frame9"),
    buttonPrimaryDark5: makeNodeComponent("buttonPrimaryDark5"),
    icon12X125: makeNodeComponent("icon12X125"),
    buttonPrimaryDark6: makeNodeComponent("buttonPrimaryDark6"),
    icon12X126: makeNodeComponent("icon12X126"),
    buttonPrimaryDark7: makeNodeComponent("buttonPrimaryDark7"),
    icon12X127: makeNodeComponent("icon12X127"),
    buttonPrimaryDark8: makeNodeComponent("buttonPrimaryDark8"),
    icon12X128: makeNodeComponent("icon12X128"),
    frame10: makeNodeComponent("frame10"),
    row4: makeNodeComponent("row4"),
    inner5: makeNodeComponent("inner5"),
    content5: makeNodeComponent("content5"),
    inner6: makeNodeComponent("inner6"),
    content6: makeNodeComponent("content6"),
    inner7: makeNodeComponent("inner7"),
    content7: makeNodeComponent("content7"),
    inner8: makeNodeComponent("inner8"),
    content8: makeNodeComponent("content8"),
    // Metadata about props expected for PlasmicSectionHomeHeroBannerWithLinkItems
    internalVariantProps:
      PlasmicSectionHomeHeroBannerWithLinkItems__VariantProps,
    internalArgProps: PlasmicSectionHomeHeroBannerWithLinkItems__ArgProps
  }
);

export default PlasmicSectionHomeHeroBannerWithLinkItems;
/* prettier-ignore-end */
