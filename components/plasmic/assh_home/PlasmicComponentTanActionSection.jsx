/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: YJsN7RAC0P0B
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import AsshButton from "../../AsshButton"; // plasmic-import: -2HqLDJqJBwh/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicComponentTanActionSection.module.css"; // plasmic-import: YJsN7RAC0P0B/css

createPlasmicElementProxy;

export const PlasmicComponentTanActionSection__VariantProps = new Array();

export const PlasmicComponentTanActionSection__ArgProps = new Array(
  "text2",
  "linkText",
  "linkUrl"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicComponentTanActionSection__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          text2:
            "The 2025 Active Membership Application submission deadline is open until February 3, 2025.",
          linkText: "Apply for Active Membership",
          linkUrl: "https://www.assh.org"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"frame6"}
        data-plasmic-override={overrides.frame6}
        hasGap={true}
        className={classNames(projectcss.all, sty.frame6)}
      >
        <div
          data-plasmic-name={"text"}
          data-plasmic-override={overrides.text}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.text2;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "The 2025 Active Membership Application submission deadline is open until February 3, 2025.";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <AsshButton
          data-plasmic-name={"asshButton"}
          data-plasmic-override={overrides.asshButton}
          className={classNames("__wab_instance", sty.asshButton)}
          secondaryInteractions={"secondary"}
          text={(() => {
            try {
              return $props.linkText;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        />
      </Stack__>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "frame6", "text", "asshButton"],
  frame6: ["frame6", "text", "asshButton"],
  text: ["text"],
  asshButton: ["asshButton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicComponentTanActionSection__ArgProps,
          internalVariantPropNames:
            PlasmicComponentTanActionSection__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicComponentTanActionSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicComponentTanActionSection";
  } else {
    func.displayName = `PlasmicComponentTanActionSection.${nodeName}`;
  }
  return func;
}

export const PlasmicComponentTanActionSection = Object.assign(
  // Top-level PlasmicComponentTanActionSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    frame6: makeNodeComponent("frame6"),
    text: makeNodeComponent("text"),
    asshButton: makeNodeComponent("asshButton"),
    // Metadata about props expected for PlasmicComponentTanActionSection
    internalVariantProps: PlasmicComponentTanActionSection__VariantProps,
    internalArgProps: PlasmicComponentTanActionSection__ArgProps
  }
);

export default PlasmicComponentTanActionSection;
/* prettier-ignore-end */
