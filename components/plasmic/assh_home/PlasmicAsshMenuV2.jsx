/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: mv8TRZhS1g6m
import * as React from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateStateOnChangeProp,
  hasVariant,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import AsshDropdownLinkItem from "../../AsshDropdownLinkItem"; // plasmic-import: MET00VyMH6Cv/component
import AsshDropdownButtonExploreAssh from "../../AsshDropdownButtonExploreAssh"; // plasmic-import: oIPk7PUdbLu5/component
import TextInput from "../../TextInput"; // plasmic-import: pHEipOYmMSGQ/component
import AsshDropdownButtonHamburger from "../../AsshDropdownButtonHamburger"; // plasmic-import: qpQjKfyYOrul/component
import { useScreenVariants as useScreenVariantsdjBtUr72ZExV } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: DJBtUr72ZExV/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicAsshMenuV2.module.css"; // plasmic-import: mv8TRZhS1g6m/css
import CloseBoldSvgrepoComSvgIcon from "./icons/PlasmicIcon__CloseBoldSvgrepoComSvg"; // plasmic-import: kgKw8A-hT9fj/icon
import StoreSvgIcon from "./icons/PlasmicIcon__StoreSvg"; // plasmic-import: dpcKEE_taXyj/icon
import AccountSvgIcon from "./icons/PlasmicIcon__AccountSvg"; // plasmic-import: q4aybZJsZKNp/icon
import Icon6Icon from "./icons/PlasmicIcon__Icon6"; // plasmic-import: w0McW8zNaK42/icon

createPlasmicElementProxy;

export const PlasmicAsshMenuV2__VariantProps = new Array();

export const PlasmicAsshMenuV2__ArgProps = new Array(
  "exploreOpen",
  "onExploreOpenChange",
  "cartQuantity",
  "accountName",
  "imgUrl",
  "accountImageUrl"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAsshMenuV2__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          cartQuantity: 0,
          accountName: "Account"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "textInput.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      },
      {
        path: "exploreOpen",
        type: "writable",
        variableType: "boolean",
        valueProp: "exploreOpen",
        onChangeProp: "onExploreOpenChange"
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    utilityNav: usePlasmicDataOp(() => {
      return {
        sourceId: "tbVV8SR67UpQ6Z9zuPcDPB",
        opId: "858b15fe-df67-4026-84b1-0b1a68e1122d",
        userArgs: {},
        cacheKey: `plasmic.$.858b15fe-df67-4026-84b1-0b1a68e1122d.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    query2: usePlasmicDataOp(() => {
      return {
        sourceId: "tbVV8SR67UpQ6Z9zuPcDPB",
        opId: "c89fcc75-a075-4fea-8f4f-d44115f026b1",
        userArgs: {},
        cacheKey: `plasmic.$.c89fcc75-a075-4fea-8f4f-d44115f026b1.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getExploreDropdown: usePlasmicDataOp(() => {
      return {
        sourceId: "tbVV8SR67UpQ6Z9zuPcDPB",
        opId: "fcf773fa-bc2c-4450-a5c3-4bf1758c6f3f",
        userArgs: {},
        cacheKey: `plasmic.$.fcf773fa-bc2c-4450-a5c3-4bf1758c6f3f.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getImage: usePlasmicDataOp(() => {
      return {
        sourceId: "n5sYZavh6xkK4D8BEueUSq",
        opId: "515110a1-5998-4e90-a360-48af6b25eebe",
        userArgs: {},
        cacheKey: `plasmic.$.515110a1-5998-4e90-a360-48af6b25eebe.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsdjBtUr72ZExV()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <section
        data-plasmic-name={"exploreDropdown"}
        data-plasmic-override={overrides.exploreDropdown}
        className={classNames(projectcss.all, sty.exploreDropdown)}
      >
        <PlasmicLink__
          data-plasmic-name={"closeLink"}
          data-plasmic-override={overrides.closeLink}
          className={classNames(projectcss.all, projectcss.a, sty.closeLink)}
          component={Link}
          platform={"nextjs"}
        >
          <CloseBoldSvgrepoComSvgIcon
            data-plasmic-name={"closeIcon2"}
            data-plasmic-override={overrides.closeIcon2}
            className={classNames(projectcss.all, sty.closeIcon2)}
            role={"img"}
          />
        </PlasmicLink__>
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return $queries.getExploreDropdown.data.response.items;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <div
              className={classNames(projectcss.all, sty.freeBox__uvU7P)}
              key={currentIndex}
            >
              <div className={classNames(projectcss.all, sty.freeBox__cjNz1)}>
                <AsshDropdownLinkItem
                  data-plasmic-name={"asshDropdownLinkItem"}
                  data-plasmic-override={overrides.asshDropdownLinkItem}
                  assetId={(() => {
                    try {
                      return currentItem.fields.icon.sys.id;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  className={classNames(
                    "__wab_instance",
                    sty.asshDropdownLinkItem
                  )}
                  label={(() => {
                    try {
                      return currentItem.fields.label;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  url={(() => {
                    try {
                      return currentItem.fields.url;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "https://www.assh.org";
                      }
                      throw e;
                    }
                  })()}
                />
              </div>
            </div>
          );
        })}
      </section>
      <div className={classNames(projectcss.all, sty.freeBox__vf81G)}>
        <div
          data-plasmic-name={"topBar"}
          data-plasmic-override={overrides.topBar}
          className={classNames(projectcss.all, sty.topBar)}
        >
          <section
            data-plasmic-name={"topBarLeft"}
            data-plasmic-override={overrides.topBarLeft}
            className={classNames(projectcss.all, sty.topBarLeft)}
          >
            <AsshDropdownButtonExploreAssh
              data-plasmic-name={"asshDropdownButtonExploreAssh"}
              data-plasmic-override={overrides.asshDropdownButtonExploreAssh}
              className={classNames(
                "__wab_instance",
                sty.asshDropdownButtonExploreAssh
              )}
            />
          </section>
          <section
            data-plasmic-name={"topBarRight"}
            data-plasmic-override={overrides.topBarRight}
            className={classNames(projectcss.all, sty.topBarRight)}
          >
            <div
              data-plasmic-name={"exploreAsshDropdownButton2"}
              data-plasmic-override={overrides.exploreAsshDropdownButton2}
              className={classNames(
                projectcss.all,
                sty.exploreAsshDropdownButton2
              )}
            >
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__eVah
                )}
                component={Link}
                platform={"nextjs"}
              >
                <StoreSvgIcon
                  data-plasmic-name={"storeIcon"}
                  data-plasmic-override={overrides.storeIcon}
                  className={classNames(projectcss.all, sty.storeIcon)}
                  role={"img"}
                />

                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__rpupS
                  )}
                >
                  {"Store"}
                </div>
              </PlasmicLink__>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__c7F6
                )}
                component={Link}
                platform={"nextjs"}
              >
                {(() => {
                  try {
                    return $props.accountImageUrl === undefined;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <AccountSvgIcon
                    data-plasmic-name={"accountIcon"}
                    data-plasmic-override={overrides.accountIcon}
                    className={classNames(projectcss.all, sty.accountIcon)}
                    role={"img"}
                  />
                ) : null}
                {(() => {
                  try {
                    return $props.accountImageUrl !== undefined;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <PlasmicImg__
                    data-plasmic-name={"acctImage"}
                    data-plasmic-override={overrides.acctImage}
                    alt={""}
                    className={classNames(sty.acctImage)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"26px"}
                    height={"26px"}
                    loading={"lazy"}
                    src={(() => {
                      try {
                        return $props.accountImageUrl;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    width={"26px"}
                  />
                ) : null}
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__squWm
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.accountName;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Account";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </PlasmicLink__>
            </div>
          </section>
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__wjsNs)}>
        <div
          data-plasmic-name={"topBar2"}
          data-plasmic-override={overrides.topBar2}
          className={classNames(projectcss.all, sty.topBar2)}
        >
          <section
            data-plasmic-name={"topBarLeft2"}
            data-plasmic-override={overrides.topBarLeft2}
            className={classNames(projectcss.all, sty.topBarLeft2)}
          >
            <div
              data-plasmic-name={"exploreAsshDropdownButton3"}
              data-plasmic-override={overrides.exploreAsshDropdownButton3}
              className={classNames(
                projectcss.all,
                sty.exploreAsshDropdownButton3
              )}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__rpHz)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "smallDesktop")
                    ? "40px"
                    : "50px"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "smallMobile")
                    ? "auto"
                    : hasVariant(globalVariants, "screen", "smallDesktop")
                    ? "40px"
                    : "50px"
                }
                loading={"lazy"}
                src={{
                  src: "/plasmic/assh_home/images/image.svg",
                  fullWidth: 80,
                  fullHeight: 80,
                  aspectRatio: 1
                }}
              />

              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__jMdrM)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "smallMobile")
                    ? "auto"
                    : hasVariant(globalVariants, "screen", "smallDesktop")
                    ? "30px"
                    : "35px"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/assh_home/images/logotextPng.png",
                  fullWidth: 440,
                  fullHeight: 55,
                  aspectRatio: undefined
                }}
              />
            </div>
          </section>
          <section
            data-plasmic-name={"topBarRight2"}
            data-plasmic-override={overrides.topBarRight2}
            className={classNames(projectcss.all, sty.topBarRight2)}
          >
            <div
              data-plasmic-name={"exploreAsshDropdownButton4"}
              data-plasmic-override={overrides.exploreAsshDropdownButton4}
              className={classNames(
                projectcss.all,
                sty.exploreAsshDropdownButton4
              )}
            >
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.link__bpVEa
                )}
                component={Link}
                platform={"nextjs"}
              >
                <TextInput
                  data-plasmic-name={"textInput"}
                  data-plasmic-override={overrides.textInput}
                  ariaLabel={"Search"}
                  className={classNames("__wab_instance", sty.textInput)}
                  inputMode={"text"}
                  inputType={"search"}
                  onChange={async (...eventArgs) => {
                    generateStateOnChangeProp($state, [
                      "textInput",
                      "value"
                    ]).apply(null, eventArgs);
                    if (
                      eventArgs.length > 1 &&
                      eventArgs[1] &&
                      eventArgs[1]._plasmic_state_init_
                    ) {
                      return;
                    }
                  }}
                  placeholder={"Search"}
                />

                <Icon6Icon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />
              </PlasmicLink__>
              <AsshDropdownButtonHamburger
                data-plasmic-name={"asshDropdownButtonHamburger"}
                data-plasmic-override={overrides.asshDropdownButtonHamburger}
                className={classNames(
                  "__wab_instance",
                  sty.asshDropdownButtonHamburger
                )}
              />
            </div>
          </section>
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__quZvL)} />
      <div className={classNames(projectcss.all, sty.freeBox__dzW4E)}>
        <div
          data-plasmic-name={"nav"}
          data-plasmic-override={overrides.nav}
          className={classNames(projectcss.all, sty.nav)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__aVyUu)}>
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $queries.query2.data.response.items;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__kGwJc
                  )}
                  component={Link}
                  href={(() => {
                    try {
                      return undefined;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "https://www.assh.org/";
                      }
                      throw e;
                    }
                  })()}
                  key={currentIndex}
                  platform={"nextjs"}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return currentItem.fields.label;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Some link text";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </PlasmicLink__>
              );
            })}
          </div>
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__yQjb9)} />
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "exploreDropdown",
    "closeLink",
    "closeIcon2",
    "asshDropdownLinkItem",
    "topBar",
    "topBarLeft",
    "asshDropdownButtonExploreAssh",
    "topBarRight",
    "exploreAsshDropdownButton2",
    "storeIcon",
    "accountIcon",
    "acctImage",
    "topBar2",
    "topBarLeft2",
    "exploreAsshDropdownButton3",
    "topBarRight2",
    "exploreAsshDropdownButton4",
    "textInput",
    "svg",
    "asshDropdownButtonHamburger",
    "nav"
  ],

  exploreDropdown: [
    "exploreDropdown",
    "closeLink",
    "closeIcon2",
    "asshDropdownLinkItem"
  ],

  closeLink: ["closeLink", "closeIcon2"],
  closeIcon2: ["closeIcon2"],
  asshDropdownLinkItem: ["asshDropdownLinkItem"],
  topBar: [
    "topBar",
    "topBarLeft",
    "asshDropdownButtonExploreAssh",
    "topBarRight",
    "exploreAsshDropdownButton2",
    "storeIcon",
    "accountIcon",
    "acctImage"
  ],

  topBarLeft: ["topBarLeft", "asshDropdownButtonExploreAssh"],
  asshDropdownButtonExploreAssh: ["asshDropdownButtonExploreAssh"],
  topBarRight: [
    "topBarRight",
    "exploreAsshDropdownButton2",
    "storeIcon",
    "accountIcon",
    "acctImage"
  ],

  exploreAsshDropdownButton2: [
    "exploreAsshDropdownButton2",
    "storeIcon",
    "accountIcon",
    "acctImage"
  ],

  storeIcon: ["storeIcon"],
  accountIcon: ["accountIcon"],
  acctImage: ["acctImage"],
  topBar2: [
    "topBar2",
    "topBarLeft2",
    "exploreAsshDropdownButton3",
    "topBarRight2",
    "exploreAsshDropdownButton4",
    "textInput",
    "svg",
    "asshDropdownButtonHamburger"
  ],

  topBarLeft2: ["topBarLeft2", "exploreAsshDropdownButton3"],
  exploreAsshDropdownButton3: ["exploreAsshDropdownButton3"],
  topBarRight2: [
    "topBarRight2",
    "exploreAsshDropdownButton4",
    "textInput",
    "svg",
    "asshDropdownButtonHamburger"
  ],

  exploreAsshDropdownButton4: [
    "exploreAsshDropdownButton4",
    "textInput",
    "svg",
    "asshDropdownButtonHamburger"
  ],

  textInput: ["textInput"],
  svg: ["svg"],
  asshDropdownButtonHamburger: ["asshDropdownButtonHamburger"],
  nav: ["nav"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAsshMenuV2__ArgProps,
          internalVariantPropNames: PlasmicAsshMenuV2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAsshMenuV2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAsshMenuV2";
  } else {
    func.displayName = `PlasmicAsshMenuV2.${nodeName}`;
  }
  return func;
}

export const PlasmicAsshMenuV2 = Object.assign(
  // Top-level PlasmicAsshMenuV2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    exploreDropdown: makeNodeComponent("exploreDropdown"),
    closeLink: makeNodeComponent("closeLink"),
    closeIcon2: makeNodeComponent("closeIcon2"),
    asshDropdownLinkItem: makeNodeComponent("asshDropdownLinkItem"),
    topBar: makeNodeComponent("topBar"),
    topBarLeft: makeNodeComponent("topBarLeft"),
    asshDropdownButtonExploreAssh: makeNodeComponent(
      "asshDropdownButtonExploreAssh"
    ),
    topBarRight: makeNodeComponent("topBarRight"),
    exploreAsshDropdownButton2: makeNodeComponent("exploreAsshDropdownButton2"),
    storeIcon: makeNodeComponent("storeIcon"),
    accountIcon: makeNodeComponent("accountIcon"),
    acctImage: makeNodeComponent("acctImage"),
    topBar2: makeNodeComponent("topBar2"),
    topBarLeft2: makeNodeComponent("topBarLeft2"),
    exploreAsshDropdownButton3: makeNodeComponent("exploreAsshDropdownButton3"),
    topBarRight2: makeNodeComponent("topBarRight2"),
    exploreAsshDropdownButton4: makeNodeComponent("exploreAsshDropdownButton4"),
    textInput: makeNodeComponent("textInput"),
    svg: makeNodeComponent("svg"),
    asshDropdownButtonHamburger: makeNodeComponent(
      "asshDropdownButtonHamburger"
    ),
    nav: makeNodeComponent("nav"),
    // Metadata about props expected for PlasmicAsshMenuV2
    internalVariantProps: PlasmicAsshMenuV2__VariantProps,
    internalArgProps: PlasmicAsshMenuV2__ArgProps
  }
);

export default PlasmicAsshMenuV2;
/* prettier-ignore-end */
