/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: zbpbv6MhDowI
import * as React from "react";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicItemMenuCurrentUser.module.css"; // plasmic-import: zbpbv6MhDowI/css

createPlasmicElementProxy;

export const PlasmicItemMenuCurrentUser__VariantProps = new Array("menuOpen");

export const PlasmicItemMenuCurrentUser__ArgProps = new Array(
  "userName",
  "userImageUrl"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicItemMenuCurrentUser__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          userName: "Jane Doe"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "menuOpen",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.menuOpen
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        { [sty.rootmenuOpen]: hasVariant($state, "menuOpen", "menuOpen") }
      )}
    >
      <section
        data-plasmic-name={"section"}
        data-plasmic-override={overrides.section}
        className={classNames(projectcss.all, sty.section, {
          [sty.sectionmenuOpen]: hasVariant($state, "menuOpen", "menuOpen")
        })}
      >
        {(() => {
          try {
            return $props.userImageUrl == undefined;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div
            data-plasmic-name={"initial"}
            data-plasmic-override={overrides.initial}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.initial
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.userName.charAt(0);
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "J";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        ) : null}
        <PlasmicImg__
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img, {
            [sty.imgmenuOpen]: hasVariant($state, "menuOpen", "menuOpen")
          })}
          displayHeight={"40px"}
          displayMaxHeight={"none"}
          displayMaxWidth={"none"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"40px"}
          loading={"lazy"}
          src={(() => {
            try {
              return $props.userImageUrl;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        />
      </section>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "section", "initial", "img"],
  section: ["section", "initial", "img"],
  initial: ["initial"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicItemMenuCurrentUser__ArgProps,
          internalVariantPropNames: PlasmicItemMenuCurrentUser__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicItemMenuCurrentUser__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicItemMenuCurrentUser";
  } else {
    func.displayName = `PlasmicItemMenuCurrentUser.${nodeName}`;
  }
  return func;
}

export const PlasmicItemMenuCurrentUser = Object.assign(
  // Top-level PlasmicItemMenuCurrentUser renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    initial: makeNodeComponent("initial"),
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicItemMenuCurrentUser
    internalVariantProps: PlasmicItemMenuCurrentUser__VariantProps,
    internalArgProps: PlasmicItemMenuCurrentUser__ArgProps
  }
);

export default PlasmicItemMenuCurrentUser;
/* prettier-ignore-end */
