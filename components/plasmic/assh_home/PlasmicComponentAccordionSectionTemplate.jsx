/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: RAMfSAUHc9g1
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  get as $stateGet,
  hasVariant,
  set as $stateSet,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicComponentAccordionSectionTemplate.module.css"; // plasmic-import: RAMfSAUHc9g1/css
import Plus2Icon from "./icons/PlasmicIcon__Plus2"; // plasmic-import: aiVdLszPR_ow/icon
import Path64Icon from "./icons/PlasmicIcon__Path64"; // plasmic-import: 7mXWnzScwyMk/icon

createPlasmicElementProxy;

export const PlasmicComponentAccordionSectionTemplate__VariantProps = new Array(
  "openInteractions"
);

export const PlasmicComponentAccordionSectionTemplate__ArgProps = new Array(
  "openAccordion"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicComponentAccordionSectionTemplate__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "openInteractions",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.openInteractions
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootopenInteractions_open]: hasVariant(
            $state,
            "openInteractions",
            "open"
          )
        }
      )}
    >
      <div
        data-plasmic-name={"accordion2"}
        data-plasmic-override={overrides.accordion2}
        className={classNames(projectcss.all, sty.accordion2)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"accordionButton2"}
          data-plasmic-override={overrides.accordionButton2}
          hasGap={true}
          className={classNames(projectcss.all, sty.accordionButton2, {
            [sty.accordionButton2openInteractions_open]: hasVariant(
              $state,
              "openInteractions",
              "open"
            )
          })}
          onClick={async event => {
            const $steps = {};
            $steps["updateOpenInteractions"] = true
              ? (() => {
                  const actionArgs = {
                    vgroup: "openInteractions",
                    operation: 3,
                    value: "open"
                  };
                  return (({ vgroup, value }) => {
                    if (typeof value === "string") {
                      value = [value];
                    }
                    let activeVariants = $stateGet($state, vgroup) ?? [];
                    if (typeof activeVariants === "string") {
                      activeVariants = [activeVariants];
                    }
                    for (const variant of value) {
                      if (activeVariants.includes(variant)) {
                        activeVariants.splice(
                          activeVariants.indexOf(variant),
                          1
                        );
                      } else {
                        activeVariants.push(variant);
                      }
                    }
                    $stateSet($state, vgroup, activeVariants);
                    return activeVariants;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateOpenInteractions"] != null &&
              typeof $steps["updateOpenInteractions"] === "object" &&
              typeof $steps["updateOpenInteractions"].then === "function"
            ) {
              $steps["updateOpenInteractions"] = await $steps[
                "updateOpenInteractions"
              ];
            }
          }}
        >
          <div
            data-plasmic-name={"title2"}
            data-plasmic-override={overrides.title2}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.title2,
              {
                [sty.title2openInteractions_open]: hasVariant(
                  $state,
                  "openInteractions",
                  "open"
                )
              }
            )}
          >
            {"Eligibility"}
          </div>
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox, {
              [sty.freeBoxopenInteractions_open]: hasVariant(
                $state,
                "openInteractions",
                "open"
              )
            })}
          >
            <Plus2Icon
              className={classNames(projectcss.all, sty.svg__uwOjn, {
                [sty.svgopenInteractions_open__uwOjNdxQpK]: hasVariant(
                  $state,
                  "openInteractions",
                  "open"
                )
              })}
              role={"img"}
            />

            {false ? (
              <Path64Icon
                className={classNames(projectcss.all, sty.svg__o6Etn, {
                  [sty.svgopenInteractions_open__o6EtndxQpK]: hasVariant(
                    $state,
                    "openInteractions",
                    "open"
                  )
                })}
                role={"img"}
              />
            ) : null}
            {(hasVariant($state, "openInteractions", "open") ? true : false) ? (
              <Path64Icon
                className={classNames(projectcss.all, sty.svg__gcKq5, {
                  [sty.svgopenInteractions_open__gcKq5DxQpK]: hasVariant(
                    $state,
                    "openInteractions",
                    "open"
                  )
                })}
                role={"img"}
              />
            ) : null}
          </div>
        </Stack__>
      </div>
      {(hasVariant($state, "openInteractions", "open") ? true : false) ? (
        <div
          data-plasmic-name={"accordion"}
          data-plasmic-override={overrides.accordion}
          className={classNames(projectcss.all, sty.accordion, {
            [sty.accordionopenInteractions_open]: hasVariant(
              $state,
              "openInteractions",
              "open"
            )
          })}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"accordionBody"}
            data-plasmic-override={overrides.accordionBody}
            hasGap={true}
            className={classNames(projectcss.all, sty.accordionBody)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"membershipContentGroup"}
              data-plasmic-override={overrides.membershipContentGroup}
              hasGap={true}
              className={classNames(projectcss.all, sty.membershipContentGroup)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"content"}
                data-plasmic-override={overrides.content}
                hasGap={true}
                className={classNames(projectcss.all, sty.content)}
              >
                <div
                  data-plasmic-name={"paragraph"}
                  data-plasmic-override={overrides.paragraph}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.paragraph
                  )}
                >
                  {"Insert Content Here"}
                </div>
              </Stack__>
            </Stack__>
          </Stack__>
        </div>
      ) : null}
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "accordion2",
    "accordionButton2",
    "title2",
    "freeBox",
    "accordion",
    "accordionBody",
    "membershipContentGroup",
    "content",
    "paragraph"
  ],

  accordion2: ["accordion2", "accordionButton2", "title2", "freeBox"],
  accordionButton2: ["accordionButton2", "title2", "freeBox"],
  title2: ["title2"],
  freeBox: ["freeBox"],
  accordion: [
    "accordion",
    "accordionBody",
    "membershipContentGroup",
    "content",
    "paragraph"
  ],

  accordionBody: [
    "accordionBody",
    "membershipContentGroup",
    "content",
    "paragraph"
  ],

  membershipContentGroup: ["membershipContentGroup", "content", "paragraph"],
  content: ["content", "paragraph"],
  paragraph: ["paragraph"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames:
            PlasmicComponentAccordionSectionTemplate__ArgProps,
          internalVariantPropNames:
            PlasmicComponentAccordionSectionTemplate__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicComponentAccordionSectionTemplate__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicComponentAccordionSectionTemplate";
  } else {
    func.displayName = `PlasmicComponentAccordionSectionTemplate.${nodeName}`;
  }
  return func;
}

export const PlasmicComponentAccordionSectionTemplate = Object.assign(
  // Top-level PlasmicComponentAccordionSectionTemplate renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    accordion2: makeNodeComponent("accordion2"),
    accordionButton2: makeNodeComponent("accordionButton2"),
    title2: makeNodeComponent("title2"),
    freeBox: makeNodeComponent("freeBox"),
    accordion: makeNodeComponent("accordion"),
    accordionBody: makeNodeComponent("accordionBody"),
    membershipContentGroup: makeNodeComponent("membershipContentGroup"),
    content: makeNodeComponent("content"),
    paragraph: makeNodeComponent("paragraph"),
    // Metadata about props expected for PlasmicComponentAccordionSectionTemplate
    internalVariantProps:
      PlasmicComponentAccordionSectionTemplate__VariantProps,
    internalArgProps: PlasmicComponentAccordionSectionTemplate__ArgProps
  }
);

export default PlasmicComponentAccordionSectionTemplate;
/* prettier-ignore-end */
