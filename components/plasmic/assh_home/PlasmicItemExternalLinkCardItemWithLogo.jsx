/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: rLtSCz5xy5NR
import * as React from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicItemExternalLinkCardItemWithLogo.module.css"; // plasmic-import: rLtSCz5xy5NR/css
import ContainerIcon from "./icons/PlasmicIcon__Container"; // plasmic-import: LdpaQ2yuf9hP/icon
import Container2Icon from "./icons/PlasmicIcon__Container2"; // plasmic-import: TKWn1DDMMFQp/icon
import Container5Icon from "./icons/PlasmicIcon__Container5"; // plasmic-import: GWToR6ifk0cK/icon

createPlasmicElementProxy;

export const PlasmicItemExternalLinkCardItemWithLogo__VariantProps =
  new Array();

export const PlasmicItemExternalLinkCardItemWithLogo__ArgProps = new Array(
  "articleTitle",
  "articleSubtitle",
  "linkUrl",
  "showIcon",
  "iconImageId"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicItemExternalLinkCardItemWithLogo__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          articleTitle: "Article Title",
          articleSubtitle: "Article Subtitle Text Here",
          linkUrl: "https://www.assh.org",
          showIcon: true,
          iconImageId: "5Hr1SleQScCxvVruKmX0AO"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const new$Queries = {
    getIconImage: usePlasmicDataOp(() => {
      return {
        sourceId: "n5sYZavh6xkK4D8BEueUSq",
        opId: "0c2afc0b-6aa8-47c9-b10b-6228850bafaf",
        userArgs: {
          path: [$props.iconImageId]
        },
        cacheKey: `plasmic.$.0c2afc0b-6aa8-47c9-b10b-6228850bafaf.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <PlasmicLink__
        data-plasmic-name={"interactionsHover"}
        data-plasmic-override={overrides.interactionsHover}
        className={classNames(
          projectcss.all,
          projectcss.a,
          sty.interactionsHover
        )}
        component={Link}
        href={(() => {
          try {
            return $props.linkUrl;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        platform={"nextjs"}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"frame6"}
          data-plasmic-override={overrides.frame6}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame6)}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"frame5"}
            data-plasmic-override={overrides.frame5}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame5)}
          >
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={(() => {
                try {
                  return $queries.getIconImage.data.response.fields.file.url;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />
          </Stack__>
          <div
            data-plasmic-name={"frame3"}
            data-plasmic-override={overrides.frame3}
            className={classNames(projectcss.all, sty.frame3)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"navItemMenu"}
              data-plasmic-override={overrides.navItemMenu}
              hasGap={true}
              className={classNames(projectcss.all, sty.navItemMenu)}
            >
              {false ? (
                <Stack__
                  as={"div"}
                  data-plasmic-name={"icon12X12"}
                  data-plasmic-override={overrides.icon12X12}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.icon12X12)}
                >
                  <Stack__
                    as={ContainerIcon}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.svg__pIrO4)}
                    role={"img"}
                  />
                </Stack__>
              ) : null}
              <div
                data-plasmic-name={"navigationItem"}
                data-plasmic-override={overrides.navigationItem}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.navigationItem
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.articleTitle;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Online CME Portal";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                data-plasmic-name={"navigationItem2"}
                data-plasmic-override={overrides.navigationItem2}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.navigationItem2
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.articleSubtitle;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Catalog of CME activities";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              {false ? (
                <Stack__
                  as={"div"}
                  data-plasmic-name={"icon12X124"}
                  data-plasmic-override={overrides.icon12X124}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.icon12X124)}
                >
                  <Stack__
                    as={Container2Icon}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.svg__oi7Fs)}
                    role={"img"}
                  />
                </Stack__>
              ) : null}
            </Stack__>
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"icon12X123"}
            data-plasmic-override={overrides.icon12X123}
            hasGap={true}
            className={classNames(projectcss.all, sty.icon12X123)}
          >
            {(() => {
              try {
                return $props.showIcon;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Stack__
                as={Container5Icon}
                hasGap={true}
                className={classNames(projectcss.all, sty.svg__pbbvv)}
                role={"img"}
              />
            ) : null}
          </Stack__>
        </Stack__>
      </PlasmicLink__>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "interactionsHover",
    "frame6",
    "frame5",
    "img",
    "frame3",
    "navItemMenu",
    "icon12X12",
    "navigationItem",
    "navigationItem2",
    "icon12X124",
    "icon12X123"
  ],

  interactionsHover: [
    "interactionsHover",
    "frame6",
    "frame5",
    "img",
    "frame3",
    "navItemMenu",
    "icon12X12",
    "navigationItem",
    "navigationItem2",
    "icon12X124",
    "icon12X123"
  ],

  frame6: [
    "frame6",
    "frame5",
    "img",
    "frame3",
    "navItemMenu",
    "icon12X12",
    "navigationItem",
    "navigationItem2",
    "icon12X124",
    "icon12X123"
  ],

  frame5: ["frame5", "img"],
  img: ["img"],
  frame3: [
    "frame3",
    "navItemMenu",
    "icon12X12",
    "navigationItem",
    "navigationItem2",
    "icon12X124"
  ],

  navItemMenu: [
    "navItemMenu",
    "icon12X12",
    "navigationItem",
    "navigationItem2",
    "icon12X124"
  ],

  icon12X12: ["icon12X12"],
  navigationItem: ["navigationItem"],
  navigationItem2: ["navigationItem2"],
  icon12X124: ["icon12X124"],
  icon12X123: ["icon12X123"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames:
            PlasmicItemExternalLinkCardItemWithLogo__ArgProps,
          internalVariantPropNames:
            PlasmicItemExternalLinkCardItemWithLogo__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicItemExternalLinkCardItemWithLogo__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicItemExternalLinkCardItemWithLogo";
  } else {
    func.displayName = `PlasmicItemExternalLinkCardItemWithLogo.${nodeName}`;
  }
  return func;
}

export const PlasmicItemExternalLinkCardItemWithLogo = Object.assign(
  // Top-level PlasmicItemExternalLinkCardItemWithLogo renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    interactionsHover: makeNodeComponent("interactionsHover"),
    frame6: makeNodeComponent("frame6"),
    frame5: makeNodeComponent("frame5"),
    img: makeNodeComponent("img"),
    frame3: makeNodeComponent("frame3"),
    navItemMenu: makeNodeComponent("navItemMenu"),
    icon12X12: makeNodeComponent("icon12X12"),
    navigationItem: makeNodeComponent("navigationItem"),
    navigationItem2: makeNodeComponent("navigationItem2"),
    icon12X124: makeNodeComponent("icon12X124"),
    icon12X123: makeNodeComponent("icon12X123"),
    // Metadata about props expected for PlasmicItemExternalLinkCardItemWithLogo
    internalVariantProps: PlasmicItemExternalLinkCardItemWithLogo__VariantProps,
    internalArgProps: PlasmicItemExternalLinkCardItemWithLogo__ArgProps
  }
);

export default PlasmicItemExternalLinkCardItemWithLogo;
/* prettier-ignore-end */
