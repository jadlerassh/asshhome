/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: wjlKLjNIUKuz
import * as React from "react";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateStateOnChangeProp,
  hasVariant,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import Select from "../../Select"; // plasmic-import: zB29lZra8Oul/component
import ItemMenuItem from "../../ItemMenuItem"; // plasmic-import: r-76N4JTe5lX/component
import SectionMenuSection from "../../SectionMenuSection"; // plasmic-import: CdLvQ31o-kaa/component
import { useScreenVariants as useScreenVariantsdjBtUr72ZExV } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: DJBtUr72ZExV/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicHeroIWantTo.module.css"; // plasmic-import: wjlKLjNIUKuz/css

createPlasmicElementProxy;

export const PlasmicHeroIWantTo__VariantProps = new Array();

export const PlasmicHeroIWantTo__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHeroIWantTo__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "select.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    dropdownOptions: usePlasmicDataOp(() => {
      return {
        sourceId: "tbVV8SR67UpQ6Z9zuPcDPB",
        opId: "62256d4b-3261-46f6-97c7-2e9a2058b473",
        userArgs: {},
        cacheKey: `plasmic.$.62256d4b-3261-46f6-97c7-2e9a2058b473.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    heroData: usePlasmicDataOp(() => {
      return {
        sourceId: "tbVV8SR67UpQ6Z9zuPcDPB",
        opId: "3460027c-f9b6-4b3b-94f6-adf1d7f45d6f",
        userArgs: {},
        cacheKey: `plasmic.$.3460027c-f9b6-4b3b-94f6-adf1d7f45d6f.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getImage: usePlasmicDataOp(() => {
      return {
        sourceId: "n5sYZavh6xkK4D8BEueUSq",
        opId: "0c2afc0b-6aa8-47c9-b10b-6228850bafaf",
        userArgs: {
          path: [
            $queries.heroData.data.response.items[0].fields.backgroundImage.sys
              .id
          ]
        },
        cacheKey: `plasmic.$.0c2afc0b-6aa8-47c9-b10b-6228850bafaf.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsdjBtUr72ZExV()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <section
        data-plasmic-name={"hero"}
        data-plasmic-override={overrides.hero}
        className={classNames(projectcss.all, sty.hero)}
        overflow={"hidden"}
      >
        <section
          data-plasmic-name={"section"}
          data-plasmic-override={overrides.section}
          className={classNames(projectcss.all, sty.section)}
        />

        <Stack__
          as={"div"}
          data-plasmic-name={"columns"}
          data-plasmic-override={overrides.columns}
          hasGap={true}
          className={classNames(projectcss.all, sty.columns)}
        >
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.column__fMj1H)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__wZtBe)}>
              <div className={classNames(projectcss.all, sty.freeBox__m8M41)}>
                <div
                  data-plasmic-name={"tagline"}
                  data-plasmic-override={overrides.tagline}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.tagline
                  )}
                >
                  {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                    <React.Fragment>
                      {(() => {
                        try {
                          return $queries.heroData.data.response.items[0].fields
                            .subheader;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Advancing the science and practice of hand and upper extremity surgery through ";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  ) : (
                    <React.Fragment>
                      {(() => {
                        try {
                          return $queries.heroData.data.response.items[0].fields
                            .subheader;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Advancing the science and practice of hand and upper extremity surgery through";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  )}
                </div>
                <div
                  data-plasmic-name={"tagline2"}
                  data-plasmic-override={overrides.tagline2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.tagline2
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $queries.heroData.data.response.items[0].fields
                          .header;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Education, Research & Advocacy";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                {(
                  hasVariant(globalVariants, "screen", "mobileOnly")
                    ? true
                    : false
                ) ? (
                  <div
                    data-plasmic-name={"tagline4"}
                    data-plasmic-override={overrides.tagline4}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.tagline4
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                      <React.Fragment>
                        {(() => {
                          try {
                            return $queries.heroData.data.response.items[0]
                              .fields.cta1Text;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Advancing the science and practice of hand and upper extremity surgery through ";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    ) : (
                      <React.Fragment>
                        {(() => {
                          try {
                            return $queries.heroData.data.response.items[0]
                              .fields.subheader;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Advancing the science and practice of hand and upper extremity surgery through";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    )}
                  </div>
                ) : null}
                <div className={classNames(projectcss.all, sty.freeBox__b6Amu)}>
                  <div
                    data-plasmic-name={"tagline3"}
                    data-plasmic-override={overrides.tagline3}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.tagline3
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobileOnly") ? (
                      <React.Fragment>
                        {(() => {
                          try {
                            return $queries.heroData.data.response.items[0]
                              .fields.cta1Text;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "Advancing the science and practice of hand and upper extremity surgery through ";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    ) : (
                      <React.Fragment>
                        {(() => {
                          try {
                            return $queries.heroData.data.response.items[0]
                              .fields.cta1Text;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "I want to";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    )}
                  </div>
                  <Select
                    data-plasmic-name={"select"}
                    data-plasmic-override={overrides.select}
                    className={classNames("__wab_instance", sty.select)}
                    items={
                      <React.Fragment>
                        {(_par =>
                          !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                          (() => {
                            try {
                              return $queries.dropdownOptions.data.response
                                .items;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return [];
                              }
                              throw e;
                            }
                          })()
                        ).map((__plasmic_item_0, __plasmic_idx_0) => {
                          const currentItem = __plasmic_item_0;
                          const currentIndex = __plasmic_idx_0;
                          return (
                            <ItemMenuItem
                              data-plasmic-name={"itemMenuItem"}
                              data-plasmic-override={overrides.itemMenuItem}
                              description={``}
                              key={currentIndex}
                              label={(() => {
                                try {
                                  return currentItem.fields.label;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              value={(() => {
                                try {
                                  return currentItem.fields.url;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                            />
                          );
                        })}
                        <SectionMenuSection
                          data-plasmic-name={"sectionMenuSection"}
                          data-plasmic-override={overrides.sectionMenuSection}
                          className={classNames(
                            "__wab_instance",
                            sty.sectionMenuSection
                          )}
                          header={null}
                          items={null}
                        />
                      </React.Fragment>
                    }
                    label={
                      <React.Fragment>
                        {(() => {
                          try {
                            return "";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return '""';
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    }
                    onChange={async (...eventArgs) => {
                      generateStateOnChangeProp($state, [
                        "select",
                        "value"
                      ]).apply(null, eventArgs);
                      if (
                        eventArgs.length > 1 &&
                        eventArgs[1] &&
                        eventArgs[1]._plasmic_state_init_
                      ) {
                        return;
                      }
                      (async val => {
                        const $steps = {};
                        $steps["goToPage"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: (() => {
                                  try {
                                    return val;
                                  } catch (e) {
                                    if (
                                      e instanceof TypeError ||
                                      e?.plasmicType ===
                                        "PlasmicUndefinedDataError"
                                    ) {
                                      return undefined;
                                    }
                                    throw e;
                                  }
                                })()
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToPage"] != null &&
                          typeof $steps["goToPage"] === "object" &&
                          typeof $steps["goToPage"].then === "function"
                        ) {
                          $steps["goToPage"] = await $steps["goToPage"];
                        }
                      }).apply(null, eventArgs);
                    }}
                    placeholder={(() => {
                      try {
                        return $queries.heroData.data.response.items[0].fields
                          .cta2Text;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                </div>
              </div>
            </div>
          </Stack__>
          <div className={classNames(projectcss.all, sty.column__iHa6R)} />
        </Stack__>
        <PlasmicImg__
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"100%"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"100%"}
          loading={"lazy"}
          src={(() => {
            try {
              return $queries.getImage.data.response.fields.file.url;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        />
      </section>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "hero",
    "section",
    "columns",
    "tagline",
    "tagline2",
    "tagline4",
    "tagline3",
    "select",
    "itemMenuItem",
    "sectionMenuSection",
    "img"
  ],

  hero: [
    "hero",
    "section",
    "columns",
    "tagline",
    "tagline2",
    "tagline4",
    "tagline3",
    "select",
    "itemMenuItem",
    "sectionMenuSection",
    "img"
  ],

  section: ["section"],
  columns: [
    "columns",
    "tagline",
    "tagline2",
    "tagline4",
    "tagline3",
    "select",
    "itemMenuItem",
    "sectionMenuSection"
  ],

  tagline: ["tagline"],
  tagline2: ["tagline2"],
  tagline4: ["tagline4"],
  tagline3: ["tagline3"],
  select: ["select", "itemMenuItem", "sectionMenuSection"],
  itemMenuItem: ["itemMenuItem"],
  sectionMenuSection: ["sectionMenuSection"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHeroIWantTo__ArgProps,
          internalVariantPropNames: PlasmicHeroIWantTo__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHeroIWantTo__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeroIWantTo";
  } else {
    func.displayName = `PlasmicHeroIWantTo.${nodeName}`;
  }
  return func;
}

export const PlasmicHeroIWantTo = Object.assign(
  // Top-level PlasmicHeroIWantTo renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    hero: makeNodeComponent("hero"),
    section: makeNodeComponent("section"),
    columns: makeNodeComponent("columns"),
    tagline: makeNodeComponent("tagline"),
    tagline2: makeNodeComponent("tagline2"),
    tagline4: makeNodeComponent("tagline4"),
    tagline3: makeNodeComponent("tagline3"),
    select: makeNodeComponent("select"),
    itemMenuItem: makeNodeComponent("itemMenuItem"),
    sectionMenuSection: makeNodeComponent("sectionMenuSection"),
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicHeroIWantTo
    internalVariantProps: PlasmicHeroIWantTo__VariantProps,
    internalArgProps: PlasmicHeroIWantTo__ArgProps
  }
);

export default PlasmicHeroIWantTo;
/* prettier-ignore-end */
