/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: ie8FiHmZHhtB
import * as React from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicItemExternalLinkCardItem.module.css"; // plasmic-import: ie8FiHmZHhtB/css
import PresentationIcon from "./icons/PlasmicIcon__Presentation"; // plasmic-import: bu8sIOEFPzRd/icon
import Container5Icon from "./icons/PlasmicIcon__Container5"; // plasmic-import: GWToR6ifk0cK/icon

createPlasmicElementProxy;

export const PlasmicItemExternalLinkCardItem__VariantProps = new Array();

export const PlasmicItemExternalLinkCardItem__ArgProps = new Array(
  "articleTitle",
  "linkUrl",
  "showIcon",
  "iconImageId"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicItemExternalLinkCardItem__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          articleTitle: "Article Title",
          linkUrl: "https://www.assh.org",
          showIcon: true,
          iconImageId: "5Hr1SleQScCxvVruKmX0AO"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const new$Queries = {
    getIconImage: usePlasmicDataOp(() => {
      return {
        sourceId: "n5sYZavh6xkK4D8BEueUSq",
        opId: "0c2afc0b-6aa8-47c9-b10b-6228850bafaf",
        userArgs: {
          path: [$props.iconImageId]
        },
        cacheKey: `plasmic.$.0c2afc0b-6aa8-47c9-b10b-6228850bafaf.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <PlasmicLink__
        data-plasmic-name={"interactionsHover"}
        data-plasmic-override={overrides.interactionsHover}
        className={classNames(
          projectcss.all,
          projectcss.a,
          sty.interactionsHover
        )}
        component={Link}
        href={(() => {
          try {
            return $props.linkUrl;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        platform={"nextjs"}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"content"}
          data-plasmic-override={overrides.content}
          hasGap={true}
          className={classNames(projectcss.all, sty.content)}
        >
          {(() => {
            try {
              return $props.iconImageId !== undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              data-plasmic-name={"frame4"}
              data-plasmic-override={overrides.frame4}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame4)}
            >
              <PresentationIcon
                className={classNames(projectcss.all, sty.svg___8NcnZ)}
                role={"img"}
              />
            </Stack__>
          ) : null}
          <Stack__
            as={"div"}
            data-plasmic-name={"content2"}
            data-plasmic-override={overrides.content2}
            hasGap={true}
            className={classNames(projectcss.all, sty.content2)}
          >
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.articleTitle;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Article Title";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            {(() => {
              try {
                return $props.showIcon;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Stack__
                as={"div"}
                data-plasmic-name={"icon12X122"}
                data-plasmic-override={overrides.icon12X122}
                hasGap={true}
                className={classNames(projectcss.all, sty.icon12X122)}
              >
                <Stack__
                  as={Container5Icon}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.svg__uDkeW)}
                  role={"img"}
                />
              </Stack__>
            ) : null}
          </Stack__>
        </Stack__>
      </PlasmicLink__>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "interactionsHover",
    "content",
    "frame4",
    "content2",
    "text",
    "icon12X122"
  ],

  interactionsHover: [
    "interactionsHover",
    "content",
    "frame4",
    "content2",
    "text",
    "icon12X122"
  ],

  content: ["content", "frame4", "content2", "text", "icon12X122"],
  frame4: ["frame4"],
  content2: ["content2", "text", "icon12X122"],
  text: ["text"],
  icon12X122: ["icon12X122"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicItemExternalLinkCardItem__ArgProps,
          internalVariantPropNames:
            PlasmicItemExternalLinkCardItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicItemExternalLinkCardItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicItemExternalLinkCardItem";
  } else {
    func.displayName = `PlasmicItemExternalLinkCardItem.${nodeName}`;
  }
  return func;
}

export const PlasmicItemExternalLinkCardItem = Object.assign(
  // Top-level PlasmicItemExternalLinkCardItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    interactionsHover: makeNodeComponent("interactionsHover"),
    content: makeNodeComponent("content"),
    frame4: makeNodeComponent("frame4"),
    content2: makeNodeComponent("content2"),
    text: makeNodeComponent("text"),
    icon12X122: makeNodeComponent("icon12X122"),
    // Metadata about props expected for PlasmicItemExternalLinkCardItem
    internalVariantProps: PlasmicItemExternalLinkCardItem__VariantProps,
    internalArgProps: PlasmicItemExternalLinkCardItem__ArgProps
  }
);

export default PlasmicItemExternalLinkCardItem;
/* prettier-ignore-end */
