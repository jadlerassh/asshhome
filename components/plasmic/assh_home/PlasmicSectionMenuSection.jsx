/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: CdLvQ31o-kaa
import * as React from "react";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  renderPlasmicSlot
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { BaseSection } from "@plasmicpkgs/react-aria/skinny/registerSection";
import ItemMenuItem from "../../ItemMenuItem"; // plasmic-import: r-76N4JTe5lX/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicSectionMenuSection.module.css"; // plasmic-import: CdLvQ31o-kaa/css

createPlasmicElementProxy;

export const PlasmicSectionMenuSection__VariantProps = new Array();

export const PlasmicSectionMenuSection__ArgProps = new Array("header", "items");

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSectionMenuSection__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <BaseSection
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        "__wab_instance",
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
      header={
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          {renderPlasmicSlot({
            defaultContents: "Section Header",
            value: args.header,
            className: classNames(sty.slotTargetHeader)
          })}
        </div>
      }
      items={renderPlasmicSlot({
        defaultContents: (
          <React.Fragment>
            <ItemMenuItem label={"Section Item 1"} value={"section-item-1"} />
            <ItemMenuItem label={"Section Item 2"} value={"section-item-2"} />
            <ItemMenuItem label={"Section Item 3"} value={"section-item-3"} />
          </React.Fragment>
        ),

        value: args.items
      })}
    />
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox"],
  freeBox: ["freeBox"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSectionMenuSection__ArgProps,
          internalVariantPropNames: PlasmicSectionMenuSection__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSectionMenuSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSectionMenuSection";
  } else {
    func.displayName = `PlasmicSectionMenuSection.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionMenuSection = Object.assign(
  // Top-level PlasmicSectionMenuSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    // Metadata about props expected for PlasmicSectionMenuSection
    internalVariantProps: PlasmicSectionMenuSection__VariantProps,
    internalArgProps: PlasmicSectionMenuSection__ArgProps
  }
);

export default PlasmicSectionMenuSection;
/* prettier-ignore-end */
