/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: z02B7qTMdRRy
import * as React from "react";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicSectionHeroBannerWithImageAndButtons.module.css"; // plasmic-import: z02B7qTMdRRy/css

createPlasmicElementProxy;

export const PlasmicSectionHeroBannerWithImageAndButtons__VariantProps =
  new Array();

export const PlasmicSectionHeroBannerWithImageAndButtons__ArgProps = new Array(
  "title"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSectionHeroBannerWithImageAndButtons__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          title: "Title Card"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const new$Queries = {
    getHeroContent: usePlasmicDataOp(() => {
      return {
        sourceId: "tbVV8SR67UpQ6Z9zuPcDPB",
        opId: "5304698c-f220-49f7-ad25-1011b675379d",
        userArgs: {
          params: [$props.title]
        },
        cacheKey: `plasmic.$.5304698c-f220-49f7-ad25-1011b675379d.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getImage: usePlasmicDataOp(() => {
      return {
        sourceId: "n5sYZavh6xkK4D8BEueUSq",
        opId: "95899acc-470a-4259-8b31-bb74ad20b09c",
        userArgs: {
          path: [$queries.getHeroContent.data.response.items]
        },
        cacheKey: `plasmic.$.95899acc-470a-4259-8b31-bb74ad20b09c.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        className={classNames(projectcss.all, sty.columns)}
      >
        <div className={classNames(projectcss.all, sty.column__p1Xp2)}>
          <div className={classNames(projectcss.all, sty.freeBox__shxZd)}>
            <div className={classNames(projectcss.all, sty.freeBox__tahKq)}>
              <div className={classNames(projectcss.all, sty.freeBox___5DlBm)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__dZWsy
                  )}
                >
                  {"Enter some text"}
                </div>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__uIq5H
                  )}
                >
                  {"Enter some text"}
                </div>
              </div>
            </div>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__lR1S
            )}
          >
            {"Enter some text"}
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.column__tc3Ly)} />
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "columns"],
  columns: ["columns"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames:
            PlasmicSectionHeroBannerWithImageAndButtons__ArgProps,
          internalVariantPropNames:
            PlasmicSectionHeroBannerWithImageAndButtons__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSectionHeroBannerWithImageAndButtons__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSectionHeroBannerWithImageAndButtons";
  } else {
    func.displayName = `PlasmicSectionHeroBannerWithImageAndButtons.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionHeroBannerWithImageAndButtons = Object.assign(
  // Top-level PlasmicSectionHeroBannerWithImageAndButtons renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    // Metadata about props expected for PlasmicSectionHeroBannerWithImageAndButtons
    internalVariantProps:
      PlasmicSectionHeroBannerWithImageAndButtons__VariantProps,
    internalArgProps: PlasmicSectionHeroBannerWithImageAndButtons__ArgProps
  }
);

export default PlasmicSectionHeroBannerWithImageAndButtons;
/* prettier-ignore-end */
