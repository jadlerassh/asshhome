/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: vxgZAhiQ4GBx
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  useTrigger
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicBlockCalloutBoxItem.module.css"; // plasmic-import: vxgZAhiQ4GBx/css
import Container2Icon from "./icons/PlasmicIcon__Container2"; // plasmic-import: TKWn1DDMMFQp/icon

createPlasmicElementProxy;

export const PlasmicBlockCalloutBoxItem__VariantProps = new Array();

export const PlasmicBlockCalloutBoxItem__ArgProps = new Array(
  "heading",
  "description3",
  "action",
  "actionUrl"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBlockCalloutBoxItem__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          heading: "Heading",
          description3:
            "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed eget scelerisque urna.",
          action: "Action",
          actionUrl: "https://www.assh.org"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"interactionsDefault"}
        data-plasmic-override={overrides.interactionsDefault}
        hasGap={true}
        className={classNames(projectcss.all, sty.interactionsDefault)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"container"}
          data-plasmic-override={overrides.container}
          hasGap={true}
          className={classNames(projectcss.all, sty.container)}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"inner"}
            data-plasmic-override={overrides.inner}
            hasGap={true}
            className={classNames(projectcss.all, sty.inner)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"content"}
              data-plasmic-override={overrides.content}
              hasGap={true}
              className={classNames(projectcss.all, sty.content)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__eiTrV
                )}
              >
                {"Heading"}
              </div>
              <div
                data-plasmic-name={"description"}
                data-plasmic-override={overrides.description}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.description
                )}
              >
                {
                  "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed eget scelerisque urna."
                }
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"navItemSimple"}
              data-plasmic-override={overrides.navItemSimple}
              hasGap={true}
              className={classNames(projectcss.all, sty.navItemSimple)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vZoyQ
                )}
              >
                {"Action"}
              </div>
              <Stack__
                as={"div"}
                data-plasmic-name={"icon12X12"}
                data-plasmic-override={overrides.icon12X12}
                hasGap={true}
                className={classNames(projectcss.all, sty.icon12X12)}
              >
                <Stack__
                  as={Container2Icon}
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />
              </Stack__>
            </Stack__>
          </Stack__>
        </Stack__>
      </Stack__>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "interactionsDefault",
    "container",
    "inner",
    "content",
    "description",
    "navItemSimple",
    "icon12X12",
    "svg"
  ],

  interactionsDefault: [
    "interactionsDefault",
    "container",
    "inner",
    "content",
    "description",
    "navItemSimple",
    "icon12X12",
    "svg"
  ],

  container: [
    "container",
    "inner",
    "content",
    "description",
    "navItemSimple",
    "icon12X12",
    "svg"
  ],

  inner: [
    "inner",
    "content",
    "description",
    "navItemSimple",
    "icon12X12",
    "svg"
  ],

  content: ["content", "description"],
  description: ["description"],
  navItemSimple: ["navItemSimple", "icon12X12", "svg"],
  icon12X12: ["icon12X12", "svg"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBlockCalloutBoxItem__ArgProps,
          internalVariantPropNames: PlasmicBlockCalloutBoxItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBlockCalloutBoxItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBlockCalloutBoxItem";
  } else {
    func.displayName = `PlasmicBlockCalloutBoxItem.${nodeName}`;
  }
  return func;
}

export const PlasmicBlockCalloutBoxItem = Object.assign(
  // Top-level PlasmicBlockCalloutBoxItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    interactionsDefault: makeNodeComponent("interactionsDefault"),
    container: makeNodeComponent("container"),
    inner: makeNodeComponent("inner"),
    content: makeNodeComponent("content"),
    description: makeNodeComponent("description"),
    navItemSimple: makeNodeComponent("navItemSimple"),
    icon12X12: makeNodeComponent("icon12X12"),
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicBlockCalloutBoxItem
    internalVariantProps: PlasmicBlockCalloutBoxItem__VariantProps,
    internalArgProps: PlasmicBlockCalloutBoxItem__ArgProps
  }
);

export default PlasmicBlockCalloutBoxItem;
/* prettier-ignore-end */
