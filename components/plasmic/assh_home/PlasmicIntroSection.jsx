/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: NIscwYrOYRIH
import * as React from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicIntroSection.module.css"; // plasmic-import: NIscwYrOYRIH/css
import RightArrowSvgrepoComSvg2Icon from "./icons/PlasmicIcon__RightArrowSvgrepoComSvg2"; // plasmic-import: PhhglPTaZq0t/icon
import Hands2Svg2Icon from "./icons/PlasmicIcon__Hands2Svg2"; // plasmic-import: Gte63iJWIfF8/icon

createPlasmicElementProxy;

export const PlasmicIntroSection__VariantProps = new Array();

export const PlasmicIntroSection__ArgProps = new Array(
  "title",
  "desc",
  "linkText",
  "linkUrl",
  "bgColor",
  "showLogoBg"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicIntroSection__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          title: "Title Here",
          desc: "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.",
          linkText: "View Things",
          linkUrl: "https://www.assh.org",
          bgColor: "var(--token-TYi5l69jClib)",
          showLogoBg: true
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
      style={(() => {
        try {
          return {
            backgroundColor: $props.bgColor
          };
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          }
          throw e;
        }
      })()}
    >
      <div
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        className={classNames(projectcss.all, sty.columns)}
      >
        <div className={classNames(projectcss.all, sty.column__iK3Vc)}>
          <h2
            data-plasmic-name={"h2"}
            data-plasmic-override={overrides.h2}
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.h2
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.title;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Newest Educational Content";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </h2>
        </div>
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.column__nZ2Kf)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__qa0R0
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.desc;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "ASSH offers educational information, practice resources, and patient materials curated by expert upper extremity surgeons. Check out the newest content for your practice and surgical knowledge.";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <PlasmicLink__
            data-plasmic-name={"link"}
            data-plasmic-override={overrides.link}
            className={classNames(projectcss.all, projectcss.a, sty.link)}
            component={Link}
            href={(() => {
              try {
                return $props.linkUrl;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            platform={"nextjs"}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__s7Zsj
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.linkText;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "View Resources";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <RightArrowSvgrepoComSvg2Icon
              className={classNames(projectcss.all, sty.svg__rI0Qa)}
              role={"img"}
            />
          </PlasmicLink__>
        </Stack__>
      </div>
      {(() => {
        try {
          return $props.showLogoBg;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <Hands2Svg2Icon
          className={classNames(projectcss.all, sty.svg___7Kin8)}
          role={"img"}
        />
      ) : null}
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "columns", "h2", "link"],
  columns: ["columns", "h2", "link"],
  h2: ["h2"],
  link: ["link"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicIntroSection__ArgProps,
          internalVariantPropNames: PlasmicIntroSection__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicIntroSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicIntroSection";
  } else {
    func.displayName = `PlasmicIntroSection.${nodeName}`;
  }
  return func;
}

export const PlasmicIntroSection = Object.assign(
  // Top-level PlasmicIntroSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    h2: makeNodeComponent("h2"),
    link: makeNodeComponent("link"),
    // Metadata about props expected for PlasmicIntroSection
    internalVariantProps: PlasmicIntroSection__VariantProps,
    internalArgProps: PlasmicIntroSection__ArgProps
  }
);

export default PlasmicIntroSection;
/* prettier-ignore-end */
