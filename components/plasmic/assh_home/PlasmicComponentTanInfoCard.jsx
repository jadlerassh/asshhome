/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: KjbcRISpC18Z
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicComponentTanInfoCard.module.css"; // plasmic-import: KjbcRISpC18Z/css
import Group19Icon from "./icons/PlasmicIcon__Group19"; // plasmic-import: hHHc--kCOAOg/icon
import Group20Icon from "./icons/PlasmicIcon__Group20"; // plasmic-import: nbXXXr8syinB/icon
import Group21Icon from "./icons/PlasmicIcon__Group21"; // plasmic-import: JfLYcEFC_nqk/icon

createPlasmicElementProxy;

export const PlasmicComponentTanInfoCard__VariantProps = new Array();

export const PlasmicComponentTanInfoCard__ArgProps = new Array("title", "desc");

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicComponentTanInfoCard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          title: "Section Title Here",
          desc: "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"frame3"}
          data-plasmic-override={overrides.frame3}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame3)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__oknoo
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.title;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Why ASSH Education?";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__uyPVi
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.desc;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "At ASSH, education isn\u2019t an add-on \u2014 it\u2019s a core commitment to advancing the specialty of hand and upper extremity surgery. Our learning experiences are built by the most respected experts in the field and continuously updated to reflect the latest techniques, research, and standards of care.";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <div
            data-plasmic-name={"group5"}
            data-plasmic-override={overrides.group5}
            className={classNames(projectcss.all, sty.group5)}
          >
            <Group19Icon
              className={classNames(projectcss.all, sty.svg__nwZp9)}
              role={"img"}
            />

            <Group20Icon
              className={classNames(projectcss.all, sty.svg___26X7)}
              role={"img"}
            />

            <Group21Icon
              className={classNames(projectcss.all, sty.svg__ltcno)}
              role={"img"}
            />
          </div>
        </Stack__>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "frame3", "group5"],
  freeBox: ["freeBox", "frame3", "group5"],
  frame3: ["frame3", "group5"],
  group5: ["group5"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicComponentTanInfoCard__ArgProps,
          internalVariantPropNames: PlasmicComponentTanInfoCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicComponentTanInfoCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicComponentTanInfoCard";
  } else {
    func.displayName = `PlasmicComponentTanInfoCard.${nodeName}`;
  }
  return func;
}

export const PlasmicComponentTanInfoCard = Object.assign(
  // Top-level PlasmicComponentTanInfoCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    frame3: makeNodeComponent("frame3"),
    group5: makeNodeComponent("group5"),
    // Metadata about props expected for PlasmicComponentTanInfoCard
    internalVariantProps: PlasmicComponentTanInfoCard__VariantProps,
    internalArgProps: PlasmicComponentTanInfoCard__ArgProps
  }
);

export default PlasmicComponentTanInfoCard;
/* prettier-ignore-end */
