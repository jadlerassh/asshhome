/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: aDAIm3T_wfOv
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import ItemEventCardItemFullCard from "../../ItemEventCardItemFullCard"; // plasmic-import: jiQVfwnxU6BH/component
import ItemEventCardItemInfoOnly from "../../ItemEventCardItemInfoOnly"; // plasmic-import: UPjziaoo_XKO/component
import { useScreenVariants as useScreenVariantsdjBtUr72ZExV } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: DJBtUr72ZExV/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicSectionUpcomingCouresEventsSection.module.css"; // plasmic-import: aDAIm3T_wfOv/css

createPlasmicElementProxy;

export const PlasmicSectionUpcomingCouresEventsSection__VariantProps =
  new Array();

export const PlasmicSectionUpcomingCouresEventsSection__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSectionUpcomingCouresEventsSection__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "amImage",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.latestAnnualMeeting.data.response.items[0].fields
                .thumb.sys.id ===
                $queries.latestAnnualMeeting.data.response.includes.Asset[0].sys
                  .id
                ? $queries.latestAnnualMeeting.data.response.includes.Asset[0]
                    .fields.file.url
                : null;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    latestAnnualMeeting: usePlasmicDataOp(() => {
      return {
        sourceId: "tbVV8SR67UpQ6Z9zuPcDPB",
        opId: "cf8d13e5-e5c9-486d-9144-aff30a7a55d8",
        userArgs: {},
        cacheKey: `plasmic.$.cf8d13e5-e5c9-486d-9144-aff30a7a55d8.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    latestOtherEvents: usePlasmicDataOp(() => {
      return {
        sourceId: "tbVV8SR67UpQ6Z9zuPcDPB",
        opId: "7d746abe-d89a-483f-83cb-249384067b66",
        userArgs: {},
        cacheKey: `plasmic.$.7d746abe-d89a-483f-83cb-249384067b66.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsdjBtUr72ZExV()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"section7"}
        data-plasmic-override={overrides.section7}
        hasGap={true}
        className={classNames(projectcss.all, sty.section7)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"frame2"}
          data-plasmic-override={overrides.frame2}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame2)}
        >
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            {"Upcoming Courses & Events"}
          </div>
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"row"}
          data-plasmic-override={overrides.row}
          hasGap={true}
          className={classNames(projectcss.all, sty.row)}
        >
          <div className={classNames(projectcss.all, sty.column__pgAlg)}>
            <ItemEventCardItemFullCard
              data-plasmic-name={"itemEventCardItemFullCard"}
              data-plasmic-override={overrides.itemEventCardItemFullCard}
              dates={(() => {
                try {
                  return $queries.latestAnnualMeeting.data.response.items[0]
                    .fields.dates;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              imageUrl={(() => {
                try {
                  return $state.amImage;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
              infoUrl={(() => {
                try {
                  return $queries.latestAnnualMeeting.data.response.items[0]
                    .fields.infoLink;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              location={(() => {
                try {
                  return $queries.latestAnnualMeeting.data.response.items[0]
                    .fields.locationName;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              regUrl={` ${$queries.latestAnnualMeeting.data.response.items[0].fields.registrationLink}`}
              title={(() => {
                try {
                  return $queries.latestAnnualMeeting.data.response.items[0]
                    .fields.title;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />
          </div>
          <div className={classNames(projectcss.all, sty.column__i6Z77)}>
            <div
              data-plasmic-name={"frame5"}
              data-plasmic-override={overrides.frame5}
              className={classNames(projectcss.all, sty.frame5)}
            >
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $queries.latestOtherEvents.data.response.items[0];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    data-plasmic-name={"articleCard"}
                    data-plasmic-override={overrides.articleCard}
                    className={classNames(projectcss.all, sty.articleCard)}
                    key={currentIndex}
                  >
                    <ItemEventCardItemInfoOnly
                      className={classNames(
                        "__wab_instance",
                        sty.itemEventCardItemInfoOnly__eoQKy
                      )}
                      dates={(() => {
                        try {
                          return currentItem.fields.dates;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      location={(() => {
                        try {
                          return currentItem.fields.locationName;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      registerUrl={(() => {
                        try {
                          return currentItem.fields.registrationLink;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      title={(() => {
                        try {
                          return currentItem.fields.title;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  </div>
                );
              })}
              <section
                className={classNames(projectcss.all, sty.section__m3UMs)}
              />

              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $queries.latestOtherEvents.data.response.items[1];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"articleCard2"}
                    data-plasmic-override={overrides.articleCard2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.articleCard2)}
                    key={currentIndex}
                  >
                    <ItemEventCardItemInfoOnly
                      className={classNames(
                        "__wab_instance",
                        sty.itemEventCardItemInfoOnly__oPhZ1
                      )}
                      dates={(() => {
                        try {
                          return currentItem.fields.dates;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      location={(() => {
                        try {
                          return currentItem.fields.locationName;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      registerUrl={(() => {
                        try {
                          return currentItem.fields.registrationLink;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      title={(() => {
                        try {
                          return currentItem.fields.title;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  </Stack__>
                );
              })}
              <section
                className={classNames(projectcss.all, sty.section__maiK3)}
              />

              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $queries.latestOtherEvents.data.response.items[2];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"articleCard3"}
                    data-plasmic-override={overrides.articleCard3}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.articleCard3)}
                    key={currentIndex}
                  >
                    <ItemEventCardItemInfoOnly
                      className={classNames(
                        "__wab_instance",
                        sty.itemEventCardItemInfoOnly__tsdp5
                      )}
                      dates={(() => {
                        try {
                          return currentItem.fields.dates;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      location={(() => {
                        try {
                          return currentItem.fields.locationName;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      registerUrl={(() => {
                        try {
                          return currentItem.fields.registrationLink;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      title={(() => {
                        try {
                          return currentItem.fields.title;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  </Stack__>
                );
              })}
            </div>
          </div>
        </Stack__>
      </Stack__>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "section7",
    "frame2",
    "text",
    "row",
    "itemEventCardItemFullCard",
    "frame5",
    "articleCard",
    "articleCard2",
    "articleCard3"
  ],

  section7: [
    "section7",
    "frame2",
    "text",
    "row",
    "itemEventCardItemFullCard",
    "frame5",
    "articleCard",
    "articleCard2",
    "articleCard3"
  ],

  frame2: ["frame2", "text"],
  text: ["text"],
  row: [
    "row",
    "itemEventCardItemFullCard",
    "frame5",
    "articleCard",
    "articleCard2",
    "articleCard3"
  ],

  itemEventCardItemFullCard: ["itemEventCardItemFullCard"],
  frame5: ["frame5", "articleCard", "articleCard2", "articleCard3"],
  articleCard: ["articleCard"],
  articleCard2: ["articleCard2"],
  articleCard3: ["articleCard3"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames:
            PlasmicSectionUpcomingCouresEventsSection__ArgProps,
          internalVariantPropNames:
            PlasmicSectionUpcomingCouresEventsSection__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSectionUpcomingCouresEventsSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSectionUpcomingCouresEventsSection";
  } else {
    func.displayName = `PlasmicSectionUpcomingCouresEventsSection.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionUpcomingCouresEventsSection = Object.assign(
  // Top-level PlasmicSectionUpcomingCouresEventsSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section7: makeNodeComponent("section7"),
    frame2: makeNodeComponent("frame2"),
    text: makeNodeComponent("text"),
    row: makeNodeComponent("row"),
    itemEventCardItemFullCard: makeNodeComponent("itemEventCardItemFullCard"),
    frame5: makeNodeComponent("frame5"),
    articleCard: makeNodeComponent("articleCard"),
    articleCard2: makeNodeComponent("articleCard2"),
    articleCard3: makeNodeComponent("articleCard3"),
    // Metadata about props expected for PlasmicSectionUpcomingCouresEventsSection
    internalVariantProps:
      PlasmicSectionUpcomingCouresEventsSection__VariantProps,
    internalArgProps: PlasmicSectionUpcomingCouresEventsSection__ArgProps
  }
);

export default PlasmicSectionUpcomingCouresEventsSection;
/* prettier-ignore-end */
