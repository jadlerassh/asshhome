/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: JNcUMWnpd-Gl
import * as React from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicLink as PlasmicLink__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicItemMegaMenuSubitem.module.css"; // plasmic-import: JNcUMWnpd-Gl/css

createPlasmicElementProxy;

export const PlasmicItemMegaMenuSubitem__VariantProps = new Array();

export const PlasmicItemMegaMenuSubitem__ArgProps = new Array("label", "url");

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicItemMegaMenuSubitem__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          label: "Label Text",
          url: "https://www.assh.org"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "unnamedGroupOfVariants",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.unnamedGroupOfVariants
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <PlasmicLink__
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.a,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
      component={Link}
      href={(() => {
        try {
          return $props.url;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return undefined;
          }
          throw e;
        }
      })()}
      platform={"nextjs"}
    >
      <div
        data-plasmic-name={"navigationItem2"}
        data-plasmic-override={overrides.navigationItem2}
        className={classNames(
          projectcss.all,
          projectcss.__wab_text,
          sty.navigationItem2
        )}
      >
        <React.Fragment>
          {(() => {
            try {
              return $props.label;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return "Education Overview";
              }
              throw e;
            }
          })()}
        </React.Fragment>
      </div>
    </PlasmicLink__>
  );
}

const PlasmicDescendants = {
  root: ["root", "navigationItem2"],
  navigationItem2: ["navigationItem2"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicItemMegaMenuSubitem__ArgProps,
          internalVariantPropNames: PlasmicItemMegaMenuSubitem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicItemMegaMenuSubitem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicItemMegaMenuSubitem";
  } else {
    func.displayName = `PlasmicItemMegaMenuSubitem.${nodeName}`;
  }
  return func;
}

export const PlasmicItemMegaMenuSubitem = Object.assign(
  // Top-level PlasmicItemMegaMenuSubitem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navigationItem2: makeNodeComponent("navigationItem2"),
    // Metadata about props expected for PlasmicItemMegaMenuSubitem
    internalVariantProps: PlasmicItemMegaMenuSubitem__VariantProps,
    internalArgProps: PlasmicItemMegaMenuSubitem__ArgProps
  }
);

export default PlasmicItemMegaMenuSubitem;
/* prettier-ignore-end */
