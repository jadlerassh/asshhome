/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: i3mM-1cWYoIK
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import ContentfulContents from "../../ContentfulContents"; // plasmic-import: xnR31SmiTDW4/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: -2HqLDJqJBwh/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicItemMenuFeaturedHighlightItem.module.css"; // plasmic-import: i3mM-1cWYoIK/css

createPlasmicElementProxy;

export const PlasmicItemMenuFeaturedHighlightItem__VariantProps = new Array();

export const PlasmicItemMenuFeaturedHighlightItem__ArgProps = new Array(
  "entryId"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicItemMenuFeaturedHighlightItem__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          entryId: "yrhcX8GuivbhbQCHLuioj"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const new$Queries = {
    getEntry: usePlasmicDataOp(() => {
      return {
        sourceId: "tbVV8SR67UpQ6Z9zuPcDPB",
        opId: "05ea4b28-de4e-4092-9c56-d4618ff3b319",
        userArgs: {
          path: [$props.entryId]
        },
        cacheKey: `plasmic.$.05ea4b28-de4e-4092-9c56-d4618ff3b319.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"frame4"}
        data-plasmic-override={overrides.frame4}
        hasGap={true}
        className={classNames(projectcss.all, sty.frame4)}
      >
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $queries.getEntry.data.response.fields.description;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <ContentfulContents
                data-plasmic-name={"contentfulContents"}
                data-plasmic-override={overrides.contentfulContents}
                className={classNames("__wab_instance", sty.contentfulContents)}
                contents={(() => {
                  try {
                    return currentItem.content;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                key={currentIndex}
              />
            );
          })}
        </div>
        <Stack__
          as={"div"}
          data-plasmic-name={"navItemSimple"}
          data-plasmic-override={overrides.navItemSimple}
          hasGap={true}
          className={classNames(projectcss.all, sty.navItemSimple)}
        >
          <ButtonPrimary
            data-plasmic-name={"buttonPrimary"}
            data-plasmic-override={overrides.buttonPrimary}
            className={classNames("__wab_instance", sty.buttonPrimary)}
            text={(() => {
              try {
                return $queries.getEntry.data.response.fields.ctaText;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
            textArrowButton={"link"}
            url={(() => {
              try {
                return $queries.getEntry.data.response.fields.link;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "https://www.assh.org";
                }
                throw e;
              }
            })()}
          />
        </Stack__>
      </Stack__>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "frame4",
    "freeBox",
    "contentfulContents",
    "navItemSimple",
    "buttonPrimary"
  ],

  frame4: [
    "frame4",
    "freeBox",
    "contentfulContents",
    "navItemSimple",
    "buttonPrimary"
  ],

  freeBox: ["freeBox", "contentfulContents"],
  contentfulContents: ["contentfulContents"],
  navItemSimple: ["navItemSimple", "buttonPrimary"],
  buttonPrimary: ["buttonPrimary"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicItemMenuFeaturedHighlightItem__ArgProps,
          internalVariantPropNames:
            PlasmicItemMenuFeaturedHighlightItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicItemMenuFeaturedHighlightItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicItemMenuFeaturedHighlightItem";
  } else {
    func.displayName = `PlasmicItemMenuFeaturedHighlightItem.${nodeName}`;
  }
  return func;
}

export const PlasmicItemMenuFeaturedHighlightItem = Object.assign(
  // Top-level PlasmicItemMenuFeaturedHighlightItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    frame4: makeNodeComponent("frame4"),
    freeBox: makeNodeComponent("freeBox"),
    contentfulContents: makeNodeComponent("contentfulContents"),
    navItemSimple: makeNodeComponent("navItemSimple"),
    buttonPrimary: makeNodeComponent("buttonPrimary"),
    // Metadata about props expected for PlasmicItemMenuFeaturedHighlightItem
    internalVariantProps: PlasmicItemMenuFeaturedHighlightItem__VariantProps,
    internalArgProps: PlasmicItemMenuFeaturedHighlightItem__ArgProps
  }
);

export default PlasmicItemMenuFeaturedHighlightItem;
/* prettier-ignore-end */
