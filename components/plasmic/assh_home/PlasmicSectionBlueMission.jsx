/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: oMTPDeBb_fES
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicSectionBlueMission.module.css"; // plasmic-import: oMTPDeBb_fES/css
import Group22Icon from "./icons/PlasmicIcon__Group22"; // plasmic-import: O-dwHudFMxaB/icon
import Group23Icon from "./icons/PlasmicIcon__Group23"; // plasmic-import: 8uCdVyvyPt9y/icon
import Group24Icon from "./icons/PlasmicIcon__Group24"; // plasmic-import: eazq1hw1mB86/icon

createPlasmicElementProxy;

export const PlasmicSectionBlueMission__VariantProps = new Array();

export const PlasmicSectionBlueMission__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSectionBlueMission__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"frame2"}
        data-plasmic-override={overrides.frame2}
        hasGap={true}
        className={classNames(projectcss.all, sty.frame2)}
      >
        <div
          data-plasmic-name={"group3"}
          data-plasmic-override={overrides.group3}
          className={classNames(projectcss.all, sty.group3)}
        >
          <Group22Icon
            className={classNames(projectcss.all, sty.svg__wAoxf)}
            role={"img"}
          />

          <Group23Icon
            className={classNames(projectcss.all, sty.svg__nwkRy)}
            role={"img"}
          />

          <Group24Icon
            className={classNames(projectcss.all, sty.svg__uqEzg)}
            role={"img"}
          />
        </div>
        <Stack__
          as={"div"}
          data-plasmic-name={"frame3"}
          data-plasmic-override={overrides.frame3}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame3)}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"frame4"}
            data-plasmic-override={overrides.frame4}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame4)}
          >
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__aptUo
              )}
            >
              {"ASSH Mission"}
            </div>
          </Stack__>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___78Qwq
            )}
          >
            {
              "We advance the science and practice of hand and upper extremity surgery through education, research, and advocacy \u2014 supporting both the surgeons who perform it and the patients who rely on it."
            }
          </div>
        </Stack__>
      </Stack__>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "frame2", "group3", "frame3", "frame4"],
  frame2: ["frame2", "group3", "frame3", "frame4"],
  group3: ["group3"],
  frame3: ["frame3", "frame4"],
  frame4: ["frame4"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSectionBlueMission__ArgProps,
          internalVariantPropNames: PlasmicSectionBlueMission__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSectionBlueMission__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSectionBlueMission";
  } else {
    func.displayName = `PlasmicSectionBlueMission.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionBlueMission = Object.assign(
  // Top-level PlasmicSectionBlueMission renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    frame2: makeNodeComponent("frame2"),
    group3: makeNodeComponent("group3"),
    frame3: makeNodeComponent("frame3"),
    frame4: makeNodeComponent("frame4"),
    // Metadata about props expected for PlasmicSectionBlueMission
    internalVariantProps: PlasmicSectionBlueMission__VariantProps,
    internalArgProps: PlasmicSectionBlueMission__ArgProps
  }
);

export default PlasmicSectionBlueMission;
/* prettier-ignore-end */
