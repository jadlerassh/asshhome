/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: fVCU9z4VJi06
import * as React from "react";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import { SliderWrapper } from "@plasmicpkgs/react-slick";
import { sliderHelpers as SliderWrapper_Helpers } from "@plasmicpkgs/react-slick";
import CardNews from "../../CardNews"; // plasmic-import: bFdWyXkJMAxJ/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicCardListNews.module.css"; // plasmic-import: fVCU9z4VJi06/css

createPlasmicElementProxy;

export const PlasmicCardListNews__VariantProps = new Array();

export const PlasmicCardListNews__ArgProps = new Array("page");

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCardListNews__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          page: "ASSH Home"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "sliderCarousel.currentSlide",
        type: "private",
        variableType: "number",
        initFunc: ({ $props, $state, $queries, $ctx }) => 0,
        refName: "sliderCarousel",
        onMutate: generateOnMutateForSpec("currentSlide", SliderWrapper_Helpers)
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    getNewsCards: usePlasmicDataOp(() => {
      return {
        sourceId: "tbVV8SR67UpQ6Z9zuPcDPB",
        opId: "26019f65-101f-456c-a643-2633e7471bfb",
        userArgs: {
          params: [$props.page]
        },
        cacheKey: `plasmic.$.26019f65-101f-456c-a643-2633e7471bfb.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      {(() => {
        const child$Props = {
          arrowColor: "var(--token-YOr-x91EUcQe)",
          arrows: true,
          beforeChange: async (...eventArgs) => {
            generateStateOnChangePropForCodeComponents(
              $state,
              "currentSlide",
              ["sliderCarousel", "currentSlide"],
              SliderWrapper_Helpers
            ).apply(null, eventArgs);
          },
          centerMode: true,
          centerPadding: "16",
          className: classNames("__wab_instance", sty.sliderCarousel),
          dots: true,
          infinite: false,
          initialSlide: generateStateValueProp($state, [
            "sliderCarousel",
            "currentSlide"
          ]),
          ref: ref => {
            $refs["sliderCarousel"] = ref;
          },
          sliderScopeClassName: sty["sliderCarousel__slider"],
          slidesPerRow: 3,
          slidesToScroll: 1
        };
        initializeCodeComponentStates(
          $state,
          [
            {
              name: "currentSlide",
              plasmicStateName: "sliderCarousel.currentSlide"
            }
          ],

          [],
          SliderWrapper_Helpers ?? {},
          child$Props
        );
        return (
          <SliderWrapper
            data-plasmic-name={"sliderCarousel"}
            data-plasmic-override={overrides.sliderCarousel}
            {...child$Props}
          >
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $queries.getNewsCards.data.response.items;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <div
                  data-plasmic-name={"freeBox"}
                  data-plasmic-override={overrides.freeBox}
                  className={classNames(projectcss.all, sty.freeBox)}
                  key={currentIndex}
                >
                  <CardNews
                    data-plasmic-name={"cardNews"}
                    data-plasmic-override={overrides.cardNews}
                    className={classNames("__wab_instance", sty.cardNews)}
                    entryId={(() => {
                      try {
                        return currentItem.sys.id;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                </div>
              );
            })}
          </SliderWrapper>
        );
      })()}
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "sliderCarousel", "freeBox", "cardNews"],
  sliderCarousel: ["sliderCarousel", "freeBox", "cardNews"],
  freeBox: ["freeBox", "cardNews"],
  cardNews: ["cardNews"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCardListNews__ArgProps,
          internalVariantPropNames: PlasmicCardListNews__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCardListNews__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCardListNews";
  } else {
    func.displayName = `PlasmicCardListNews.${nodeName}`;
  }
  return func;
}

export const PlasmicCardListNews = Object.assign(
  // Top-level PlasmicCardListNews renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sliderCarousel: makeNodeComponent("sliderCarousel"),
    freeBox: makeNodeComponent("freeBox"),
    cardNews: makeNodeComponent("cardNews"),
    // Metadata about props expected for PlasmicCardListNews
    internalVariantProps: PlasmicCardListNews__VariantProps,
    internalArgProps: PlasmicCardListNews__ArgProps
  }
);

export default PlasmicCardListNews;
/* prettier-ignore-end */
