/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: -2HqLDJqJBwh
import * as React from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicIcon as PlasmicIcon__,
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicButtonPrimary.module.css"; // plasmic-import: -2HqLDJqJBwh/css
import ContainerIcon from "./icons/PlasmicIcon__Container"; // plasmic-import: LdpaQ2yuf9hP/icon
import Container2Icon from "./icons/PlasmicIcon__Container2"; // plasmic-import: TKWn1DDMMFQp/icon

createPlasmicElementProxy;

export const PlasmicButtonPrimary__VariantProps = new Array(
  "darkInteractions",
  "fullWidthBlueInteractions",
  "textArrowButton",
  "secondaryInteractions",
  "darkNoBgInteractions",
  "megaMenuLink",
  "memberQuicklinks",
  "whiteButtonBlackSurround"
);

export const PlasmicButtonPrimary__ArgProps = new Array("text", "url");

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicButtonPrimary__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          text: "Button Text",
          url: "https://www.assh.org"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "darkInteractions",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.darkInteractions
      },
      {
        path: "fullWidthBlueInteractions",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.fullWidthBlueInteractions
      },
      {
        path: "textArrowButton",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.textArrowButton
      },
      {
        path: "secondaryInteractions",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.secondaryInteractions
      },
      {
        path: "darkNoBgInteractions",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.darkNoBgInteractions
      },
      {
        path: "megaMenuLink",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.megaMenuLink
      },
      {
        path: "memberQuicklinks",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.memberQuicklinks
      },
      {
        path: "whiteButtonBlackSurround",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.whiteButtonBlackSurround
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootdarkInteractions_dark]: hasVariant(
            $state,
            "darkInteractions",
            "dark"
          ),
          [sty.rootdarkNoBgInteractions_unnamedVariant]: hasVariant(
            $state,
            "darkNoBgInteractions",
            "unnamedVariant"
          ),
          [sty.rootfullWidthBlueInteractions_brandBlue]: hasVariant(
            $state,
            "fullWidthBlueInteractions",
            "brandBlue"
          ),
          [sty.rootmegaMenuLink_unnamedVariant]: hasVariant(
            $state,
            "megaMenuLink",
            "unnamedVariant"
          ),
          [sty.rootsecondaryInteractions_secondary]: hasVariant(
            $state,
            "secondaryInteractions",
            "secondary"
          ),
          [sty.roottextArrowButton]: hasVariant(
            $state,
            "textArrowButton",
            "textArrowButton"
          ),
          [sty.rootwhiteButtonBlackSurround]: hasVariant(
            $state,
            "whiteButtonBlackSurround",
            "whiteButtonBlackSurround"
          )
        }
      )}
    >
      <Stack__
        as={PlasmicLink__}
        data-plasmic-name={"buttonHighlight2"}
        data-plasmic-override={overrides.buttonHighlight2}
        hasGap={true}
        className={classNames(
          projectcss.all,
          projectcss.a,
          sty.buttonHighlight2,
          {
            [sty.buttonHighlight2darkInteractions_dark]: hasVariant(
              $state,
              "darkInteractions",
              "dark"
            ),
            [sty.buttonHighlight2darkNoBgInteractions_hover]: hasVariant(
              $state,
              "darkNoBgInteractions",
              "hover"
            ),
            [sty.buttonHighlight2darkNoBgInteractions_hover_textArrowButton]:
              hasVariant($state, "textArrowButton", "textArrowButton") &&
              hasVariant($state, "darkNoBgInteractions", "hover"),
            [sty.buttonHighlight2darkNoBgInteractions_unnamedVariant]:
              hasVariant($state, "darkNoBgInteractions", "unnamedVariant"),
            [sty.buttonHighlight2fullWidthBlueInteractions_brandBlue]:
              hasVariant($state, "fullWidthBlueInteractions", "brandBlue"),
            [sty.buttonHighlight2megaMenuLink_unnamedVariant]: hasVariant(
              $state,
              "megaMenuLink",
              "unnamedVariant"
            ),
            [sty.buttonHighlight2memberQuicklinks_quicklinkHover]: hasVariant(
              $state,
              "memberQuicklinks",
              "quicklinkHover"
            ),
            [sty.buttonHighlight2memberQuicklinks_quicklink]: hasVariant(
              $state,
              "memberQuicklinks",
              "quicklink"
            ),
            [sty.buttonHighlight2secondaryInteractions_secondary]: hasVariant(
              $state,
              "secondaryInteractions",
              "secondary"
            ),
            [sty.buttonHighlight2textArrowButton]: hasVariant(
              $state,
              "textArrowButton",
              "textArrowButton"
            ),
            [sty.buttonHighlight2whiteButtonBlackSurround]: hasVariant(
              $state,
              "whiteButtonBlackSurround",
              "whiteButtonBlackSurround"
            )
          }
        )}
        component={Link}
        href={(() => {
          try {
            return $props.url;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        platform={"nextjs"}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"icon12X12"}
          data-plasmic-override={overrides.icon12X12}
          hasGap={true}
          className={classNames(projectcss.all, sty.icon12X12, {
            [sty.icon12X12darkInteractions_dark]: hasVariant(
              $state,
              "darkInteractions",
              "dark"
            ),
            [sty.icon12X12darkNoBgInteractions_hover_textArrowButton]:
              hasVariant($state, "textArrowButton", "textArrowButton") &&
              hasVariant($state, "darkNoBgInteractions", "hover"),
            [sty.icon12X12fullWidthBlueInteractions_brandBlue]: hasVariant(
              $state,
              "fullWidthBlueInteractions",
              "brandBlue"
            ),
            [sty.icon12X12megaMenuLink_unnamedVariant]: hasVariant(
              $state,
              "megaMenuLink",
              "unnamedVariant"
            ),
            [sty.icon12X12memberQuicklinks_quicklink]: hasVariant(
              $state,
              "memberQuicklinks",
              "quicklink"
            ),
            [sty.icon12X12secondaryInteractions_secondary]: hasVariant(
              $state,
              "secondaryInteractions",
              "secondary"
            ),
            [sty.icon12X12textArrowButton]: hasVariant(
              $state,
              "textArrowButton",
              "textArrowButton"
            ),
            [sty.icon12X12whiteButtonBlackSurround]: hasVariant(
              $state,
              "whiteButtonBlackSurround",
              "whiteButtonBlackSurround"
            )
          })}
        >
          <Stack__
            as={PlasmicIcon__}
            hasGap={true}
            PlasmicIconType={
              hasVariant($state, "memberQuicklinks", "quicklink")
                ? Container2Icon
                : ContainerIcon
            }
            className={classNames(projectcss.all, sty.svg__gs5Cp, {
              [sty.svgfullWidthBlueInteractions_brandBlue__gs5CpudmXr]:
                hasVariant($state, "fullWidthBlueInteractions", "brandBlue"),
              [sty.svgmemberQuicklinks_quicklink__gs5CpTwLim]: hasVariant(
                $state,
                "memberQuicklinks",
                "quicklink"
              ),
              [sty.svgtextArrowButton__gs5CpuQaqx]: hasVariant(
                $state,
                "textArrowButton",
                "textArrowButton"
              )
            })}
            role={"img"}
          />
        </Stack__>
        <div
          data-plasmic-name={"text2"}
          data-plasmic-override={overrides.text2}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text2,
            {
              [sty.text2darkInteractions_dark]: hasVariant(
                $state,
                "darkInteractions",
                "dark"
              ),
              [sty.text2darkNoBgInteractions_hover]: hasVariant(
                $state,
                "darkNoBgInteractions",
                "hover"
              ),
              [sty.text2darkNoBgInteractions_hover_textArrowButton]:
                hasVariant($state, "textArrowButton", "textArrowButton") &&
                hasVariant($state, "darkNoBgInteractions", "hover"),
              [sty.text2darkNoBgInteractions_unnamedVariant]: hasVariant(
                $state,
                "darkNoBgInteractions",
                "unnamedVariant"
              ),
              [sty.text2fullWidthBlueInteractions_brandBlue]: hasVariant(
                $state,
                "fullWidthBlueInteractions",
                "brandBlue"
              ),
              [sty.text2megaMenuLink_unnamedVariant]: hasVariant(
                $state,
                "megaMenuLink",
                "unnamedVariant"
              ),
              [sty.text2memberQuicklinks_quicklinkHover]: hasVariant(
                $state,
                "memberQuicklinks",
                "quicklinkHover"
              ),
              [sty.text2memberQuicklinks_quicklink]: hasVariant(
                $state,
                "memberQuicklinks",
                "quicklink"
              ),
              [sty.text2secondaryInteractions_secondary]: hasVariant(
                $state,
                "secondaryInteractions",
                "secondary"
              ),
              [sty.text2textArrowButton]: hasVariant(
                $state,
                "textArrowButton",
                "textArrowButton"
              ),
              [sty.text2whiteButtonBlackSurround]: hasVariant(
                $state,
                "whiteButtonBlackSurround",
                "whiteButtonBlackSurround"
              )
            }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.text;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Get Registered";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <Stack__
          as={"div"}
          data-plasmic-name={"icon12X125"}
          data-plasmic-override={overrides.icon12X125}
          hasGap={true}
          className={classNames(projectcss.all, sty.icon12X125, {
            [sty.icon12X125darkNoBgInteractions_hover_textArrowButton]:
              hasVariant($state, "textArrowButton", "textArrowButton") &&
              hasVariant($state, "darkNoBgInteractions", "hover"),
            [sty.icon12X125textArrowButton]: hasVariant(
              $state,
              "textArrowButton",
              "textArrowButton"
            )
          })}
        >
          <Stack__
            as={Container2Icon}
            hasGap={true}
            className={classNames(projectcss.all, sty.svg__bsMdx, {
              [sty.svgdarkNoBgInteractions_hover_textArrowButton__bsMdxAyj9OUQaqx]:
                hasVariant($state, "textArrowButton", "textArrowButton") &&
                hasVariant($state, "darkNoBgInteractions", "hover"),
              [sty.svgtextArrowButton__bsMdxuQaqx]: hasVariant(
                $state,
                "textArrowButton",
                "textArrowButton"
              )
            })}
            role={"img"}
          />
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"navItemSimple"}
          data-plasmic-override={overrides.navItemSimple}
          hasGap={true}
          className={classNames(projectcss.all, sty.navItemSimple, {
            [sty.navItemSimpledarkNoBgInteractions_hover_textArrowButton]:
              hasVariant($state, "textArrowButton", "textArrowButton") &&
              hasVariant($state, "darkNoBgInteractions", "hover"),
            [sty.navItemSimpletextArrowButton]: hasVariant(
              $state,
              "textArrowButton",
              "textArrowButton"
            )
          })}
        >
          {(
            hasVariant($state, "textArrowButton", "textArrowButton")
              ? true
              : false
          ) ? (
            <Stack__
              as={"div"}
              data-plasmic-name={"icon12X123"}
              data-plasmic-override={overrides.icon12X123}
              hasGap={true}
              className={classNames(projectcss.all, sty.icon12X123, {
                [sty.icon12X123textArrowButton]: hasVariant(
                  $state,
                  "textArrowButton",
                  "textArrowButton"
                )
              })}
            >
              <Stack__
                as={ContainerIcon}
                hasGap={true}
                className={classNames(projectcss.all, sty.svg__b3Ibr, {
                  [sty.svgtextArrowButton__b3IbruQaqx]: hasVariant(
                    $state,
                    "textArrowButton",
                    "textArrowButton"
                  )
                })}
                role={"img"}
              />
            </Stack__>
          ) : null}
          <div
            data-plasmic-name={"navigationItem2"}
            data-plasmic-override={overrides.navigationItem2}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.navigationItem2,
              {
                [sty.navigationItem2darkNoBgInteractions_hover_textArrowButton]:
                  hasVariant($state, "textArrowButton", "textArrowButton") &&
                  hasVariant($state, "darkNoBgInteractions", "hover"),
                [sty.navigationItem2secondaryInteractions_secondary]:
                  hasVariant($state, "secondaryInteractions", "secondary"),
                [sty.navigationItem2secondaryInteractions_unnamedVariant]:
                  hasVariant($state, "secondaryInteractions", "unnamedVariant"),
                [sty.navigationItem2textArrowButton]: hasVariant(
                  $state,
                  "textArrowButton",
                  "textArrowButton"
                )
              }
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.text;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Get Registered";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"icon12X124"}
            data-plasmic-override={overrides.icon12X124}
            hasGap={true}
            className={classNames(projectcss.all, sty.icon12X124, {
              [sty.icon12X124darkNoBgInteractions_hover_textArrowButton]:
                hasVariant($state, "textArrowButton", "textArrowButton") &&
                hasVariant($state, "darkNoBgInteractions", "hover")
            })}
          >
            <Stack__
              as={Container2Icon}
              hasGap={true}
              className={classNames(projectcss.all, sty.svg__bmUtj)}
              role={"img"}
            />
          </Stack__>
        </Stack__>
        {(
          hasVariant($state, "textArrowButton", "textArrowButton")
            ? true
            : false
        ) ? (
          <Stack__
            as={"div"}
            data-plasmic-name={"icon12X122"}
            data-plasmic-override={overrides.icon12X122}
            hasGap={true}
            className={classNames(projectcss.all, sty.icon12X122, {
              [sty.icon12X122darkInteractions_dark]: hasVariant(
                $state,
                "darkInteractions",
                "dark"
              ),
              [sty.icon12X122fullWidthBlueInteractions_brandBlue]: hasVariant(
                $state,
                "fullWidthBlueInteractions",
                "brandBlue"
              ),
              [sty.icon12X122textArrowButton]: hasVariant(
                $state,
                "textArrowButton",
                "textArrowButton"
              )
            })}
          >
            <Stack__
              as={Container2Icon}
              hasGap={true}
              className={classNames(projectcss.all, sty.svg__zDfRv, {
                [sty.svgfullWidthBlueInteractions_brandBlue__zDfRvudmXr]:
                  hasVariant($state, "fullWidthBlueInteractions", "brandBlue")
              })}
              role={"img"}
            />
          </Stack__>
        ) : null}
      </Stack__>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "buttonHighlight2",
    "icon12X12",
    "text2",
    "icon12X125",
    "navItemSimple",
    "icon12X123",
    "navigationItem2",
    "icon12X124",
    "icon12X122"
  ],

  buttonHighlight2: [
    "buttonHighlight2",
    "icon12X12",
    "text2",
    "icon12X125",
    "navItemSimple",
    "icon12X123",
    "navigationItem2",
    "icon12X124",
    "icon12X122"
  ],

  icon12X12: ["icon12X12"],
  text2: ["text2"],
  icon12X125: ["icon12X125"],
  navItemSimple: [
    "navItemSimple",
    "icon12X123",
    "navigationItem2",
    "icon12X124"
  ],

  icon12X123: ["icon12X123"],
  navigationItem2: ["navigationItem2"],
  icon12X124: ["icon12X124"],
  icon12X122: ["icon12X122"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicButtonPrimary__ArgProps,
          internalVariantPropNames: PlasmicButtonPrimary__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicButtonPrimary__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicButtonPrimary";
  } else {
    func.displayName = `PlasmicButtonPrimary.${nodeName}`;
  }
  return func;
}

export const PlasmicButtonPrimary = Object.assign(
  // Top-level PlasmicButtonPrimary renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    buttonHighlight2: makeNodeComponent("buttonHighlight2"),
    icon12X12: makeNodeComponent("icon12X12"),
    text2: makeNodeComponent("text2"),
    icon12X125: makeNodeComponent("icon12X125"),
    navItemSimple: makeNodeComponent("navItemSimple"),
    icon12X123: makeNodeComponent("icon12X123"),
    navigationItem2: makeNodeComponent("navigationItem2"),
    icon12X124: makeNodeComponent("icon12X124"),
    icon12X122: makeNodeComponent("icon12X122"),
    // Metadata about props expected for PlasmicButtonPrimary
    internalVariantProps: PlasmicButtonPrimary__VariantProps,
    internalArgProps: PlasmicButtonPrimary__ArgProps
  }
);

export default PlasmicButtonPrimary;
/* prettier-ignore-end */
