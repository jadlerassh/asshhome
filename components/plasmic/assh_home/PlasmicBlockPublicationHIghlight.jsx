/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: UkJ-zcT0QvMv
import * as React from "react";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: -2HqLDJqJBwh/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicBlockPublicationHIghlight.module.css"; // plasmic-import: UkJ-zcT0QvMv/css

createPlasmicElementProxy;

export const PlasmicBlockPublicationHIghlight__VariantProps = new Array();

export const PlasmicBlockPublicationHIghlight__ArgProps = new Array("title");

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBlockPublicationHIghlight__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          title: "For Patients: Handbook Feature"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const new$Queries = {
    getHeroContent: usePlasmicDataOp(() => {
      return {
        sourceId: "tbVV8SR67UpQ6Z9zuPcDPB",
        opId: "84ab1dbe-22a0-4ab0-b1ff-3bd83c164121",
        userArgs: {
          params: [$props.title]
        },
        cacheKey: `plasmic.$.84ab1dbe-22a0-4ab0-b1ff-3bd83c164121.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        hasGap={true}
        className={classNames(projectcss.all, sty.columns)}
      >
        <div className={classNames(projectcss.all, sty.column__hz5Rh)}>
          <div
            data-plasmic-name={"frame2"}
            data-plasmic-override={overrides.frame2}
            className={classNames(projectcss.all, sty.frame2)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"frame7"}
              data-plasmic-override={overrides.frame7}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame7)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__sfn6W
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $queries.getHeroContent.data.response.items[0]
                        .fields.header;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "The Hand Book";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__uhkHn
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $queries.getHeroContent.data.response.items[0]
                        .fields.description;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "The Hand Book\u00a0is a unique and much needed guide for knowledge-seeking parents of a child with a hand difference.\u00a0The Hand Book\u00a0follows you through your personal journey of understanding the science of hand differences.";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <Stack__
                as={"div"}
                data-plasmic-name={"frame8"}
                data-plasmic-override={overrides.frame8}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame8)}
              >
                <ButtonPrimary
                  className={classNames(
                    "__wab_instance",
                    sty.buttonPrimary__ajwCk
                  )}
                  secondaryInteractions={"secondary"}
                  text={(() => {
                    try {
                      return $queries.getHeroContent.data.response.items[0]
                        .fields.cta1Text;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  url={(() => {
                    try {
                      return $queries.getHeroContent.data.response.items[0]
                        .fields.cta1Link;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                />

                <ButtonPrimary
                  className={classNames(
                    "__wab_instance",
                    sty.buttonPrimary__dpOIh
                  )}
                  text={"More About The Book"}
                  whiteButtonBlackSurround={true}
                />
              </Stack__>
            </Stack__>
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.column__w23T)}>
          <div
            data-plasmic-name={"column"}
            data-plasmic-override={overrides.column}
            className={classNames(projectcss.all, sty.column)}
          >
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"lazy"}
              src={(() => {
                try {
                  return $queries.getHeroContent.data.response.includes.Asset[0]
                    .fields.file.url;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />
          </div>
        </div>
      </Stack__>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "columns", "frame2", "frame7", "frame8", "column", "img"],
  columns: ["columns", "frame2", "frame7", "frame8", "column", "img"],
  frame2: ["frame2", "frame7", "frame8"],
  frame7: ["frame7", "frame8"],
  frame8: ["frame8"],
  column: ["column", "img"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBlockPublicationHIghlight__ArgProps,
          internalVariantPropNames:
            PlasmicBlockPublicationHIghlight__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBlockPublicationHIghlight__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBlockPublicationHIghlight";
  } else {
    func.displayName = `PlasmicBlockPublicationHIghlight.${nodeName}`;
  }
  return func;
}

export const PlasmicBlockPublicationHIghlight = Object.assign(
  // Top-level PlasmicBlockPublicationHIghlight renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    frame2: makeNodeComponent("frame2"),
    frame7: makeNodeComponent("frame7"),
    frame8: makeNodeComponent("frame8"),
    column: makeNodeComponent("column"),
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicBlockPublicationHIghlight
    internalVariantProps: PlasmicBlockPublicationHIghlight__VariantProps,
    internalArgProps: PlasmicBlockPublicationHIghlight__ArgProps
  }
);

export default PlasmicBlockPublicationHIghlight;
/* prettier-ignore-end */
