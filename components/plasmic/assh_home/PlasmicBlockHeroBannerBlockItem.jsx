/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: uP-uUACbvTsG
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicBlockHeroBannerBlockItem.module.css"; // plasmic-import: uP-uUACbvTsG/css
import RightChevronSvgIcon from "./icons/PlasmicIcon__RightChevronSvg"; // plasmic-import: CVi8xEyvKenj/icon

createPlasmicElementProxy;

export const PlasmicBlockHeroBannerBlockItem__VariantProps = new Array(
  "_1",
  "_2",
  "_3",
  "_4"
);

export const PlasmicBlockHeroBannerBlockItem__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBlockHeroBannerBlockItem__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "_1",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props._1
      },
      {
        path: "_2",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props._2
      },
      {
        path: "_3",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props._3
      },
      {
        path: "_4",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props._4
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.root_1__1]: hasVariant($state, "_1", "_1"),
          [sty.root_1_hover]: hasVariant($state, "_1", "hover"),
          [sty.root_2__2]: hasVariant($state, "_2", "_2"),
          [sty.root_2_hover]: hasVariant($state, "_2", "hover"),
          [sty.root_3__3]: hasVariant($state, "_3", "_3"),
          [sty.root_3_hover]: hasVariant($state, "_3", "hover"),
          [sty.root_4__4]: hasVariant($state, "_4", "_4"),
          [sty.root_4_hover]: hasVariant($state, "_4", "hover")
        }
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox, {
          [sty.freeBox_1__1]: hasVariant($state, "_1", "_1"),
          [sty.freeBox_1_hover]: hasVariant($state, "_1", "hover"),
          [sty.freeBox_2__2]: hasVariant($state, "_2", "_2"),
          [sty.freeBox_2_hover]: hasVariant($state, "_2", "hover"),
          [sty.freeBox_3__3]: hasVariant($state, "_3", "_3"),
          [sty.freeBox_3_hover]: hasVariant($state, "_3", "hover"),
          [sty.freeBox_4__4]: hasVariant($state, "_4", "_4"),
          [sty.freeBox_4_hover]: hasVariant($state, "_4", "hover")
        })}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"calloutBox"}
          data-plasmic-override={overrides.calloutBox}
          hasGap={true}
          className={classNames(projectcss.all, sty.calloutBox, {
            [sty.calloutBox_1_hover]: hasVariant($state, "_1", "hover"),
            [sty.calloutBox_2_hover]: hasVariant($state, "_2", "hover"),
            [sty.calloutBox_3_hover]: hasVariant($state, "_3", "hover"),
            [sty.calloutBox_4__4]: hasVariant($state, "_4", "_4"),
            [sty.calloutBox_4_hover]: hasVariant($state, "_4", "hover")
          })}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"container"}
            data-plasmic-override={overrides.container}
            hasGap={true}
            className={classNames(projectcss.all, sty.container, {
              [sty.container_1__1]: hasVariant($state, "_1", "_1"),
              [sty.container_1_hover]: hasVariant($state, "_1", "hover"),
              [sty.container_2__2]: hasVariant($state, "_2", "_2"),
              [sty.container_2_hover]: hasVariant($state, "_2", "hover"),
              [sty.container_3_hover]: hasVariant($state, "_3", "hover"),
              [sty.container_4__4]: hasVariant($state, "_4", "_4"),
              [sty.container_4_hover]: hasVariant($state, "_4", "hover")
            })}
          />

          <Stack__
            as={"div"}
            data-plasmic-name={"inner"}
            data-plasmic-override={overrides.inner}
            hasGap={true}
            className={classNames(projectcss.all, sty.inner, {
              [sty.inner_1__1]: hasVariant($state, "_1", "_1"),
              [sty.inner_1_hover]: hasVariant($state, "_1", "hover"),
              [sty.inner_2__2]: hasVariant($state, "_2", "_2"),
              [sty.inner_2_hover]: hasVariant($state, "_2", "hover"),
              [sty.inner_3_hover]: hasVariant($state, "_3", "hover"),
              [sty.inner_4__4]: hasVariant($state, "_4", "_4"),
              [sty.inner_4_hover]: hasVariant($state, "_4", "hover")
            })}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"content"}
              data-plasmic-override={overrides.content}
              hasGap={true}
              className={classNames(projectcss.all, sty.content)}
            >
              <div
                data-plasmic-name={"heading"}
                data-plasmic-override={overrides.heading}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.heading
                )}
              >
                {"ASSH Coding App"}
              </div>
              <section
                data-plasmic-name={"section"}
                data-plasmic-override={overrides.section}
                className={classNames(projectcss.all, sty.section, {
                  [sty.section_1__1]: hasVariant($state, "_1", "_1"),
                  [sty.section_1_hover]: hasVariant($state, "_1", "hover"),
                  [sty.section_2__2]: hasVariant($state, "_2", "_2"),
                  [sty.section_2_hover]: hasVariant($state, "_2", "hover"),
                  [sty.section_4__4]: hasVariant($state, "_4", "_4"),
                  [sty.section_4_hover]: hasVariant($state, "_4", "hover")
                })}
              >
                <RightChevronSvgIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg, {
                    [sty.svg_1__1]: hasVariant($state, "_1", "_1"),
                    [sty.svg_1_hover]: hasVariant($state, "_1", "hover"),
                    [sty.svg_2__2]: hasVariant($state, "_2", "_2"),
                    [sty.svg_2_hover]: hasVariant($state, "_2", "hover"),
                    [sty.svg_3__3]: hasVariant($state, "_3", "_3"),
                    [sty.svg_4__4]: hasVariant($state, "_4", "_4"),
                    [sty.svg_4_hover]: hasVariant($state, "_4", "hover")
                  })}
                  role={"img"}
                />
              </section>
            </Stack__>
          </Stack__>
        </Stack__>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "freeBox",
    "calloutBox",
    "container",
    "inner",
    "content",
    "heading",
    "section",
    "svg"
  ],

  freeBox: [
    "freeBox",
    "calloutBox",
    "container",
    "inner",
    "content",
    "heading",
    "section",
    "svg"
  ],

  calloutBox: [
    "calloutBox",
    "container",
    "inner",
    "content",
    "heading",
    "section",
    "svg"
  ],

  container: ["container"],
  inner: ["inner", "content", "heading", "section", "svg"],
  content: ["content", "heading", "section", "svg"],
  heading: ["heading"],
  section: ["section", "svg"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBlockHeroBannerBlockItem__ArgProps,
          internalVariantPropNames:
            PlasmicBlockHeroBannerBlockItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBlockHeroBannerBlockItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBlockHeroBannerBlockItem";
  } else {
    func.displayName = `PlasmicBlockHeroBannerBlockItem.${nodeName}`;
  }
  return func;
}

export const PlasmicBlockHeroBannerBlockItem = Object.assign(
  // Top-level PlasmicBlockHeroBannerBlockItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    calloutBox: makeNodeComponent("calloutBox"),
    container: makeNodeComponent("container"),
    inner: makeNodeComponent("inner"),
    content: makeNodeComponent("content"),
    heading: makeNodeComponent("heading"),
    section: makeNodeComponent("section"),
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicBlockHeroBannerBlockItem
    internalVariantProps: PlasmicBlockHeroBannerBlockItem__VariantProps,
    internalArgProps: PlasmicBlockHeroBannerBlockItem__ArgProps
  }
);

export default PlasmicBlockHeroBannerBlockItem;
/* prettier-ignore-end */
