/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: AdcE_rcczjFf
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import ItemEventCardItemInfoOnly from "../../ItemEventCardItemInfoOnly"; // plasmic-import: UPjziaoo_XKO/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicSectionUpcomingEventsList.module.css"; // plasmic-import: AdcE_rcczjFf/css

createPlasmicElementProxy;

export const PlasmicSectionUpcomingEventsList__VariantProps = new Array();

export const PlasmicSectionUpcomingEventsList__ArgProps = new Array(
  "category",
  "categoryNot",
  "num"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSectionUpcomingEventsList__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          category: "Webinar",
          num: 3
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "amImage",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $queries.latestAnnualMeeting.data.response.items[0].fields
                .thumb.sys.id ===
                $queries.latestAnnualMeeting.data.response.includes.Asset[0].sys
                  .id
                ? $queries.latestAnnualMeeting.data.response.includes.Asset[0]
                    .fields.file.url
                : null;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    latestAnnualMeeting: usePlasmicDataOp(() => {
      return {
        sourceId: "tbVV8SR67UpQ6Z9zuPcDPB",
        opId: "cf8d13e5-e5c9-486d-9144-aff30a7a55d8",
        userArgs: {},
        cacheKey: `plasmic.$.cf8d13e5-e5c9-486d-9144-aff30a7a55d8.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    latestEvents: usePlasmicDataOp(() => {
      return {
        sourceId: "tbVV8SR67UpQ6Z9zuPcDPB",
        opId: "0387f75c-621a-4bf9-97f2-86c5060c5d82",
        userArgs: {
          params: [$props.categoryNot, $props.num, $props.category]
        },
        cacheKey: `plasmic.$.0387f75c-621a-4bf9-97f2-86c5060c5d82.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"section7"}
        data-plasmic-override={overrides.section7}
        className={classNames(projectcss.all, sty.section7)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"frame5"}
          data-plasmic-override={overrides.frame5}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame5)}
        >
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $queries.latestEvents.data.response.items;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <div
                data-plasmic-name={"articleCard"}
                data-plasmic-override={overrides.articleCard}
                className={classNames(
                  projectcss.all,
                  sty.articleCard,
                  "event-card-item"
                )}
                key={currentIndex}
              >
                <ItemEventCardItemInfoOnly
                  data-plasmic-name={"itemEventCardItemInfoOnly"}
                  data-plasmic-override={overrides.itemEventCardItemInfoOnly}
                  className={classNames(
                    "__wab_instance",
                    sty.itemEventCardItemInfoOnly
                  )}
                  dates={(() => {
                    try {
                      return currentItem.fields.dates;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  location={(() => {
                    try {
                      return currentItem.fields.locationName;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  registerUrl={(() => {
                    try {
                      return currentItem.fields.registrationLink;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  title={(() => {
                    try {
                      return currentItem.fields.title;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                />
              </div>
            );
          })}
        </Stack__>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "section7",
    "frame5",
    "articleCard",
    "itemEventCardItemInfoOnly"
  ],

  section7: ["section7", "frame5", "articleCard", "itemEventCardItemInfoOnly"],
  frame5: ["frame5", "articleCard", "itemEventCardItemInfoOnly"],
  articleCard: ["articleCard", "itemEventCardItemInfoOnly"],
  itemEventCardItemInfoOnly: ["itemEventCardItemInfoOnly"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSectionUpcomingEventsList__ArgProps,
          internalVariantPropNames:
            PlasmicSectionUpcomingEventsList__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSectionUpcomingEventsList__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSectionUpcomingEventsList";
  } else {
    func.displayName = `PlasmicSectionUpcomingEventsList.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionUpcomingEventsList = Object.assign(
  // Top-level PlasmicSectionUpcomingEventsList renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section7: makeNodeComponent("section7"),
    frame5: makeNodeComponent("frame5"),
    articleCard: makeNodeComponent("articleCard"),
    itemEventCardItemInfoOnly: makeNodeComponent("itemEventCardItemInfoOnly"),
    // Metadata about props expected for PlasmicSectionUpcomingEventsList
    internalVariantProps: PlasmicSectionUpcomingEventsList__VariantProps,
    internalArgProps: PlasmicSectionUpcomingEventsList__ArgProps
  }
);

export default PlasmicSectionUpcomingEventsList;
/* prettier-ignore-end */
