/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: dp8ix0xSB-By
import * as React from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import { NavigationBar } from "@plasmicpkgs/plasmic-nav";
import Button from "../../Button"; // plasmic-import: pu4XgqUR8EWd/component
import { useScreenVariants as useScreenVariantsdjBtUr72ZExV } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: DJBtUr72ZExV/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicAsshMenu.module.css"; // plasmic-import: dp8ix0xSB-By/css
import UserSvgrepoComSvgIcon from "./icons/PlasmicIcon__UserSvgrepoComSvg"; // plasmic-import: W6ngSay2ycGa/icon
import SearchAltSvgrepoComSvgIcon from "./icons/PlasmicIcon__SearchAltSvgrepoComSvg"; // plasmic-import: 6_HZK3kHCpjf/icon

createPlasmicElementProxy;

export const PlasmicAsshMenu__VariantProps = new Array();

export const PlasmicAsshMenu__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicAsshMenu__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const new$Queries = {
    utilityNav: usePlasmicDataOp(() => {
      return {
        sourceId: "tbVV8SR67UpQ6Z9zuPcDPB",
        opId: "858b15fe-df67-4026-84b1-0b1a68e1122d",
        userArgs: {},
        cacheKey: `plasmic.$.858b15fe-df67-4026-84b1-0b1a68e1122d.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    query2: usePlasmicDataOp(() => {
      return {
        sourceId: "tbVV8SR67UpQ6Z9zuPcDPB",
        opId: "c89fcc75-a075-4fea-8f4f-d44115f026b1",
        userArgs: {},
        cacheKey: `plasmic.$.c89fcc75-a075-4fea-8f4f-d44115f026b1.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsdjBtUr72ZExV()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <section
        data-plasmic-name={"topBar"}
        data-plasmic-override={overrides.topBar}
        className={classNames(projectcss.all, sty.topBar)}
      >
        <NavigationBar
          data-plasmic-name={"navigationBar"}
          data-plasmic-override={overrides.navigationBar}
          brand={
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.link__btttJ
              )}
              component={Link}
              href={"#"}
              platform={"nextjs"}
            >
              <PlasmicImg__
                alt={""}
                className={classNames(sty.img__ltR7S)}
                displayHeight={"40px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                src={{
                  src: "/plasmic/assh_home/images/assh400X801.png",
                  fullWidth: 400,
                  fullHeight: 80,
                  aspectRatio: undefined
                }}
              />
            </PlasmicLink__>
          }
          className={classNames("__wab_instance", sty.navigationBar)}
          closeButton={
            <PlasmicImg__
              alt={""}
              className={classNames(sty.img__ndimy)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"none"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              src={"https://static1.plasmic.app/close.svg"}
            />
          }
          itemsGap={8}
          menuItems={
            <React.Fragment>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__joz1
                )}
                component={Link}
                href={"/"}
                platform={"nextjs"}
              >
                {"Home"}
              </PlasmicLink__>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__rl9Ox
                )}
                component={Link}
                href={"/"}
                platform={"nextjs"}
              >
                {"About"}
              </PlasmicLink__>
              <PlasmicLink__
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.link__vdfM1
                )}
                component={Link}
                href={"/"}
                platform={"nextjs"}
              >
                {"Contact"}
              </PlasmicLink__>
            </React.Fragment>
          }
          openButton={
            <PlasmicImg__
              data-plasmic-name={"hamburger"}
              data-plasmic-override={overrides.hamburger}
              alt={""}
              className={classNames(sty.hamburger)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"none"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"26px"}
              src={{
                src: "/plasmic/assh_home/images/menuSvgrepoComSvg.svg",
                fullWidth: 20,
                fullHeight: 20,
                aspectRatio: 1
              }}
            />
          }
          responsiveBreakpoint={768}
        />

        <section
          data-plasmic-name={"menuContainer2"}
          data-plasmic-override={overrides.menuContainer2}
          className={classNames(projectcss.all, sty.menuContainer2)}
        >
          <section
            data-plasmic-name={"menu2"}
            data-plasmic-override={overrides.menu2}
            className={classNames(projectcss.all, sty.menu2)}
          >
            <Stack__
              as={"section"}
              data-plasmic-name={"supermenu2"}
              data-plasmic-override={overrides.supermenu2}
              hasGap={true}
              className={classNames(projectcss.all, sty.supermenu2)}
            >
              <section
                className={classNames(projectcss.all, sty.section__g6Rvk)}
              >
                <Stack__
                  as={"section"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.section___7Rx22)}
                >
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__b1F4B)}
                    tabIndex={(() => {
                      try {
                        return undefined;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $queries.utilityNav.data.response.items;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <PlasmicLink__
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.link__cnpc6
                          )}
                          component={Link}
                          href={(() => {
                            try {
                              return currentItem.fields.url;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "https://www.assh.org/";
                              }
                              throw e;
                            }
                          })()}
                          key={currentIndex}
                          platform={"nextjs"}
                        >
                          <React.Fragment>
                            {(() => {
                              try {
                                return currentItem.fields.label;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return "Label";
                                }
                                throw e;
                              }
                            })()}
                          </React.Fragment>
                        </PlasmicLink__>
                      );
                    })}
                  </Stack__>
                </Stack__>
              </section>
              <Button
                data-plasmic-name={"login2"}
                data-plasmic-override={overrides.login2}
                className={classNames("__wab_instance", sty.login2)}
                iconStart={true}
                label={
                  <div
                    data-plasmic-name={"text"}
                    data-plasmic-override={overrides.text}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ color: "var(--token-YLYGEwd03pX3)" }}
                      >
                        {"Login"}
                      </span>
                    </React.Fragment>
                  </div>
                }
                start={
                  <UserSvgrepoComSvgIcon
                    data-plasmic-name={"svg"}
                    data-plasmic-override={overrides.svg}
                    className={classNames(projectcss.all, sty.svg)}
                    role={"img"}
                  />
                }
              />
            </Stack__>
            <section
              data-plasmic-name={"megamenu2"}
              data-plasmic-override={overrides.megamenu2}
              className={classNames(projectcss.all, sty.megamenu2)}
            >
              <section
                className={classNames(projectcss.all, sty.section__lansb)}
              >
                <section
                  className={classNames(projectcss.all, sty.section__do13R)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__r2Gw)}
                    displayHeight={"100%"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"250px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/assh_home/images/assh400X801.png",
                      fullWidth: 400,
                      fullHeight: 80,
                      aspectRatio: undefined
                    }}
                  />
                </section>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__yrSU)}
                >
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $queries.query2.data.response.items;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <PlasmicLink__
                        className={classNames(
                          projectcss.all,
                          projectcss.a,
                          projectcss.__wab_text,
                          sty.link___9VY7
                        )}
                        component={Link}
                        href={(() => {
                          try {
                            return undefined;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "https://www.assh.org/";
                            }
                            throw e;
                          }
                        })()}
                        key={currentIndex}
                        platform={"nextjs"}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.fields.label;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Some link text";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </PlasmicLink__>
                    );
                  })}
                  <SearchAltSvgrepoComSvgIcon
                    data-plasmic-name={"searchIcon2"}
                    data-plasmic-override={overrides.searchIcon2}
                    className={classNames(projectcss.all, sty.searchIcon2)}
                    role={"img"}
                  />
                </Stack__>
              </section>
            </section>
          </section>
        </section>
      </section>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "topBar",
    "navigationBar",
    "hamburger",
    "menuContainer2",
    "menu2",
    "supermenu2",
    "login2",
    "svg",
    "text",
    "megamenu2",
    "searchIcon2"
  ],

  topBar: [
    "topBar",
    "navigationBar",
    "hamburger",
    "menuContainer2",
    "menu2",
    "supermenu2",
    "login2",
    "svg",
    "text",
    "megamenu2",
    "searchIcon2"
  ],

  navigationBar: ["navigationBar", "hamburger"],
  hamburger: ["hamburger"],
  menuContainer2: [
    "menuContainer2",
    "menu2",
    "supermenu2",
    "login2",
    "svg",
    "text",
    "megamenu2",
    "searchIcon2"
  ],

  menu2: [
    "menu2",
    "supermenu2",
    "login2",
    "svg",
    "text",
    "megamenu2",
    "searchIcon2"
  ],

  supermenu2: ["supermenu2", "login2", "svg", "text"],
  login2: ["login2", "svg", "text"],
  svg: ["svg"],
  text: ["text"],
  megamenu2: ["megamenu2", "searchIcon2"],
  searchIcon2: ["searchIcon2"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicAsshMenu__ArgProps,
          internalVariantPropNames: PlasmicAsshMenu__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicAsshMenu__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAsshMenu";
  } else {
    func.displayName = `PlasmicAsshMenu.${nodeName}`;
  }
  return func;
}

export const PlasmicAsshMenu = Object.assign(
  // Top-level PlasmicAsshMenu renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    topBar: makeNodeComponent("topBar"),
    navigationBar: makeNodeComponent("navigationBar"),
    hamburger: makeNodeComponent("hamburger"),
    menuContainer2: makeNodeComponent("menuContainer2"),
    menu2: makeNodeComponent("menu2"),
    supermenu2: makeNodeComponent("supermenu2"),
    login2: makeNodeComponent("login2"),
    svg: makeNodeComponent("svg"),
    text: makeNodeComponent("text"),
    megamenu2: makeNodeComponent("megamenu2"),
    searchIcon2: makeNodeComponent("searchIcon2"),
    // Metadata about props expected for PlasmicAsshMenu
    internalVariantProps: PlasmicAsshMenu__VariantProps,
    internalArgProps: PlasmicAsshMenu__ArgProps
  }
);

export default PlasmicAsshMenu;
/* prettier-ignore-end */
