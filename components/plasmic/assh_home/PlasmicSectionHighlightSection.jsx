/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: yV5r8KM9AbUW
import * as React from "react";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import AsshButton from "../../AsshButton"; // plasmic-import: -2HqLDJqJBwh/component
import { useScreenVariants as useScreenVariantsdjBtUr72ZExV } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: DJBtUr72ZExV/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicSectionHighlightSection.module.css"; // plasmic-import: yV5r8KM9AbUW/css

createPlasmicElementProxy;

export const PlasmicSectionHighlightSection__VariantProps = new Array();

export const PlasmicSectionHighlightSection__ArgProps = new Array("title");

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSectionHighlightSection__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          title: "Membership Overview - Title Card"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const new$Queries = {
    getImage: usePlasmicDataOp(() => {
      return {
        sourceId: "n5sYZavh6xkK4D8BEueUSq",
        opId: "0c2afc0b-6aa8-47c9-b10b-6228850bafaf",
        userArgs: {
          path: [
            $queries.getHeroContent.data.response.items[0].fields
              .backgroundImage.sys.id
          ]
        },
        cacheKey: `plasmic.$.0c2afc0b-6aa8-47c9-b10b-6228850bafaf.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getHeroContent: usePlasmicDataOp(() => {
      return {
        sourceId: "tbVV8SR67UpQ6Z9zuPcDPB",
        opId: "84ab1dbe-22a0-4ab0-b1ff-3bd83c164121",
        userArgs: {
          params: [$props.title]
        },
        cacheKey: `plasmic.$.84ab1dbe-22a0-4ab0-b1ff-3bd83c164121.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsdjBtUr72ZExV()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"row"}
        data-plasmic-override={overrides.row}
        className={classNames(projectcss.all, sty.row)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"frame2"}
          data-plasmic-override={overrides.frame2}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame2)}
        >
          <div
            data-plasmic-name={"column"}
            data-plasmic-override={overrides.column}
            className={classNames(projectcss.all, sty.column)}
          >
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={"auto"}
              displayMaxHeight={"none"}
              displayMaxWidth={"100%"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"auto"}
              loading={"lazy"}
              src={(() => {
                try {
                  return $queries.getImage.data.response.fields.file.url;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
            />
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"frame3"}
            data-plasmic-override={overrides.frame3}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame3)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"frame4"}
              data-plasmic-override={overrides.frame4}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame4)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__toxqM
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $queries.getHeroContent.data.response.items[0]
                        .fields.header;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Test Your Knowledge";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </Stack__>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__uzl31
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $queries.getHeroContent.data.response.items[0].fields
                      .description;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Sharpen your skills, prepare for recertification, and stay current \u2014 all on your schedule. The ASSH Self-Assessment Exam is your trusted tool for advancing upper extremity expertise with confidence.";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <Stack__
              as={"div"}
              data-plasmic-name={"frame5"}
              data-plasmic-override={overrides.frame5}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame5)}
            >
              <AsshButton
                data-plasmic-name={"asshButton"}
                data-plasmic-override={overrides.asshButton}
                className={classNames("__wab_instance", sty.asshButton)}
                darkInteractions={"dark"}
                text={(() => {
                  try {
                    return $queries.getHeroContent.data.response.items[0].fields
                      .cta1Text;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                url={(() => {
                  try {
                    return $queries.getHeroContent.data.response.items[0].fields
                      .cta1Link;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "https://www.assh.org";
                    }
                    throw e;
                  }
                })()}
              />
            </Stack__>
          </Stack__>
        </Stack__>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "row",
    "frame2",
    "column",
    "img",
    "frame3",
    "frame4",
    "frame5",
    "asshButton"
  ],

  row: [
    "row",
    "frame2",
    "column",
    "img",
    "frame3",
    "frame4",
    "frame5",
    "asshButton"
  ],

  frame2: [
    "frame2",
    "column",
    "img",
    "frame3",
    "frame4",
    "frame5",
    "asshButton"
  ],

  column: ["column", "img"],
  img: ["img"],
  frame3: ["frame3", "frame4", "frame5", "asshButton"],
  frame4: ["frame4"],
  frame5: ["frame5", "asshButton"],
  asshButton: ["asshButton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSectionHighlightSection__ArgProps,
          internalVariantPropNames: PlasmicSectionHighlightSection__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSectionHighlightSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSectionHighlightSection";
  } else {
    func.displayName = `PlasmicSectionHighlightSection.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionHighlightSection = Object.assign(
  // Top-level PlasmicSectionHighlightSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    row: makeNodeComponent("row"),
    frame2: makeNodeComponent("frame2"),
    column: makeNodeComponent("column"),
    img: makeNodeComponent("img"),
    frame3: makeNodeComponent("frame3"),
    frame4: makeNodeComponent("frame4"),
    frame5: makeNodeComponent("frame5"),
    asshButton: makeNodeComponent("asshButton"),
    // Metadata about props expected for PlasmicSectionHighlightSection
    internalVariantProps: PlasmicSectionHighlightSection__VariantProps,
    internalArgProps: PlasmicSectionHighlightSection__ArgProps
  }
);

export default PlasmicSectionHighlightSection;
/* prettier-ignore-end */
