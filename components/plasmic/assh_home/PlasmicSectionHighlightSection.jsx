/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: yV5r8KM9AbUW
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { useScreenVariants as useScreenVariantsdjBtUr72ZExV } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: DJBtUr72ZExV/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicSectionHighlightSection.module.css"; // plasmic-import: yV5r8KM9AbUW/css
import ContainerIcon from "./icons/PlasmicIcon__Container"; // plasmic-import: LdpaQ2yuf9hP/icon
import Container2Icon from "./icons/PlasmicIcon__Container2"; // plasmic-import: TKWn1DDMMFQp/icon

createPlasmicElementProxy;

export const PlasmicSectionHighlightSection__VariantProps = new Array();

export const PlasmicSectionHighlightSection__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSectionHighlightSection__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsdjBtUr72ZExV()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"row"}
        data-plasmic-override={overrides.row}
        className={classNames(projectcss.all, sty.row)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"frame2"}
          data-plasmic-override={overrides.frame2}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame2)}
        >
          <div
            data-plasmic-name={"column"}
            data-plasmic-override={overrides.column}
            className={classNames(projectcss.all, sty.column)}
          />

          <Stack__
            as={"div"}
            data-plasmic-name={"frame3"}
            data-plasmic-override={overrides.frame3}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame3)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"frame4"}
              data-plasmic-override={overrides.frame4}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame4)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__toxqM
                )}
              >
                {"Test Your Knowledge"}
              </div>
            </Stack__>
            <div
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text__uzl31
              )}
            >
              {
                "Sharpen your skills, prepare for recertification, and stay current \u2014 all on your schedule. The ASSH Self-Assessment Exam is your trusted tool for advancing upper extremity expertise with confidence."
              }
            </div>
            <Stack__
              as={"div"}
              data-plasmic-name={"frame5"}
              data-plasmic-override={overrides.frame5}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame5)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"buttonPrimaryDark"}
                data-plasmic-override={overrides.buttonPrimaryDark}
                hasGap={true}
                className={classNames(projectcss.all, sty.buttonPrimaryDark)}
              >
                {false ? (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"icon12X12"}
                    data-plasmic-override={overrides.icon12X12}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.icon12X12)}
                  >
                    <Stack__
                      as={ContainerIcon}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.svg__eBkg7)}
                      role={"img"}
                    />
                  </Stack__>
                ) : null}
                <div
                  data-plasmic-name={"buttonPrimaryDark2"}
                  data-plasmic-override={overrides.buttonPrimaryDark2}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.buttonPrimaryDark2
                  )}
                >
                  {"Self-Assessment Exams"}
                </div>
                {false ? (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"icon12X122"}
                    data-plasmic-override={overrides.icon12X122}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.icon12X122)}
                  >
                    <Stack__
                      as={Container2Icon}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.svg__pp3Aq)}
                      role={"img"}
                    />
                  </Stack__>
                ) : null}
              </Stack__>
            </Stack__>
          </Stack__>
        </Stack__>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "row",
    "frame2",
    "column",
    "frame3",
    "frame4",
    "frame5",
    "buttonPrimaryDark",
    "icon12X12",
    "buttonPrimaryDark2",
    "icon12X122"
  ],

  row: [
    "row",
    "frame2",
    "column",
    "frame3",
    "frame4",
    "frame5",
    "buttonPrimaryDark",
    "icon12X12",
    "buttonPrimaryDark2",
    "icon12X122"
  ],

  frame2: [
    "frame2",
    "column",
    "frame3",
    "frame4",
    "frame5",
    "buttonPrimaryDark",
    "icon12X12",
    "buttonPrimaryDark2",
    "icon12X122"
  ],

  column: ["column"],
  frame3: [
    "frame3",
    "frame4",
    "frame5",
    "buttonPrimaryDark",
    "icon12X12",
    "buttonPrimaryDark2",
    "icon12X122"
  ],

  frame4: ["frame4"],
  frame5: [
    "frame5",
    "buttonPrimaryDark",
    "icon12X12",
    "buttonPrimaryDark2",
    "icon12X122"
  ],

  buttonPrimaryDark: [
    "buttonPrimaryDark",
    "icon12X12",
    "buttonPrimaryDark2",
    "icon12X122"
  ],

  icon12X12: ["icon12X12"],
  buttonPrimaryDark2: ["buttonPrimaryDark2"],
  icon12X122: ["icon12X122"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSectionHighlightSection__ArgProps,
          internalVariantPropNames: PlasmicSectionHighlightSection__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSectionHighlightSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSectionHighlightSection";
  } else {
    func.displayName = `PlasmicSectionHighlightSection.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionHighlightSection = Object.assign(
  // Top-level PlasmicSectionHighlightSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    row: makeNodeComponent("row"),
    frame2: makeNodeComponent("frame2"),
    column: makeNodeComponent("column"),
    frame3: makeNodeComponent("frame3"),
    frame4: makeNodeComponent("frame4"),
    frame5: makeNodeComponent("frame5"),
    buttonPrimaryDark: makeNodeComponent("buttonPrimaryDark"),
    icon12X12: makeNodeComponent("icon12X12"),
    buttonPrimaryDark2: makeNodeComponent("buttonPrimaryDark2"),
    icon12X122: makeNodeComponent("icon12X122"),
    // Metadata about props expected for PlasmicSectionHighlightSection
    internalVariantProps: PlasmicSectionHighlightSection__VariantProps,
    internalArgProps: PlasmicSectionHighlightSection__ArgProps
  }
);

export default PlasmicSectionHighlightSection;
/* prettier-ignore-end */
