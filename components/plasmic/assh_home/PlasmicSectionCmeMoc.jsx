/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: QQidogip4Svc
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import ComponentSectionTitle from "../../ComponentSectionTitle"; // plasmic-import: jaOmCC9X_Oxf/component
import ComponentLinkOutCard from "../../ComponentLinkOutCard"; // plasmic-import: ie8FiHmZHhtB/component
import ComponentCalloutItem from "../../ComponentCalloutItem"; // plasmic-import: ntQQTfdTjzvC/component
import { useScreenVariants as useScreenVariantsdjBtUr72ZExV } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: DJBtUr72ZExV/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicSectionCmeMoc.module.css"; // plasmic-import: QQidogip4Svc/css

createPlasmicElementProxy;

export const PlasmicSectionCmeMoc__VariantProps = new Array();

export const PlasmicSectionCmeMoc__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSectionCmeMoc__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsdjBtUr72ZExV()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__zvCPt)}>
        <Stack__
          as={"div"}
          data-plasmic-name={"section10"}
          data-plasmic-override={overrides.section10}
          hasGap={true}
          className={classNames(projectcss.all, sty.section10)}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"frame2"}
            data-plasmic-override={overrides.frame2}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame2)}
          >
            <ComponentSectionTitle
              data-plasmic-name={"componentSectionTitle"}
              data-plasmic-override={overrides.componentSectionTitle}
              className={classNames(
                "__wab_instance",
                sty.componentSectionTitle
              )}
              descriptionSection={
                "Continuing medical education (CME)\u00a0and Maintenance of Certification (MOC) are important to help advance the science and practice of hand and upper extremity surgery and reconstructive microsurgery."
              }
              title={"CME & MOC"}
            />
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"frame4"}
            data-plasmic-override={overrides.frame4}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame4)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__yhaLl)}
            >
              <div className={classNames(projectcss.all, sty.column__glO8J)}>
                <ComponentLinkOutCard
                  articleTitle={"Online CME Portal"}
                  className={classNames(
                    "__wab_instance",
                    sty.componentLinkOutCard__u5EqJ
                  )}
                />
              </div>
              <div className={classNames(projectcss.all, sty.column___4IyPy)}>
                <ComponentLinkOutCard
                  articleTitle={"Journal CME Credit Exams"}
                  className={classNames(
                    "__wab_instance",
                    sty.componentLinkOutCard__dQ4IC
                  )}
                  showIcon={false}
                />
              </div>
              <div className={classNames(projectcss.all, sty.column___1MItR)}>
                <ComponentLinkOutCard
                  articleTitle={"Practice Management Webinars"}
                  className={classNames(
                    "__wab_instance",
                    sty.componentLinkOutCard__nacUl
                  )}
                />
              </div>
              <div className={classNames(projectcss.all, sty.column___9NWrO)}>
                <ComponentLinkOutCard
                  articleTitle={"Self-Assessment Practice Exams"}
                  className={classNames(
                    "__wab_instance",
                    sty.componentLinkOutCard__ywiL8
                  )}
                />
              </div>
              <div className={classNames(projectcss.all, sty.column__ugsrT)}>
                <ComponentLinkOutCard
                  articleTitle={"Self-Assessment Bundled Practice Exams"}
                  className={classNames(
                    "__wab_instance",
                    sty.componentLinkOutCard__f3DN2
                  )}
                />
              </div>
              <div className={classNames(projectcss.all, sty.column___7Nqdr)}>
                <ComponentLinkOutCard
                  articleTitle={"Claim CME Credits"}
                  className={classNames(
                    "__wab_instance",
                    sty.componentLinkOutCard__ubCw
                  )}
                />
              </div>
            </Stack__>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"calloutBar"}
            data-plasmic-override={overrides.calloutBar}
            hasGap={true}
            className={classNames(projectcss.all, sty.calloutBar)}
          >
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              {"ASSH Education"}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__hnpaT)}>
              <div className={classNames(projectcss.all, sty.columns__qByit)}>
                <div className={classNames(projectcss.all, sty.column__gaUsS)}>
                  <ComponentCalloutItem
                    className={classNames(
                      "__wab_instance",
                      sty.componentCalloutItem__vbNE
                    )}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.column__jw77J)}>
                  <ComponentCalloutItem
                    className={classNames(
                      "__wab_instance",
                      sty.componentCalloutItem__nWTs5
                    )}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.column__uhdu)}>
                  <ComponentCalloutItem
                    className={classNames(
                      "__wab_instance",
                      sty.componentCalloutItem___3HGo9
                    )}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.column__zOIcY)}>
                  <ComponentCalloutItem
                    className={classNames(
                      "__wab_instance",
                      sty.componentCalloutItem__zQbth
                    )}
                  />
                </div>
              </div>
              <div className={classNames(projectcss.all, sty.columns__bNcsV)}>
                <div className={classNames(projectcss.all, sty.column__ntqNp)}>
                  <ComponentCalloutItem
                    className={classNames(
                      "__wab_instance",
                      sty.componentCalloutItem__ypcOt
                    )}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.column__wAMa)}>
                  <ComponentCalloutItem
                    className={classNames(
                      "__wab_instance",
                      sty.componentCalloutItem__oVla
                    )}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.column__j0Qn6)}>
                  <ComponentCalloutItem
                    className={classNames(
                      "__wab_instance",
                      sty.componentCalloutItem__iJToE
                    )}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.column__i2ID)}>
                  <ComponentCalloutItem
                    className={classNames(
                      "__wab_instance",
                      sty.componentCalloutItem__snu8P
                    )}
                  />
                </div>
              </div>
            </div>
          </Stack__>
        </Stack__>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "section10",
    "frame2",
    "componentSectionTitle",
    "frame4",
    "calloutBar",
    "text"
  ],

  section10: [
    "section10",
    "frame2",
    "componentSectionTitle",
    "frame4",
    "calloutBar",
    "text"
  ],

  frame2: ["frame2", "componentSectionTitle"],
  componentSectionTitle: ["componentSectionTitle"],
  frame4: ["frame4"],
  calloutBar: ["calloutBar", "text"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSectionCmeMoc__ArgProps,
          internalVariantPropNames: PlasmicSectionCmeMoc__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSectionCmeMoc__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSectionCmeMoc";
  } else {
    func.displayName = `PlasmicSectionCmeMoc.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionCmeMoc = Object.assign(
  // Top-level PlasmicSectionCmeMoc renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section10: makeNodeComponent("section10"),
    frame2: makeNodeComponent("frame2"),
    componentSectionTitle: makeNodeComponent("componentSectionTitle"),
    frame4: makeNodeComponent("frame4"),
    calloutBar: makeNodeComponent("calloutBar"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicSectionCmeMoc
    internalVariantProps: PlasmicSectionCmeMoc__VariantProps,
    internalArgProps: PlasmicSectionCmeMoc__ArgProps
  }
);

export default PlasmicSectionCmeMoc;
/* prettier-ignore-end */
