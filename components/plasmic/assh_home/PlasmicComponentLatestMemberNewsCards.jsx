/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: mj20sYUsPblw
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import ComponentSectionTitle from "../../ComponentSectionTitle"; // plasmic-import: jaOmCC9X_Oxf/component
import ComponentArticleCard from "../../ComponentArticleCard"; // plasmic-import: m6xY8jJvNbEQ/component
import AsshButton from "../../AsshButton"; // plasmic-import: -2HqLDJqJBwh/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicComponentLatestMemberNewsCards.module.css"; // plasmic-import: mj20sYUsPblw/css

createPlasmicElementProxy;

export const PlasmicComponentLatestMemberNewsCards__VariantProps = new Array();

export const PlasmicComponentLatestMemberNewsCards__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicComponentLatestMemberNewsCards__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const new$Queries = {
    getLatestMemberNews: usePlasmicDataOp(() => {
      return {
        sourceId: "tbVV8SR67UpQ6Z9zuPcDPB",
        opId: "b55a6c6e-402c-4ba0-b683-67c437478b08",
        userArgs: {},
        cacheKey: `plasmic.$.b55a6c6e-402c-4ba0-b683-67c437478b08.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <ComponentSectionTitle
        data-plasmic-name={"componentSectionTitle"}
        data-plasmic-override={overrides.componentSectionTitle}
        className={classNames("__wab_instance", sty.componentSectionTitle)}
        descriptionSection={``}
        title={"Member News"}
      />

      <Stack__
        as={"div"}
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        hasGap={true}
        className={classNames(projectcss.all, sty.columns)}
      >
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return $queries.getLatestMemberNews.data.response.items;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <div
              data-plasmic-name={"column"}
              data-plasmic-override={overrides.column}
              className={classNames(projectcss.all, sty.column)}
              key={currentIndex}
            >
              <ComponentArticleCard
                data-plasmic-name={"componentArticleCard"}
                data-plasmic-override={overrides.componentArticleCard}
                articleTitle={(() => {
                  try {
                    return currentItem.fields.title;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                className={classNames(
                  "__wab_instance",
                  sty.componentArticleCard
                )}
                description={(() => {
                  try {
                    return currentItem.fields.description;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                heading={(() => {
                  try {
                    return currentItem.fields.source;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                linkUrl={(() => {
                  try {
                    return currentItem.fields.url;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            </div>
          );
        })}
      </Stack__>
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <AsshButton
          data-plasmic-name={"asshButton"}
          data-plasmic-override={overrides.asshButton}
          className={classNames("__wab_instance", sty.asshButton)}
          text={"All Member News"}
          textArrowButton={"link"}
          url={"https://www.assh.org/membership/member-news"}
        />
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "componentSectionTitle",
    "columns",
    "column",
    "componentArticleCard",
    "freeBox",
    "asshButton"
  ],

  componentSectionTitle: ["componentSectionTitle"],
  columns: ["columns", "column", "componentArticleCard"],
  column: ["column", "componentArticleCard"],
  componentArticleCard: ["componentArticleCard"],
  freeBox: ["freeBox", "asshButton"],
  asshButton: ["asshButton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicComponentLatestMemberNewsCards__ArgProps,
          internalVariantPropNames:
            PlasmicComponentLatestMemberNewsCards__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicComponentLatestMemberNewsCards__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicComponentLatestMemberNewsCards";
  } else {
    func.displayName = `PlasmicComponentLatestMemberNewsCards.${nodeName}`;
  }
  return func;
}

export const PlasmicComponentLatestMemberNewsCards = Object.assign(
  // Top-level PlasmicComponentLatestMemberNewsCards renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    componentSectionTitle: makeNodeComponent("componentSectionTitle"),
    columns: makeNodeComponent("columns"),
    column: makeNodeComponent("column"),
    componentArticleCard: makeNodeComponent("componentArticleCard"),
    freeBox: makeNodeComponent("freeBox"),
    asshButton: makeNodeComponent("asshButton"),
    // Metadata about props expected for PlasmicComponentLatestMemberNewsCards
    internalVariantProps: PlasmicComponentLatestMemberNewsCards__VariantProps,
    internalArgProps: PlasmicComponentLatestMemberNewsCards__ArgProps
  }
);

export default PlasmicComponentLatestMemberNewsCards;
/* prettier-ignore-end */
