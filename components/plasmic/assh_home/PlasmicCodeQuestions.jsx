/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: IkPIiLziLHPz
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateStateOnChangeProp,
  generateStateValueProp,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import MenuMegaMenuV2 from "../../MenuMegaMenuV2"; // plasmic-import: mv8TRZhS1g6m/component
import CodingQA from "../../CodingQA"; // plasmic-import: 5lsDz6wBi_P0/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicCodeQuestions.module.css"; // plasmic-import: IkPIiLziLHPz/css

createPlasmicElementProxy;

export const PlasmicCodeQuestions__VariantProps = new Array();

export const PlasmicCodeQuestions__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCodeQuestions__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "asshMenuV2.exploreOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <MenuMegaMenuV2
            data-plasmic-name={"asshMenuV2"}
            data-plasmic-override={overrides.asshMenuV2}
            className={classNames("__wab_instance", sty.asshMenuV2)}
            exploreOpen={generateStateValueProp($state, [
              "asshMenuV2",
              "exploreOpen"
            ])}
            onExploreOpenChange={async (...eventArgs) => {
              generateStateOnChangeProp($state, [
                "asshMenuV2",
                "exploreOpen"
              ]).apply(null, eventArgs);
              if (
                eventArgs.length > 1 &&
                eventArgs[1] &&
                eventArgs[1]._plasmic_state_init_
              ) {
                return;
              }
            }}
          />

          <CodingQA
            data-plasmic-name={"codingQA"}
            data-plasmic-override={overrides.codingQA}
            className={classNames("__wab_instance", sty.codingQa)}
          />
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "asshMenuV2", "codingQA"],
  asshMenuV2: ["asshMenuV2"],
  codingQA: ["codingQA"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCodeQuestions__ArgProps,
          internalVariantPropNames: PlasmicCodeQuestions__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCodeQuestions__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCodeQuestions";
  } else {
    func.displayName = `PlasmicCodeQuestions.${nodeName}`;
  }
  return func;
}

export const PlasmicCodeQuestions = Object.assign(
  // Top-level PlasmicCodeQuestions renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    asshMenuV2: makeNodeComponent("asshMenuV2"),
    codingQA: makeNodeComponent("codingQA"),
    // Metadata about props expected for PlasmicCodeQuestions
    internalVariantProps: PlasmicCodeQuestions__VariantProps,
    internalArgProps: PlasmicCodeQuestions__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicCodeQuestions;
/* prettier-ignore-end */
