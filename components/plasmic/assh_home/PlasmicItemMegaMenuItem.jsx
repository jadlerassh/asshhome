/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: PuojKIT8N0Q4
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { useScreenVariants as useScreenVariantsdjBtUr72ZExV } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: DJBtUr72ZExV/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicItemMegaMenuItem.module.css"; // plasmic-import: PuojKIT8N0Q4/css
import ContainerIcon from "./icons/PlasmicIcon__Container"; // plasmic-import: LdpaQ2yuf9hP/icon
import Container4Icon from "./icons/PlasmicIcon__Container4"; // plasmic-import: aJfVCHtjgUkz/icon

createPlasmicElementProxy;

export const PlasmicItemMegaMenuItem__VariantProps = new Array();

export const PlasmicItemMegaMenuItem__ArgProps = new Array(
  "label",
  "url",
  "showChevron"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicItemMegaMenuItem__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          label: "Label Text",
          url: "https://www.assh.org",
          showChevron: true
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "unnamedGroupOfVariants",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          $props.unnamedGroupOfVariants
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsdjBtUr72ZExV()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"navMenu"}
        data-plasmic-override={overrides.navMenu}
        hasGap={true}
        className={classNames(projectcss.all, sty.navMenu)}
      >
        {false ? (
          <Stack__
            as={"div"}
            data-plasmic-name={"icon12X12"}
            data-plasmic-override={overrides.icon12X12}
            hasGap={true}
            className={classNames(projectcss.all, sty.icon12X12)}
          >
            <Stack__
              as={ContainerIcon}
              hasGap={true}
              className={classNames(projectcss.all, sty.svg__bxIfw)}
              role={"img"}
            />
          </Stack__>
        ) : null}
        <div
          data-plasmic-name={"navigationItem"}
          data-plasmic-override={overrides.navigationItem}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.navigationItem
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.label;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Education";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </div>
        <Stack__
          as={"div"}
          data-plasmic-name={"icon12X122"}
          data-plasmic-override={overrides.icon12X122}
          hasGap={true}
          className={classNames(projectcss.all, sty.icon12X122)}
        >
          {(
            hasVariant(globalVariants, "screen", "mobileOnly")
              ? true
              : (() => {
                  try {
                    return $props.showChevron;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })()
          ) ? (
            <Stack__
              as={Container4Icon}
              hasGap={true}
              className={classNames(projectcss.all, sty.svg__cM8GH)}
              role={"img"}
            />
          ) : null}
        </Stack__>
      </Stack__>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "navMenu", "icon12X12", "navigationItem", "icon12X122"],
  navMenu: ["navMenu", "icon12X12", "navigationItem", "icon12X122"],
  icon12X12: ["icon12X12"],
  navigationItem: ["navigationItem"],
  icon12X122: ["icon12X122"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicItemMegaMenuItem__ArgProps,
          internalVariantPropNames: PlasmicItemMegaMenuItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicItemMegaMenuItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicItemMegaMenuItem";
  } else {
    func.displayName = `PlasmicItemMegaMenuItem.${nodeName}`;
  }
  return func;
}

export const PlasmicItemMegaMenuItem = Object.assign(
  // Top-level PlasmicItemMegaMenuItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    navMenu: makeNodeComponent("navMenu"),
    icon12X12: makeNodeComponent("icon12X12"),
    navigationItem: makeNodeComponent("navigationItem"),
    icon12X122: makeNodeComponent("icon12X122"),
    // Metadata about props expected for PlasmicItemMegaMenuItem
    internalVariantProps: PlasmicItemMegaMenuItem__VariantProps,
    internalArgProps: PlasmicItemMegaMenuItem__ArgProps
  }
);

export default PlasmicItemMegaMenuItem;
/* prettier-ignore-end */
