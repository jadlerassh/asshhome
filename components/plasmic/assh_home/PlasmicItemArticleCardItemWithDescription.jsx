/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: m6xY8jJvNbEQ
import * as React from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { useScreenVariants as useScreenVariantsdjBtUr72ZExV } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: DJBtUr72ZExV/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicItemArticleCardItemWithDescription.module.css"; // plasmic-import: m6xY8jJvNbEQ/css

createPlasmicElementProxy;

export const PlasmicItemArticleCardItemWithDescription__VariantProps =
  new Array();

export const PlasmicItemArticleCardItemWithDescription__ArgProps = new Array(
  "heading",
  "articleTitle",
  "linkUrl",
  "description",
  "imageId"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicItemArticleCardItemWithDescription__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          heading: "Heading",
          articleTitle: "Article Title",
          linkUrl: "https://www.assh.org",
          description:
            "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. "
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const new$Queries = {
    getImage: usePlasmicDataOp(() => {
      return {
        sourceId: "n5sYZavh6xkK4D8BEueUSq",
        opId: "0c2afc0b-6aa8-47c9-b10b-6228850bafaf",
        userArgs: {
          path: [$props.imageId]
        },
        cacheKey: `plasmic.$.0c2afc0b-6aa8-47c9-b10b-6228850bafaf.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsdjBtUr72ZExV()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <PlasmicLink__
        data-plasmic-name={"interactionsHover"}
        data-plasmic-override={overrides.interactionsHover}
        className={classNames(
          projectcss.all,
          projectcss.a,
          sty.interactionsHover
        )}
        component={Link}
        href={(() => {
          try {
            return $props.linkUrl;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return undefined;
            }
            throw e;
          }
        })()}
        platform={"nextjs"}
      >
        {(
          hasVariant(globalVariants, "screen", "largeDesktop")
            ? (() => {
                try {
                  return $props.imageId === undefined;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
            : (() => {
                try {
                  return $props.imageId === undefined;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })()
        ) ? (
          <Stack__
            as={"div"}
            data-plasmic-name={"content"}
            data-plasmic-override={overrides.content}
            hasGap={true}
            className={classNames(projectcss.all, sty.content)}
          >
            {(() => {
              try {
                return $props.heading !== undefined;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Stack__
                as={"div"}
                data-plasmic-name={"category"}
                data-plasmic-override={overrides.category}
                hasGap={true}
                className={classNames(projectcss.all, sty.category)}
              >
                <div
                  data-plasmic-name={"label"}
                  data-plasmic-override={overrides.label}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.label
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.heading;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Advocacy";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </Stack__>
            ) : null}
            {(() => {
              try {
                return $props.articleTitle !== undefined;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Stack__
                as={"div"}
                data-plasmic-name={"content2"}
                data-plasmic-override={overrides.content2}
                hasGap={true}
                className={classNames(projectcss.all, sty.content2)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__oimki
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.articleTitle;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Article Title";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </Stack__>
            ) : null}
            {(() => {
              try {
                return $props.description !== undefined;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <Stack__
                as={"div"}
                data-plasmic-name={"content3"}
                data-plasmic-override={overrides.content3}
                hasGap={true}
                className={classNames(projectcss.all, sty.content3)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ktlV
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.description;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Article Title";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </Stack__>
            ) : null}
          </Stack__>
        ) : null}
        {(() => {
          try {
            return $props.imageId !== undefined;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            <Embed
              data-plasmic-name={"embedHtml"}
              data-plasmic-override={overrides.embedHtml}
              className={classNames("__wab_instance", sty.embedHtml)}
              code={(() => {
                try {
                  return (() => {
                    return `<div style="
  width: 100%;
  height: 100%;
  background-image: url(${$queries.getImage.data.response.fields.file.url});
  background-size: cover;
  background-position: center;
  background-repeat: no-repeat;
"></div>`;
                  })();
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            />
          </div>
        ) : null}
      </PlasmicLink__>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "interactionsHover",
    "content",
    "category",
    "label",
    "content2",
    "content3",
    "freeBox",
    "embedHtml"
  ],

  interactionsHover: [
    "interactionsHover",
    "content",
    "category",
    "label",
    "content2",
    "content3",
    "freeBox",
    "embedHtml"
  ],

  content: ["content", "category", "label", "content2", "content3"],
  category: ["category", "label"],
  label: ["label"],
  content2: ["content2"],
  content3: ["content3"],
  freeBox: ["freeBox", "embedHtml"],
  embedHtml: ["embedHtml"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames:
            PlasmicItemArticleCardItemWithDescription__ArgProps,
          internalVariantPropNames:
            PlasmicItemArticleCardItemWithDescription__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicItemArticleCardItemWithDescription__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicItemArticleCardItemWithDescription";
  } else {
    func.displayName = `PlasmicItemArticleCardItemWithDescription.${nodeName}`;
  }
  return func;
}

export const PlasmicItemArticleCardItemWithDescription = Object.assign(
  // Top-level PlasmicItemArticleCardItemWithDescription renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    interactionsHover: makeNodeComponent("interactionsHover"),
    content: makeNodeComponent("content"),
    category: makeNodeComponent("category"),
    label: makeNodeComponent("label"),
    content2: makeNodeComponent("content2"),
    content3: makeNodeComponent("content3"),
    freeBox: makeNodeComponent("freeBox"),
    embedHtml: makeNodeComponent("embedHtml"),
    // Metadata about props expected for PlasmicItemArticleCardItemWithDescription
    internalVariantProps:
      PlasmicItemArticleCardItemWithDescription__VariantProps,
    internalArgProps: PlasmicItemArticleCardItemWithDescription__ArgProps
  }
);

export default PlasmicItemArticleCardItemWithDescription;
/* prettier-ignore-end */
