/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: rK90PZBlpTXX
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import SectionAsshHomeMenu from "../../SectionAsshHomeMenu"; // plasmic-import: HrBwnQh3XfKO/component
import SectionTitleBar2 from "../../SectionTitleBar2"; // plasmic-import: xL1xlGlXhY87/component
import ComponentSectionTitle from "../../ComponentSectionTitle"; // plasmic-import: jaOmCC9X_Oxf/component
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicMembershipOverview.module.css"; // plasmic-import: rK90PZBlpTXX/css

createPlasmicElementProxy;

export const PlasmicMembershipOverview__VariantProps = new Array();

export const PlasmicMembershipOverview__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMembershipOverview__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const new$Queries = {
    getHtmlContent: usePlasmicDataOp(() => {
      return {
        sourceId: "tbVV8SR67UpQ6Z9zuPcDPB",
        opId: "1c149615-f3df-47e2-bfa6-e4016f34f365",
        userArgs: {},
        cacheKey: `plasmic.$.1c149615-f3df-47e2-bfa6-e4016f34f365.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">
          {PlasmicMembershipOverview.pageMetadata.title}
        </title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicMembershipOverview.pageMetadata.title}
        />

        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicMembershipOverview.pageMetadata.title}
        />

        <meta
          key="description"
          name="description"
          content={PlasmicMembershipOverview.pageMetadata.description}
        />

        <meta
          key="og:description"
          property="og:description"
          content={PlasmicMembershipOverview.pageMetadata.description}
        />

        <meta
          key="twitter:description"
          name="twitter:description"
          content={PlasmicMembershipOverview.pageMetadata.description}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <SectionAsshHomeMenu
            data-plasmic-name={"sectionAsshHomeMenu"}
            data-plasmic-override={overrides.sectionAsshHomeMenu}
            className={classNames("__wab_instance", sty.sectionAsshHomeMenu)}
          />

          <SectionTitleBar2
            data-plasmic-name={"sectionTitleBar2"}
            data-plasmic-override={overrides.sectionTitleBar2}
            className={classNames("__wab_instance", sty.sectionTitleBar2)}
          />

          <ComponentSectionTitle
            data-plasmic-name={"componentSectionTitle"}
            data-plasmic-override={overrides.componentSectionTitle}
            className={classNames("__wab_instance", sty.componentSectionTitle)}
            descriptionSection={``}
            title={"Why Join ASSH?"}
          />

          <div
            data-plasmic-name={"freeBox"}
            data-plasmic-override={overrides.freeBox}
            className={classNames(projectcss.all, sty.freeBox)}
          >
            {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
              (() => {
                try {
                  return $queries.getHtmlContent.data.response.items.find(
                    item =>
                      item.fields.title ===
                      "Membership Overview - Why Join ASSH?"
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return [];
                  }
                  throw e;
                }
              })()
            ).map((__plasmic_item_0, __plasmic_idx_0) => {
              const currentItem = __plasmic_item_0;
              const currentIndex = __plasmic_idx_0;
              return (
                <Embed
                  data-plasmic-name={"embedHtml"}
                  data-plasmic-override={overrides.embedHtml}
                  className={classNames("__wab_instance", sty.embedHtml)}
                  code={(() => {
                    try {
                      return currentItem.fields.bodyContent;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "<div>Paste your embed code via the right sidebar</div>";
                      }
                      throw e;
                    }
                  })()}
                  key={currentIndex}
                />
              );
            })}
            <div
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              className={classNames(projectcss.all, sty.columns)}
            >
              <div className={classNames(projectcss.all, sty.column__j7Tpu)} />
              <div className={classNames(projectcss.all, sty.column__i0Ejc)} />
              <div className={classNames(projectcss.all, sty.column__nqpw8)} />
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "sectionAsshHomeMenu",
    "sectionTitleBar2",
    "componentSectionTitle",
    "freeBox",
    "embedHtml",
    "columns"
  ],

  sectionAsshHomeMenu: ["sectionAsshHomeMenu"],
  sectionTitleBar2: ["sectionTitleBar2"],
  componentSectionTitle: ["componentSectionTitle"],
  freeBox: ["freeBox", "embedHtml", "columns"],
  embedHtml: ["embedHtml"],
  columns: ["columns"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMembershipOverview__ArgProps,
          internalVariantPropNames: PlasmicMembershipOverview__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMembershipOverview__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMembershipOverview";
  } else {
    func.displayName = `PlasmicMembershipOverview.${nodeName}`;
  }
  return func;
}

export const PlasmicMembershipOverview = Object.assign(
  // Top-level PlasmicMembershipOverview renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    sectionAsshHomeMenu: makeNodeComponent("sectionAsshHomeMenu"),
    sectionTitleBar2: makeNodeComponent("sectionTitleBar2"),
    componentSectionTitle: makeNodeComponent("componentSectionTitle"),
    freeBox: makeNodeComponent("freeBox"),
    embedHtml: makeNodeComponent("embedHtml"),
    columns: makeNodeComponent("columns"),
    // Metadata about props expected for PlasmicMembershipOverview
    internalVariantProps: PlasmicMembershipOverview__VariantProps,
    internalArgProps: PlasmicMembershipOverview__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "Membership Overview",
      description: "Membership Overview",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicMembershipOverview;
/* prettier-ignore-end */
