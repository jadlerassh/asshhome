/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: xL1xlGlXhY87
import * as React from "react";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import AsshButton from "../../AsshButton"; // plasmic-import: -2HqLDJqJBwh/component
import { useScreenVariants as useScreenVariantsdjBtUr72ZExV } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: DJBtUr72ZExV/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicSectionTitleBar2.module.css"; // plasmic-import: xL1xlGlXhY87/css

createPlasmicElementProxy;

export const PlasmicSectionTitleBar2__VariantProps = new Array();

export const PlasmicSectionTitleBar2__ArgProps = new Array("title");

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSectionTitleBar2__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          title: "Membership Overview - Title Card"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const new$Queries = {
    getImage: usePlasmicDataOp(() => {
      return {
        sourceId: "n5sYZavh6xkK4D8BEueUSq",
        opId: "0c2afc0b-6aa8-47c9-b10b-6228850bafaf",
        userArgs: {
          path: [
            $queries.getHeroContent.data.response.items[0].fields
              .backgroundImage.sys.id
          ]
        },
        cacheKey: `plasmic.$.0c2afc0b-6aa8-47c9-b10b-6228850bafaf.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getHeroContent: usePlasmicDataOp(() => {
      return {
        sourceId: "tbVV8SR67UpQ6Z9zuPcDPB",
        opId: "84ab1dbe-22a0-4ab0-b1ff-3bd83c164121",
        userArgs: {
          params: [$props.title]
        },
        cacheKey: `plasmic.$.84ab1dbe-22a0-4ab0-b1ff-3bd83c164121.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsdjBtUr72ZExV()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__eYdXb)}>
        <div className={classNames(projectcss.all, sty.freeBox__ay6Qh)}>
          <div className={classNames(projectcss.all, sty.freeBox__pUzSn)}>
            <Stack__
              as={"div"}
              data-plasmic-name={"frame9"}
              data-plasmic-override={overrides.frame9}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame9)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"frame10"}
                data-plasmic-override={overrides.frame10}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame10)}
              >
                {(() => {
                  try {
                    return (
                      $queries.getHeroContent.data.response.items[0].fields
                        .header !== undefined
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    data-plasmic-name={"educationCme3"}
                    data-plasmic-override={overrides.educationCme3}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.educationCme3
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $queries.getHeroContent.data.response.items[0]
                            .fields.header;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Education & CME ";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                ) : null}
                {(() => {
                  try {
                    return (
                      $queries.getHeroContent.data.response.items[0].fields
                        .subheader !== undefined
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kYkY2
                    )}
                  >
                    <React.Fragment>
                      {(() => {
                        try {
                          return $queries.getHeroContent.data.response.items[0]
                            .fields.subheader;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return "Advance Your Expertise in Hand and Upper Extremity Surgery";
                          }
                          throw e;
                        }
                      })()}
                    </React.Fragment>
                  </div>
                ) : null}
              </Stack__>
              {(() => {
                try {
                  return (
                    $queries.getHeroContent.data.response.items[0].fields
                      .description !== undefined
                  );
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__bUc8F
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $queries.getHeroContent.data.response.items[0]
                          .fields.description;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "ASSH delivers trusted education for every stage of your career from board prep to advanced surgical techniques. All created by leaders in the field.";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              ) : null}
              <Stack__
                as={"div"}
                data-plasmic-name={"frame11"}
                data-plasmic-override={overrides.frame11}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame11)}
              >
                {(() => {
                  try {
                    return (
                      $queries.getHeroContent.data.response.items[0].fields
                        .cta1Text !== undefined
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <AsshButton
                    className={classNames(
                      "__wab_instance",
                      sty.asshButton__zoHdB
                    )}
                    darkInteractions={"dark"}
                    text={(() => {
                      try {
                        return $queries.getHeroContent.data.response.items[0]
                          .fields.cta1Text;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    url={(() => {
                      try {
                        return $queries.getHeroContent.data.response.items[0]
                          .fields.cta1Link;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  />
                ) : null}
                {(() => {
                  try {
                    return (
                      $queries.getHeroContent.data.response.items[0].fields
                        .cta2Text !== undefined
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return true;
                    }
                    throw e;
                  }
                })() ? (
                  <AsshButton
                    className={classNames(
                      "__wab_instance",
                      sty.asshButton__rrXv
                    )}
                    darkInteractions={"dark"}
                    text={(() => {
                      try {
                        return $queries.getHeroContent.data.response.items[0]
                          .fields.cta2Text;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    url={(() => {
                      try {
                        return $queries.getHeroContent.data.response.items[0]
                          .fields.cta2Link;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  />
                ) : null}
              </Stack__>
            </Stack__>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__iJaPm)}>
            <PlasmicImg__
              data-plasmic-name={"img"}
              data-plasmic-override={overrides.img}
              alt={""}
              className={classNames(sty.img)}
              displayHeight={
                hasVariant(globalVariants, "screen", "largeDesktop")
                  ? "100%"
                  : "100%"
              }
              displayMaxHeight={"none"}
              displayMaxWidth={"none"}
              displayMinHeight={"0"}
              displayMinWidth={"0"}
              displayWidth={"100%"}
              loading={"eager"}
              src={{
                src: "/plasmic/assh_home/images/column3.jpg",
                fullWidth: 4096,
                fullHeight: 2633,
                aspectRatio: undefined
              }}
            />
          </div>
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "frame9", "frame10", "educationCme3", "frame11", "img"],
  frame9: ["frame9", "frame10", "educationCme3", "frame11"],
  frame10: ["frame10", "educationCme3"],
  educationCme3: ["educationCme3"],
  frame11: ["frame11"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSectionTitleBar2__ArgProps,
          internalVariantPropNames: PlasmicSectionTitleBar2__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSectionTitleBar2__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSectionTitleBar2";
  } else {
    func.displayName = `PlasmicSectionTitleBar2.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionTitleBar2 = Object.assign(
  // Top-level PlasmicSectionTitleBar2 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    frame9: makeNodeComponent("frame9"),
    frame10: makeNodeComponent("frame10"),
    educationCme3: makeNodeComponent("educationCme3"),
    frame11: makeNodeComponent("frame11"),
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicSectionTitleBar2
    internalVariantProps: PlasmicSectionTitleBar2__VariantProps,
    internalArgProps: PlasmicSectionTitleBar2__ArgProps
  }
);

export default PlasmicSectionTitleBar2;
/* prettier-ignore-end */
