/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: 5lsDz6wBi_P0
import * as React from "react";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicCodingQA.module.css"; // plasmic-import: 5lsDz6wBi_P0/css

createPlasmicElementProxy;

export const PlasmicCodingQA__VariantProps = new Array();

export const PlasmicCodingQA__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCodingQA__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <Embed
        data-plasmic-name={"embedHtml"}
        data-plasmic-override={overrides.embedHtml}
        className={classNames("__wab_instance", sty.embedHtml)}
        code={
          '<!DOCTYPE html>\r\n<html lang="en">\r\n  <head>\r\n    <meta charset="UTF-8" />\r\n    <title>Algolia Search with Filters + Highlighting</title>\r\n\r\n    <!-- Algolia InstantSearch CSS -->\r\n    <link\r\n      rel="stylesheet"\r\n      href="https://cdn.jsdelivr.net/npm/instantsearch.css@8/themes/satellite-min.css"\r\n    />\r\n\r\n    <style>\r\n      body {\r\n        font-family: sans-serif;\r\n        margin: 0;\r\n        padding: 0;\r\n      }\r\n\r\n      .container {\r\n        display: grid;\r\n        grid-template-columns: 250px 1fr;\r\n        height: 100vh;\r\n      }\r\n\r\n      .sidebar {\r\n        border-right: 1px solid #ddd;\r\n        padding: 1rem;\r\n        background-color: #f9f9f9;\r\n        overflow-y: auto;\r\n      }\r\n\r\n      .content {\r\n        padding: 1rem 2rem;\r\n        overflow-y: auto;\r\n      }\r\n\r\n      .ais-SearchBox {\r\n        margin-bottom: 1rem;\r\n      }\r\n\r\n      .pill {\r\n        display: inline-block;\r\n        padding: 4px 8px;\r\n        margin: 2px;\r\n        background-color: #e0e0e0;\r\n        border-radius: 999px;\r\n        font-size: 0.75rem;\r\n      }\r\n\r\n      .hit {\r\n        padding: 1rem;\r\n        border-bottom: 1px solid #ccc;\r\n      }\r\n\r\n      .hit h3 {\r\n        margin: 0 0 0.5rem;\r\n        font-size: 1.1rem;\r\n      }\r\n\r\n      .hit p {\r\n        margin: 0 0 0.5rem;\r\n        font-size: 0.95rem;\r\n      }\r\n\r\n      .keywords {\r\n        margin-top: 0.5rem;\r\n      }\r\n\r\n      h2.sidebar-title {\r\n        font-size: 1rem;\r\n        margin-top: 0;\r\n      }\r\n\r\n      mark.ais-Highlight-highlighted {\r\n        background: #ffe58a;\r\n        padding: 0 2px;\r\n      }\r\n    </style>\r\n  </head>\r\n\r\n  <body>\r\n    <div class="container">\r\n      <!-- Left Sidebar -->\r\n      <div class="sidebar">\r\n        <h2 class="sidebar-title">Filter by Keyword</h2>\r\n        <div id="keyword-refinement"></div>\r\n      </div>\r\n\r\n      <!-- Main Content -->\r\n      <div class="content">\r\n        <h1>Search Questions</h1>\r\n        <div id="searchbox"></div>\r\n        <div id="hits"></div>\r\n      </div>\r\n    </div>\r\n\r\n    <!-- Scripts -->\r\n    <script src="https://cdn.jsdelivr.net/npm/algoliasearch@4.19.1/dist/algoliasearch-lite.umd.js"></script>\r\n    <script src="https://cdn.jsdelivr.net/npm/instantsearch.js@4.56.1/dist/instantsearch.production.min.js"></script>\r\n    <script>\r\n      const { highlight } = instantsearch;\r\n\r\n      const searchClient = algoliasearch(\r\n        "IM7NJD640Q",\r\n        "b2961672b9317c93bd83417c200250b9"\r\n      );\r\n\r\n      const search = instantsearch({\r\n        indexName: "prod_questions",\r\n        searchClient,\r\n      });\r\n\r\n      search.addWidgets([\r\n        instantsearch.widgets.searchBox({\r\n          container: "#searchbox",\r\n          placeholder: "Search questions...",\r\n        }),\r\n        instantsearch.widgets.refinementList({\r\n          container: "#keyword-refinement",\r\n          attribute: "keywords",\r\n          searchable: false,\r\n          limit: 20,\r\n        }),\r\n        instantsearch.widgets.hits({\r\n          container: "#hits",\r\n          templates: {\r\n            item(hit) {\r\n              const question = highlight({ attribute: "question", hit });\r\n              const answer = highlight({ attribute: "answer", hit });\r\n              const keywords =\r\n                hit.keywords && Array.isArray(hit.keywords)\r\n                  ? hit.keywords\r\n                      .map((kw) => `<span class="pill">${kw}</span>`)\r\n                      .join(" ")\r\n                  : "";\r\n\r\n              return `\r\n                <div class="hit">\r\n                  <h3>${question}</h3>\r\n                  <p>${answer}</p>\r\n                  <div class="keywords">${keywords}</div>\r\n                </div>\r\n              `;\r\n            },\r\n          },\r\n        }),\r\n      ]);\r\n\r\n      search.start();\r\n    </script>\r\n  </body>\r\n</html>\r\n'
        }
      />
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "embedHtml"],
  embedHtml: ["embedHtml"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCodingQA__ArgProps,
          internalVariantPropNames: PlasmicCodingQA__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCodingQA__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicCodingQA";
  } else {
    func.displayName = `PlasmicCodingQA.${nodeName}`;
  }
  return func;
}

export const PlasmicCodingQA = Object.assign(
  // Top-level PlasmicCodingQA renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    embedHtml: makeNodeComponent("embedHtml"),
    // Metadata about props expected for PlasmicCodingQA
    internalVariantProps: PlasmicCodingQA__VariantProps,
    internalArgProps: PlasmicCodingQA__ArgProps
  }
);

export default PlasmicCodingQA;
/* prettier-ignore-end */
