/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: FGT9utqXA6R0
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: -2HqLDJqJBwh/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicComponentMembershipQuicklinks.module.css"; // plasmic-import: FGT9utqXA6R0/css

createPlasmicElementProxy;

export const PlasmicComponentMembershipQuicklinks__VariantProps = new Array();

export const PlasmicComponentMembershipQuicklinks__ArgProps = new Array("name");

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicComponentMembershipQuicklinks__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          name: "Member Quicklinks"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "subLinks",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) => []
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    getQuickLinks: usePlasmicDataOp(() => {
      return {
        sourceId: "tbVV8SR67UpQ6Z9zuPcDPB",
        opId: "8ccb4a92-fc97-4264-9e5a-7410c4d0f0f2",
        userArgs: {
          params: [$props.name]
        },
        cacheKey: `plasmic.$.8ccb4a92-fc97-4264-9e5a-7410c4d0f0f2.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox___8Fx4)}>
        <Stack__
          as={"div"}
          data-plasmic-name={"section"}
          data-plasmic-override={overrides.section}
          hasGap={true}
          className={classNames(projectcss.all, sty.section)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__jtUn6)}>
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $queries.getQuickLinks.data.response.items[0].fields
                      .label;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___4PUrY)}>
              <div
                data-plasmic-name={"columns"}
                data-plasmic-override={overrides.columns}
                className={classNames(projectcss.all, sty.columns)}
              >
                <div className={classNames(projectcss.all, sty.column__cotVi)}>
                  <ButtonPrimary
                    className={classNames(
                      "__wab_instance",
                      sty.buttonPrimary__qqb17
                    )}
                    darkNoBgInteractions={[]}
                    memberQuicklinks={"quicklink"}
                    text={"Button Text"}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.column__uzIZd)}>
                  <ButtonPrimary
                    className={classNames(
                      "__wab_instance",
                      sty.buttonPrimary__gzEZa
                    )}
                    memberQuicklinks={"quicklink"}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.column__a0IF)}>
                  <ButtonPrimary
                    className={classNames(
                      "__wab_instance",
                      sty.buttonPrimary___0EkSk
                    )}
                    memberQuicklinks={"quicklink"}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.column__pYpiY)}>
                  <ButtonPrimary
                    className={classNames(
                      "__wab_instance",
                      sty.buttonPrimary__loQUh
                    )}
                    memberQuicklinks={"quicklink"}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.column__eZ5FD)}>
                  <ButtonPrimary
                    className={classNames(
                      "__wab_instance",
                      sty.buttonPrimary__nCsLv
                    )}
                    memberQuicklinks={"quicklink"}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.column__uQqkP)}>
                  <ButtonPrimary
                    className={classNames(
                      "__wab_instance",
                      sty.buttonPrimary___3Rpq1
                    )}
                    memberQuicklinks={"quicklink"}
                  />
                </div>
              </div>
            </div>
          </div>
        </Stack__>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "section", "text", "columns"],
  section: ["section", "text", "columns"],
  text: ["text"],
  columns: ["columns"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicComponentMembershipQuicklinks__ArgProps,
          internalVariantPropNames:
            PlasmicComponentMembershipQuicklinks__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicComponentMembershipQuicklinks__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicComponentMembershipQuicklinks";
  } else {
    func.displayName = `PlasmicComponentMembershipQuicklinks.${nodeName}`;
  }
  return func;
}

export const PlasmicComponentMembershipQuicklinks = Object.assign(
  // Top-level PlasmicComponentMembershipQuicklinks renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section: makeNodeComponent("section"),
    text: makeNodeComponent("text"),
    columns: makeNodeComponent("columns"),
    // Metadata about props expected for PlasmicComponentMembershipQuicklinks
    internalVariantProps: PlasmicComponentMembershipQuicklinks__VariantProps,
    internalArgProps: PlasmicComponentMembershipQuicklinks__ArgProps
  }
);

export default PlasmicComponentMembershipQuicklinks;
/* prettier-ignore-end */
