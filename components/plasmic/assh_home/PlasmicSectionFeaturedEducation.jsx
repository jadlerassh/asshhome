/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: yRPTvlAZWP7M
import * as React from "react";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import ItemBackgroundImage from "../../ItemBackgroundImage"; // plasmic-import: S10MkWO4JPIS/component
import ItemImageWithText from "../../ItemImageWithText"; // plasmic-import: ugEjS8u4W4nq/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicSectionFeaturedEducation.module.css"; // plasmic-import: yRPTvlAZWP7M/css

createPlasmicElementProxy;

export const PlasmicSectionFeaturedEducation__VariantProps = new Array();

export const PlasmicSectionFeaturedEducation__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSectionFeaturedEducation__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const new$Queries = {
    getInfo: usePlasmicDataOp(() => {
      return {
        sourceId: "tbVV8SR67UpQ6Z9zuPcDPB",
        opId: "d73bdb43-3254-4204-be17-676d95c9b4eb",
        userArgs: {},
        cacheKey: `plasmic.$.d73bdb43-3254-4204-be17-676d95c9b4eb.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.columns__bdLL)}>
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return $queries.getInfo.data.response.items.filter(
                link => link.fields.featuredItemPriority == "Primary"
              );
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <div
              className={classNames(projectcss.all, sty.column__yJsA)}
              key={currentIndex}
            >
              <ItemBackgroundImage
                data-plasmic-name={"itemBackgroundImage"}
                data-plasmic-override={overrides.itemBackgroundImage}
                className={classNames(
                  "__wab_instance",
                  sty.itemBackgroundImage
                )}
                imageAssetId={(() => {
                  try {
                    return currentItem.fields.thumb.sys.id;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />

              <div className={classNames(projectcss.all, sty.freeBox__tsc7)}>
                <div className={classNames(projectcss.all, sty.columns__kHaet)}>
                  <div
                    className={classNames(projectcss.all, sty.column__afDng)}
                  />
                </div>
              </div>
            </div>
          );
        })}
        <div className={classNames(projectcss.all, sty.column__ja3Rc)}>
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $queries.getInfo.data.response.items;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <div
                className={classNames(projectcss.all, sty.freeBox__bq4B8)}
                key={currentIndex}
              >
                <ItemImageWithText
                  data-plasmic-name={"itemImageWithText"}
                  data-plasmic-override={overrides.itemImageWithText}
                  className={classNames(
                    "__wab_instance",
                    sty.itemImageWithText
                  )}
                  heading={"Heading"}
                  imageAssetId={(() => {
                    try {
                      return currentItem.fields.thumb.sys.id;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  title={`Title${currentItem.fields.title}`}
                />
              </div>
            );
          })}
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "itemBackgroundImage", "itemImageWithText"],
  itemBackgroundImage: ["itemBackgroundImage"],
  itemImageWithText: ["itemImageWithText"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSectionFeaturedEducation__ArgProps,
          internalVariantPropNames:
            PlasmicSectionFeaturedEducation__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSectionFeaturedEducation__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSectionFeaturedEducation";
  } else {
    func.displayName = `PlasmicSectionFeaturedEducation.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionFeaturedEducation = Object.assign(
  // Top-level PlasmicSectionFeaturedEducation renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    itemBackgroundImage: makeNodeComponent("itemBackgroundImage"),
    itemImageWithText: makeNodeComponent("itemImageWithText"),
    // Metadata about props expected for PlasmicSectionFeaturedEducation
    internalVariantProps: PlasmicSectionFeaturedEducation__VariantProps,
    internalArgProps: PlasmicSectionFeaturedEducation__ArgProps
  }
);

export default PlasmicSectionFeaturedEducation;
/* prettier-ignore-end */
