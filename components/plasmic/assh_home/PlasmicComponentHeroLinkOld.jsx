/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: 4D_-oe1r0Jy9
import * as React from "react";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  useDollarState,
  useTrigger
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicComponentHeroLinkOld.module.css"; // plasmic-import: 4D_-oe1r0Jy9/css

createPlasmicElementProxy;

export const PlasmicComponentHeroLinkOld__VariantProps = new Array(
  "first2",
  "last2"
);

export const PlasmicComponentHeroLinkOld__ArgProps = new Array(
  "entryId",
  "highlightColor"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicComponentHeroLinkOld__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          entryId: "4YzzCgW0uFvYyNIOEE3ys0",
          highlightColor: "var(--token-YOr-x91EUcQe)"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "first2",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.first2
      },
      {
        path: "last2",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.last2
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    getImage: usePlasmicDataOp(() => {
      return {
        sourceId: "n5sYZavh6xkK4D8BEueUSq",
        opId: "0c2afc0b-6aa8-47c9-b10b-6228850bafaf",
        userArgs: {
          path: [$queries.getEntryById.data.response.fields.thumb.sys.id]
        },
        cacheKey: `plasmic.$.0c2afc0b-6aa8-47c9-b10b-6228850bafaf.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getEntryById: usePlasmicDataOp(() => {
      return {
        sourceId: "tbVV8SR67UpQ6Z9zuPcDPB",
        opId: "43909f02-9a91-4a3a-9a2b-1184e3c6a129",
        userArgs: {
          path: [$props.entryId]
        },
        cacheKey: `plasmic.$.43909f02-9a91-4a3a-9a2b-1184e3c6a129.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  const [isRootHover, triggerRootHoverProps] = useTrigger("useHover", {});
  const triggers = {
    hover_root: isRootHover
  };
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootfirst2_first]: hasVariant($state, "first2", "first"),
          [sty.rootlast2_last]: hasVariant($state, "last2", "last")
        }
      )}
      data-plasmic-trigger-props={[triggerRootHoverProps]}
    >
      <Embed
        data-plasmic-name={"embedHtml"}
        data-plasmic-override={overrides.embedHtml}
        className={classNames("__wab_instance", sty.embedHtml, {
          [sty.embedHtmlfirst2_first]: hasVariant($state, "first2", "first"),
          [sty.embedHtmllast2_last]: hasVariant($state, "last2", "last")
        })}
        code={
          triggers.hover_root
            ? (() => {
                try {
                  return `<div class="heroLinkWrapper" style="border-top-left-radius: 10px; border-top-right-radius: 10px; border-bottom: 15px solid ${$props.highlightColor}">
  <div class="heroLinkButton">
    ${$queries.getEntryById.data.response.fields.label}
  </div>
  <div class="heroLinkIcon" style="--hero-bg-color: ${$props.highlightColor}">
    <div class="heroLinkIconBg heroLinkIconBgHover"></div>
    <svg xmlns="http://www.w3.org/2000/svg" class="heroLinkIconSVG" viewBox="0 0 16 16" height="1em" role="img">
      <path style="fill: #fff" d="M11.642 8.33L5.71 14.261a.732.732 0 01-1.036 0l-.692-.691a.732.732 0 010-1.035l4.7-4.723-4.7-4.722a.732.732 0 010-1.035l.692-.691a.732.732 0 011.036 0l5.93 5.93a.732.732 0 010 1.036z"></path>
    </svg>
  </div>
</div>`;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()
            : hasVariant($state, "last2", "last")
            ? (() => {
                try {
                  return `<div class="heroLinkWrapper" style="border-radius: 0px 10px 10px 0px;">
	  <div class="heroLinkButton">
		${$queries.getEntryById.data.response.fields.label}
	  </div>
	  <div class="heroLinkIcon" style="--hero-bg-color: ${$props.highlightColor}">
		<div class="heroLinkIconBg"></div>
		<svg xmlns="http://www.w3.org/2000/svg" class="heroLinkIconSVG" viewBox="0 0 16 16" height="1em" role="img">
		  <path style="fill: ${$props.highlightColor}" d="M11.642 8.33L5.71 14.261a.732.732 0 01-1.036 0l-.692-.691a.732.732 0 010-1.035l4.7-4.723-4.7-4.722a.732.732 0 010-1.035l.692-.691a.732.732 0 011.036 0l5.93 5.93a.732.732 0 010 1.036z"></path>
		</svg>
	  </div>
	</div>`;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()
            : hasVariant($state, "first2", "first")
            ? (() => {
                try {
                  return `<div class="heroLinkWrapper" style="border-radius: 10px 0px 0px 10px;">
	  <div class="heroLinkButton">
		${$queries.getEntryById.data.response.fields.label}
	  </div>
	  <div class="heroLinkIcon" style="--hero-bg-color: ${$props.highlightColor}">
		<div class="heroLinkIconBg"></div>
		<svg xmlns="http://www.w3.org/2000/svg" class="heroLinkIconSVG" viewBox="0 0 16 16" height="1em" role="img">
		  <path style="fill: ${$props.highlightColor}" d="M11.642 8.33L5.71 14.261a.732.732 0 01-1.036 0l-.692-.691a.732.732 0 010-1.035l4.7-4.723-4.7-4.722a.732.732 0 010-1.035l.692-.691a.732.732 0 011.036 0l5.93 5.93a.732.732 0 010 1.036z"></path>
		</svg>
	  </div>
	</div>`;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()
            : (() => {
                try {
                  return `<div class="heroLinkWrapper">
	  <div class="heroLinkButton">
		${$queries.getEntryById.data.response.fields.label}
	  </div>
	  <div class="heroLinkIcon" style="--hero-bg-color: ${$props.highlightColor}">
		<div class="heroLinkIconBg"></div>
		<svg xmlns="http://www.w3.org/2000/svg" class="heroLinkIconSVG" viewBox="0 0 16 16" height="1em" role="img">
		  <path style="fill: ${$props.highlightColor}" d="M11.642 8.33L5.71 14.261a.732.732 0 01-1.036 0l-.692-.691a.732.732 0 010-1.035l4.7-4.723-4.7-4.722a.732.732 0 010-1.035l.692-.691a.732.732 0 011.036 0l5.93 5.93a.732.732 0 010 1.036z"></path>
		</svg>
	  </div>
	</div>`;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()
        }
      />
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "embedHtml"],
  embedHtml: ["embedHtml"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicComponentHeroLinkOld__ArgProps,
          internalVariantPropNames: PlasmicComponentHeroLinkOld__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicComponentHeroLinkOld__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicComponentHeroLinkOld";
  } else {
    func.displayName = `PlasmicComponentHeroLinkOld.${nodeName}`;
  }
  return func;
}

export const PlasmicComponentHeroLinkOld = Object.assign(
  // Top-level PlasmicComponentHeroLinkOld renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    embedHtml: makeNodeComponent("embedHtml"),
    // Metadata about props expected for PlasmicComponentHeroLinkOld
    internalVariantProps: PlasmicComponentHeroLinkOld__VariantProps,
    internalArgProps: PlasmicComponentHeroLinkOld__ArgProps
  }
);

export default PlasmicComponentHeroLinkOld;
/* prettier-ignore-end */
