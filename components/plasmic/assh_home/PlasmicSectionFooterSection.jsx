/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: l_IC-pMZ1T4O
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import ItemMegaMenuSubitem from "../../ItemMegaMenuSubitem"; // plasmic-import: JNcUMWnpd-Gl/component
import { useScreenVariants as useScreenVariantsdjBtUr72ZExV } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: DJBtUr72ZExV/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicSectionFooterSection.module.css"; // plasmic-import: l_IC-pMZ1T4O/css
import Group25Icon from "./icons/PlasmicIcon__Group25"; // plasmic-import: LKS6J4VoLZXv/icon
import Group26Icon from "./icons/PlasmicIcon__Group26"; // plasmic-import: R1py9tLPsq-s/icon
import Group27Icon from "./icons/PlasmicIcon__Group27"; // plasmic-import: ybiWkkVOdgtE/icon
import Group28Icon from "./icons/PlasmicIcon__Group28"; // plasmic-import: k02b96_QaC9J/icon
import FacebookIcon from "./icons/PlasmicIcon__Facebook"; // plasmic-import: MX7KHAkn1iX9/icon
import LinkedInIcon from "./icons/PlasmicIcon__LinkedIn"; // plasmic-import: dFVMGh3ttlxd/icon
import XIcon from "./icons/PlasmicIcon__X"; // plasmic-import: nDiW8Wf6zyir/icon
import YouTubeIcon from "./icons/PlasmicIcon__YouTube"; // plasmic-import: k0AEoApI1UIT/icon
import InstagramIcon from "./icons/PlasmicIcon__Instagram"; // plasmic-import: vaW6Vs4F4IJB/icon
import ThreadsIcon from "./icons/PlasmicIcon__Threads"; // plasmic-import: XXUcg-8on_3s/icon
import Container7Icon from "./icons/PlasmicIcon__Container7"; // plasmic-import: HGdSWGp34SXV/icon
import Container2Icon from "./icons/PlasmicIcon__Container2"; // plasmic-import: TKWn1DDMMFQp/icon
import Container8Icon from "./icons/PlasmicIcon__Container8"; // plasmic-import: 6kINncsHiPrJ/icon
import Container9Icon from "./icons/PlasmicIcon__Container9"; // plasmic-import: hILpar9pi2Jl/icon
import ContainerIcon from "./icons/PlasmicIcon__Container"; // plasmic-import: LdpaQ2yuf9hP/icon

createPlasmicElementProxy;

export const PlasmicSectionFooterSection__VariantProps = new Array();

export const PlasmicSectionFooterSection__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSectionFooterSection__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "educationMenu",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const items = $queries.getMegaMenuNav.data.response.items;
                const educationItem = items.find(
                  link => link.fields.label === "Education"
                );
                if (!educationItem) return [];
                const entryMap = Object.fromEntries(
                  $queries.getMegaMenuNav.data.response.includes.Entry.map(
                    entry => [entry.sys.id, entry]
                  )
                );
                return (educationItem.fields.childLinks || [])
                  .map(link => {
                    const entry = entryMap[link.sys.id];
                    return {
                      id: link.sys.id,
                      label: entry?.fields.label || "Label missing",
                      order: entry?.fields.order ?? 0,
                      column: entry?.fields.column ?? 0,
                      url: entry?.fields.url || "#",
                      showExternalIcon: entry?.fields.showExternalIcon || false
                    };
                  })
                  .sort((a, b) => a.order - b.order);
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "membershipMenu",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const items = $queries.getMegaMenuNav.data.response.items;
                const educationItem = items.find(
                  link => link.fields.label === "Membership"
                );
                if (!educationItem) return [];
                const entryMap = Object.fromEntries(
                  $queries.getMegaMenuNav.data.response.includes.Entry.map(
                    entry => [entry.sys.id, entry]
                  )
                );
                return (educationItem.fields.childLinks || [])
                  .map(link => {
                    const entry = entryMap[link.sys.id];
                    return {
                      id: link.sys.id,
                      label: entry?.fields.label || "Label missing",
                      order: entry?.fields.order ?? 0,
                      column: entry?.fields.column ?? 0,
                      url: entry?.fields.url || "#",
                      showExternalIcon: entry?.fields.showExternalIcon || false
                    };
                  })
                  .sort((a, b) => a.order - b.order);
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "amMenu",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const items = $queries.getMegaMenuNav.data.response.items;
                const educationItem = items.find(
                  link => link.fields.label === "Annual Meeting"
                );
                if (!educationItem) return [];
                const entryMap = Object.fromEntries(
                  $queries.getMegaMenuNav.data.response.includes.Entry.map(
                    entry => [entry.sys.id, entry]
                  )
                );
                return (educationItem.fields.childLinks || [])
                  .map(link => {
                    const entry = entryMap[link.sys.id];
                    return {
                      id: link.sys.id,
                      label: entry?.fields.label || "Label missing",
                      order: entry?.fields.order ?? 0,
                      column: entry?.fields.column ?? 0,
                      url: entry?.fields.url || "#",
                      showExternalIcon: entry?.fields.showExternalIcon || false
                    };
                  })
                  .sort((a, b) => a.order - b.order);
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "advocacyMenu",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const items = $queries.getMegaMenuNav.data.response.items;
                const educationItem = items.find(
                  link => link.fields.label === "Advocacy"
                );
                if (!educationItem) return [];
                const entryMap = Object.fromEntries(
                  $queries.getMegaMenuNav.data.response.includes.Entry.map(
                    entry => [entry.sys.id, entry]
                  )
                );
                return (educationItem.fields.childLinks || [])
                  .map(link => {
                    const entry = entryMap[link.sys.id];
                    return {
                      id: link.sys.id,
                      label: entry?.fields.label || "Label missing",
                      order: entry?.fields.order ?? 0,
                      column: entry?.fields.column ?? 0,
                      url: entry?.fields.url || "#",
                      showExternalIcon: entry?.fields.showExternalIcon || false
                    };
                  })
                  .sort((a, b) => a.order - b.order);
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "grantsMenu",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const items = $queries.getMegaMenuNav.data.response.items;
                const educationItem = items.find(
                  link => link.fields.label === "Grants & Awards"
                );
                if (!educationItem) return [];
                const entryMap = Object.fromEntries(
                  $queries.getMegaMenuNav.data.response.includes.Entry.map(
                    entry => [entry.sys.id, entry]
                  )
                );
                return (educationItem.fields.childLinks || [])
                  .map(link => {
                    const entry = entryMap[link.sys.id];
                    return {
                      id: link.sys.id,
                      label: entry?.fields.label || "Label missing",
                      order: entry?.fields.order ?? 0,
                      column: entry?.fields.column ?? 0,
                      url: entry?.fields.url || "#",
                      showExternalIcon: entry?.fields.showExternalIcon || false
                    };
                  })
                  .sort((a, b) => a.order - b.order);
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "newsMenu",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const items = $queries.getMegaMenuNav.data.response.items;
                const educationItem = items.find(
                  link => link.fields.label === "News & Publications"
                );
                if (!educationItem) return [];
                const entryMap = Object.fromEntries(
                  $queries.getMegaMenuNav.data.response.includes.Entry.map(
                    entry => [entry.sys.id, entry]
                  )
                );
                return (educationItem.fields.childLinks || [])
                  .map(link => {
                    const entry = entryMap[link.sys.id];
                    return {
                      id: link.sys.id,
                      label: entry?.fields.label || "Label missing",
                      order: entry?.fields.order ?? 0,
                      column: entry?.fields.column ?? 0,
                      url: entry?.fields.url || "#",
                      showExternalIcon: entry?.fields.showExternalIcon || false
                    };
                  })
                  .sort((a, b) => a.order - b.order);
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "resourcesForMenu",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const items = $queries.getMegaMenuNav.data.response.items;
                const educationItem = items.find(
                  link => link.fields.label === "Resources For"
                );
                if (!educationItem) return [];
                const entryMap = Object.fromEntries(
                  $queries.getMegaMenuNav.data.response.includes.Entry.map(
                    entry => [entry.sys.id, entry]
                  )
                );
                return (educationItem.fields.childLinks || [])
                  .map(link => {
                    const entry = entryMap[link.sys.id];
                    return {
                      id: link.sys.id,
                      label: entry?.fields.label || "Label missing",
                      order: entry?.fields.order ?? 0,
                      column: entry?.fields.column ?? 0,
                      url: entry?.fields.url || "#",
                      showExternalIcon: entry?.fields.showExternalIcon || false
                    };
                  })
                  .sort((a, b) => a.order - b.order);
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      },
      {
        path: "exploreMenu",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const entryMap = Object.fromEntries(
                  $queries.getExploreMenu.data.response.includes.Entry.map(
                    entry => [entry.sys.id, entry]
                  )
                );
                return $queries.getExploreMenu.data.response.items[0].fields.childLinks
                  .map(link => {
                    const entry = entryMap[link.sys.id];
                    return {
                      id: link.sys.id,
                      label: entry?.fields.label || "Label missing",
                      order: entry?.fields.order ?? 0,
                      column: entry?.fields.column ?? 0,
                      url: entry?.fields.url || "#",
                      showExternalIcon: entry?.fields.showExternalIcon || false
                    };
                  })
                  .sort((a, b) => a.order - b.order);
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    getMegaMenuNav: usePlasmicDataOp(() => {
      return {
        sourceId: "tbVV8SR67UpQ6Z9zuPcDPB",
        opId: "959d8e01-fa94-4559-8705-19900dfafe07",
        userArgs: {},
        cacheKey: `plasmic.$.959d8e01-fa94-4559-8705-19900dfafe07.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getExploreMenu: usePlasmicDataOp(() => {
      return {
        sourceId: "tbVV8SR67UpQ6Z9zuPcDPB",
        opId: "4a40962f-4470-4a32-92a8-68a382da0141",
        userArgs: {},
        cacheKey: `plasmic.$.4a40962f-4470-4a32-92a8-68a382da0141.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsdjBtUr72ZExV()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"footer"}
        data-plasmic-override={overrides.footer}
        className={classNames(projectcss.all, sty.footer)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"frame5"}
          data-plasmic-override={overrides.frame5}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame5)}
        >
          <div
            data-plasmic-name={"group1"}
            data-plasmic-override={overrides.group1}
            className={classNames(projectcss.all, sty.group1)}
          >
            <Group25Icon
              className={classNames(projectcss.all, sty.svg__o4UBu)}
              role={"img"}
            />

            <Group26Icon
              className={classNames(projectcss.all, sty.svg__iesPh)}
              role={"img"}
            />

            <Group27Icon
              className={classNames(projectcss.all, sty.svg___2DExs)}
              role={"img"}
            />

            <Group28Icon
              className={classNames(projectcss.all, sty.svg__tAekq)}
              role={"img"}
            />
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"social"}
            data-plasmic-override={overrides.social}
            hasGap={true}
            className={classNames(projectcss.all, sty.social)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"socialIcon"}
              data-plasmic-override={overrides.socialIcon}
              hasGap={true}
              className={classNames(projectcss.all, sty.socialIcon)}
            >
              <Stack__
                as={FacebookIcon}
                hasGap={true}
                className={classNames(projectcss.all, sty.svg___7JZcJ)}
                role={"img"}
              />

              {false ? (
                <Stack__
                  as={LinkedInIcon}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.svg__dAqUh)}
                  role={"img"}
                />
              ) : null}
              {false ? (
                <Stack__
                  as={XIcon}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.svg__gPcBo)}
                  role={"img"}
                />
              ) : null}
              {false ? (
                <Stack__
                  as={YouTubeIcon}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.svg___3CRY)}
                  role={"img"}
                />
              ) : null}
              {false ? (
                <Stack__
                  as={InstagramIcon}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.svg__gN1Cz)}
                  role={"img"}
                />
              ) : null}
              {false ? (
                <Stack__
                  as={ThreadsIcon}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.svg__nlvtX)}
                  role={"img"}
                />
              ) : null}
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"socialIcon2"}
              data-plasmic-override={overrides.socialIcon2}
              hasGap={true}
              className={classNames(projectcss.all, sty.socialIcon2)}
            >
              {false ? (
                <Stack__
                  as={FacebookIcon}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.svg__fEa9W)}
                  role={"img"}
                />
              ) : null}
              <Stack__
                as={LinkedInIcon}
                hasGap={true}
                className={classNames(projectcss.all, sty.svg__rVml)}
                role={"img"}
              />

              {false ? (
                <Stack__
                  as={XIcon}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.svg__wocbS)}
                  role={"img"}
                />
              ) : null}
              {false ? (
                <Stack__
                  as={YouTubeIcon}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.svg__ivvow)}
                  role={"img"}
                />
              ) : null}
              {false ? (
                <Stack__
                  as={InstagramIcon}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.svg__kVksy)}
                  role={"img"}
                />
              ) : null}
              {false ? (
                <Stack__
                  as={ThreadsIcon}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.svg__xkG7)}
                  role={"img"}
                />
              ) : null}
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"socialIcon3"}
              data-plasmic-override={overrides.socialIcon3}
              hasGap={true}
              className={classNames(projectcss.all, sty.socialIcon3)}
            >
              {false ? (
                <Stack__
                  as={FacebookIcon}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.svg__zJdXq)}
                  role={"img"}
                />
              ) : null}
              {false ? (
                <Stack__
                  as={LinkedInIcon}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.svg__dZwby)}
                  role={"img"}
                />
              ) : null}
              {false ? (
                <Stack__
                  as={XIcon}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.svg___3X5Dk)}
                  role={"img"}
                />
              ) : null}
              <Stack__
                as={YouTubeIcon}
                hasGap={true}
                className={classNames(projectcss.all, sty.svg__ueJsc)}
                role={"img"}
              />

              {false ? (
                <Stack__
                  as={InstagramIcon}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.svg___9Dq4S)}
                  role={"img"}
                />
              ) : null}
              {false ? (
                <Stack__
                  as={ThreadsIcon}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.svg___3Lvg2)}
                  role={"img"}
                />
              ) : null}
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"socialIcon4"}
              data-plasmic-override={overrides.socialIcon4}
              hasGap={true}
              className={classNames(projectcss.all, sty.socialIcon4)}
            >
              {false ? (
                <Stack__
                  as={FacebookIcon}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.svg__lTqhc)}
                  role={"img"}
                />
              ) : null}
              {false ? (
                <Stack__
                  as={LinkedInIcon}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.svg__e4Yr)}
                  role={"img"}
                />
              ) : null}
              {false ? (
                <Stack__
                  as={XIcon}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.svg__sLvqa)}
                  role={"img"}
                />
              ) : null}
              {false ? (
                <Stack__
                  as={YouTubeIcon}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.svg__gcJ3J)}
                  role={"img"}
                />
              ) : null}
              <Stack__
                as={InstagramIcon}
                hasGap={true}
                className={classNames(projectcss.all, sty.svg__oWQd)}
                role={"img"}
              />

              {false ? (
                <Stack__
                  as={ThreadsIcon}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.svg__rl8WS)}
                  role={"img"}
                />
              ) : null}
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"socialIcon5"}
              data-plasmic-override={overrides.socialIcon5}
              hasGap={true}
              className={classNames(projectcss.all, sty.socialIcon5)}
            >
              {false ? (
                <Stack__
                  as={FacebookIcon}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.svg__yfW0P)}
                  role={"img"}
                />
              ) : null}
              {false ? (
                <Stack__
                  as={LinkedInIcon}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.svg__wQL1)}
                  role={"img"}
                />
              ) : null}
              {false ? (
                <Stack__
                  as={XIcon}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.svg___0VNlh)}
                  role={"img"}
                />
              ) : null}
              {false ? (
                <Stack__
                  as={YouTubeIcon}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.svg__ei74G)}
                  role={"img"}
                />
              ) : null}
              {false ? (
                <Stack__
                  as={InstagramIcon}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.svg__zjjc2)}
                  role={"img"}
                />
              ) : null}
              <Stack__
                as={ThreadsIcon}
                hasGap={true}
                className={classNames(projectcss.all, sty.svg___5JFe)}
                role={"img"}
              />
            </Stack__>
          </Stack__>
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"columns"}
          data-plasmic-override={overrides.columns}
          hasGap={true}
          className={classNames(projectcss.all, sty.columns)}
        >
          <div className={classNames(projectcss.all, sty.column__pusMq)}>
            <div className={classNames(projectcss.all, sty.freeBox__suvqz)}>
              <Stack__
                as={"div"}
                data-plasmic-name={"frame7"}
                data-plasmic-override={overrides.frame7}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame7)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"contact"}
                  data-plasmic-override={overrides.contact}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.contact)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"navItemMenu"}
                    data-plasmic-override={overrides.navItemMenu}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.navItemMenu)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"icon16X16"}
                      data-plasmic-override={overrides.icon16X16}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.icon16X16)}
                    >
                      <Stack__
                        as={Container7Icon}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.svg__n3E3C)}
                        role={"img"}
                      />
                    </Stack__>
                    <div
                      data-plasmic-name={"navigationItem"}
                      data-plasmic-override={overrides.navigationItem}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.navigationItem
                      )}
                    >
                      {"822 W. Washington Blvd.\nChicago, IL 60607"}
                    </div>
                    {false ? (
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"icon12X12"}
                        data-plasmic-override={overrides.icon12X12}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.icon12X12)}
                      >
                        <Stack__
                          as={Container2Icon}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.svg__kTs7B)}
                          role={"img"}
                        />
                      </Stack__>
                    ) : null}
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"navItemMenu2"}
                    data-plasmic-override={overrides.navItemMenu2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.navItemMenu2)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"icon16X162"}
                      data-plasmic-override={overrides.icon16X162}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.icon16X162)}
                    >
                      <Stack__
                        as={Container8Icon}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.svg__edu6X)}
                        role={"img"}
                      />
                    </Stack__>
                    <div
                      data-plasmic-name={"navigationItem2"}
                      data-plasmic-override={overrides.navigationItem2}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.navigationItem2
                      )}
                    >
                      {"(312) 880-1900"}
                    </div>
                    {false ? (
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"icon12X122"}
                        data-plasmic-override={overrides.icon12X122}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.icon12X122)}
                      >
                        <Stack__
                          as={Container2Icon}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.svg___9DpIc
                          )}
                          role={"img"}
                        />
                      </Stack__>
                    ) : null}
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"navItemMenu3"}
                    data-plasmic-override={overrides.navItemMenu3}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.navItemMenu3)}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"icon16X163"}
                      data-plasmic-override={overrides.icon16X163}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.icon16X163)}
                    >
                      <Stack__
                        as={Container9Icon}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.svg__vQUe)}
                        role={"img"}
                      />
                    </Stack__>
                    <div
                      data-plasmic-name={"navigationItem3"}
                      data-plasmic-override={overrides.navigationItem3}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.navigationItem3
                      )}
                    >
                      {"info@ASSH.org"}
                    </div>
                    {false ? (
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"icon12X123"}
                        data-plasmic-override={overrides.icon12X123}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.icon12X123)}
                      >
                        <Stack__
                          as={Container2Icon}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.svg__gHvfz)}
                          role={"img"}
                        />
                      </Stack__>
                    ) : null}
                  </Stack__>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"frame8"}
                  data-plasmic-override={overrides.frame8}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.frame8)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"navItemMenu4"}
                    data-plasmic-override={overrides.navItemMenu4}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.navItemMenu4)}
                  >
                    {false ? (
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"icon12X124"}
                        data-plasmic-override={overrides.icon12X124}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.icon12X124)}
                      >
                        <Stack__
                          as={ContainerIcon}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.svg__gWsRs)}
                          role={"img"}
                        />
                      </Stack__>
                    ) : null}
                    <div
                      data-plasmic-name={"navigationItem4"}
                      data-plasmic-override={overrides.navigationItem4}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.navigationItem4
                      )}
                    >
                      {"Advertise"}
                    </div>
                    {false ? (
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"icon12X125"}
                        data-plasmic-override={overrides.icon12X125}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.icon12X125)}
                      >
                        <Stack__
                          as={Container2Icon}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.svg__sfngi)}
                          role={"img"}
                        />
                      </Stack__>
                    ) : null}
                  </Stack__>
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"navItemMenu5"}
                    data-plasmic-override={overrides.navItemMenu5}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.navItemMenu5)}
                  >
                    {false ? (
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"icon12X126"}
                        data-plasmic-override={overrides.icon12X126}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.icon12X126)}
                      >
                        <Stack__
                          as={ContainerIcon}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.svg__wncaM)}
                          role={"img"}
                        />
                      </Stack__>
                    ) : null}
                    <div
                      data-plasmic-name={"navigationItem5"}
                      data-plasmic-override={overrides.navigationItem5}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.navigationItem5
                      )}
                    >
                      {"Press Center"}
                    </div>
                    {false ? (
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"icon12X127"}
                        data-plasmic-override={overrides.icon12X127}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.icon12X127)}
                      >
                        <Stack__
                          as={Container2Icon}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.svg__kbXkr)}
                          role={"img"}
                        />
                      </Stack__>
                    ) : null}
                  </Stack__>
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"buttonSecondary"}
                  data-plasmic-override={overrides.buttonSecondary}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.buttonSecondary)}
                >
                  {false ? (
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"icon12X128"}
                      data-plasmic-override={overrides.icon12X128}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.icon12X128)}
                    >
                      <Stack__
                        as={ContainerIcon}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.svg__ml8Vu)}
                        role={"img"}
                      />
                    </Stack__>
                  ) : null}
                  <div
                    data-plasmic-name={"text"}
                    data-plasmic-override={overrides.text}
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text
                    )}
                  >
                    {"Donate to the Foundation"}
                  </div>
                  {false ? (
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"icon12X129"}
                      data-plasmic-override={overrides.icon12X129}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.icon12X129)}
                    >
                      <Stack__
                        as={Container2Icon}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.svg__smizU)}
                        role={"img"}
                      />
                    </Stack__>
                  ) : null}
                </Stack__>
              </Stack__>
            </div>
          </div>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.column__nKa5B)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__uqiZ6)}>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $queries.getMegaMenuNav.data.response.items.filter(
                      link => link.fields.label === "Education"
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame27"}
                    data-plasmic-override={overrides.frame27}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame27)}
                    key={currentIndex}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"navItemSimple10"}
                      data-plasmic-override={overrides.navItemSimple10}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.navItemSimple10
                      )}
                    >
                      <Stack__
                        as={"div"}
                        data-plasmic-name={"icon12X12144"}
                        data-plasmic-override={overrides.icon12X12144}
                        hasGap={true}
                        className={classNames(projectcss.all, sty.icon12X12144)}
                      >
                        <Stack__
                          as={ContainerIcon}
                          hasGap={true}
                          className={classNames(projectcss.all, sty.svg__hMjEg)}
                          role={"img"}
                        />
                      </Stack__>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__o8Sih
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.fields.label;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Education";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      {false ? (
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"icon12X12145"}
                          data-plasmic-override={overrides.icon12X12145}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.icon12X12145
                          )}
                        >
                          <Stack__
                            as={Container2Icon}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.svg__yw5Dl
                            )}
                            role={"img"}
                          />
                        </Stack__>
                      ) : null}
                    </Stack__>
                    <div
                      data-plasmic-name={"frame28"}
                      data-plasmic-override={overrides.frame28}
                      className={classNames(projectcss.all, sty.frame28)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $state.educationMenu;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_1, __plasmic_idx_1) => {
                        const currentItem = __plasmic_item_1;
                        const currentIndex = __plasmic_idx_1;
                        return (
                          <div
                            data-plasmic-name={"navItemMenu72"}
                            data-plasmic-override={overrides.navItemMenu72}
                            className={classNames(
                              projectcss.all,
                              sty.navItemMenu72
                            )}
                            key={currentIndex}
                          >
                            {false ? (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"icon12X12162"}
                                data-plasmic-override={overrides.icon12X12162}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.icon12X12162
                                )}
                              >
                                <Stack__
                                  as={ContainerIcon}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__tcs4E
                                  )}
                                  role={"img"}
                                />
                              </Stack__>
                            ) : null}
                            <ItemMegaMenuSubitem
                              className={classNames(
                                "__wab_instance",
                                sty.itemMegaMenuSubitem___5X1E
                              )}
                              label={(() => {
                                try {
                                  return currentItem.label;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              unnamedGroupOfVariants={["footer"]}
                              url={(() => {
                                try {
                                  return currentItem.url;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            />

                            {false ? (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"icon12X12163"}
                                data-plasmic-override={overrides.icon12X12163}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.icon12X12163
                                )}
                              >
                                <Stack__
                                  as={Container2Icon}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__fNWyU
                                  )}
                                  role={"img"}
                                />
                              </Stack__>
                            ) : null}
                          </div>
                        );
                      })}
                    </div>
                  </Stack__>
                );
              })}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___2SJda)}>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $queries.getMegaMenuNav.data.response.items.filter(
                      link => link.fields.label === "Grants & Awards"
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame33"}
                    data-plasmic-override={overrides.frame33}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame33)}
                    key={currentIndex}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"navItemSimple13"}
                      data-plasmic-override={overrides.navItemSimple13}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.navItemSimple13
                      )}
                    >
                      {false ? (
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"icon12X12150"}
                          data-plasmic-override={overrides.icon12X12150}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.icon12X12150
                          )}
                        >
                          <Stack__
                            as={ContainerIcon}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.svg__qtWng
                            )}
                            role={"img"}
                          />
                        </Stack__>
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gd9Fv
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.fields.label;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Education";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      {false ? (
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"icon12X12151"}
                          data-plasmic-override={overrides.icon12X12151}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.icon12X12151
                          )}
                        >
                          <Stack__
                            as={Container2Icon}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.svg__qGVdk
                            )}
                            role={"img"}
                          />
                        </Stack__>
                      ) : null}
                    </Stack__>
                    <div
                      data-plasmic-name={"frame34"}
                      data-plasmic-override={overrides.frame34}
                      className={classNames(projectcss.all, sty.frame34)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $state.grantsMenu;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_1, __plasmic_idx_1) => {
                        const currentItem = __plasmic_item_1;
                        const currentIndex = __plasmic_idx_1;
                        return (
                          <div
                            data-plasmic-name={"navItemMenu75"}
                            data-plasmic-override={overrides.navItemMenu75}
                            className={classNames(
                              projectcss.all,
                              sty.navItemMenu75
                            )}
                            key={currentIndex}
                          >
                            {false ? (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"icon12X12168"}
                                data-plasmic-override={overrides.icon12X12168}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.icon12X12168
                                )}
                              >
                                <Stack__
                                  as={ContainerIcon}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__nGUad
                                  )}
                                  role={"img"}
                                />
                              </Stack__>
                            ) : null}
                            <ItemMegaMenuSubitem
                              className={classNames(
                                "__wab_instance",
                                sty.itemMegaMenuSubitem__yTyTd
                              )}
                              label={(() => {
                                try {
                                  return currentItem.label;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              unnamedGroupOfVariants={["footer"]}
                              url={(() => {
                                try {
                                  return currentItem.url;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            />

                            {false ? (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"icon12X12169"}
                                data-plasmic-override={overrides.icon12X12169}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.icon12X12169
                                )}
                              >
                                <Stack__
                                  as={Container2Icon}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__r4Qg2
                                  )}
                                  role={"img"}
                                />
                              </Stack__>
                            ) : null}
                          </div>
                        );
                      })}
                    </div>
                  </Stack__>
                );
              })}
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.column___0OmGm)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__tp1V)}>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $queries.getMegaMenuNav.data.response.items.filter(
                      link => link.fields.label === "Annual Meeting"
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame29"}
                    data-plasmic-override={overrides.frame29}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame29)}
                    key={currentIndex}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"navItemSimple11"}
                      data-plasmic-override={overrides.navItemSimple11}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.navItemSimple11
                      )}
                    >
                      {false ? (
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"icon12X12146"}
                          data-plasmic-override={overrides.icon12X12146}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.icon12X12146
                          )}
                        >
                          <Stack__
                            as={ContainerIcon}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.svg__cEwl
                            )}
                            role={"img"}
                          />
                        </Stack__>
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__pdB
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.fields.label;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Education";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      {false ? (
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"icon12X12147"}
                          data-plasmic-override={overrides.icon12X12147}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.icon12X12147
                          )}
                        >
                          <Stack__
                            as={Container2Icon}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.svg__iiopv
                            )}
                            role={"img"}
                          />
                        </Stack__>
                      ) : null}
                    </Stack__>
                    <div
                      data-plasmic-name={"frame30"}
                      data-plasmic-override={overrides.frame30}
                      className={classNames(projectcss.all, sty.frame30)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $state.amMenu;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_1, __plasmic_idx_1) => {
                        const currentItem = __plasmic_item_1;
                        const currentIndex = __plasmic_idx_1;
                        return (
                          <div
                            data-plasmic-name={"navItemMenu73"}
                            data-plasmic-override={overrides.navItemMenu73}
                            className={classNames(
                              projectcss.all,
                              sty.navItemMenu73
                            )}
                            key={currentIndex}
                          >
                            {false ? (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"icon12X12164"}
                                data-plasmic-override={overrides.icon12X12164}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.icon12X12164
                                )}
                              >
                                <Stack__
                                  as={ContainerIcon}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__osaru
                                  )}
                                  role={"img"}
                                />
                              </Stack__>
                            ) : null}
                            <ItemMegaMenuSubitem
                              className={classNames(
                                "__wab_instance",
                                sty.itemMegaMenuSubitem__jydhl
                              )}
                              label={(() => {
                                try {
                                  return currentItem.label;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              unnamedGroupOfVariants={["footer"]}
                              url={(() => {
                                try {
                                  return currentItem.url;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            />

                            {false ? (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"icon12X12165"}
                                data-plasmic-override={overrides.icon12X12165}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.icon12X12165
                                )}
                              >
                                <Stack__
                                  as={Container2Icon}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__nBgJ6
                                  )}
                                  role={"img"}
                                />
                              </Stack__>
                            ) : null}
                          </div>
                        );
                      })}
                    </div>
                  </Stack__>
                );
              })}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__esG1B)}>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $queries.getMegaMenuNav.data.response.items.filter(
                      link => link.fields.label === "Resources For"
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame31"}
                    data-plasmic-override={overrides.frame31}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame31)}
                    key={currentIndex}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"navItemSimple12"}
                      data-plasmic-override={overrides.navItemSimple12}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.navItemSimple12
                      )}
                    >
                      {false ? (
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"icon12X12148"}
                          data-plasmic-override={overrides.icon12X12148}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.icon12X12148
                          )}
                        >
                          <Stack__
                            as={ContainerIcon}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.svg__czVr
                            )}
                            role={"img"}
                          />
                        </Stack__>
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vH4L1
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.fields.label;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Education";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      {false ? (
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"icon12X12149"}
                          data-plasmic-override={overrides.icon12X12149}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.icon12X12149
                          )}
                        >
                          <Stack__
                            as={Container2Icon}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.svg__gmgOm
                            )}
                            role={"img"}
                          />
                        </Stack__>
                      ) : null}
                    </Stack__>
                    <div
                      data-plasmic-name={"frame32"}
                      data-plasmic-override={overrides.frame32}
                      className={classNames(projectcss.all, sty.frame32)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $state.resourcesForMenu;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_1, __plasmic_idx_1) => {
                        const currentItem = __plasmic_item_1;
                        const currentIndex = __plasmic_idx_1;
                        return (
                          <div
                            data-plasmic-name={"navItemMenu74"}
                            data-plasmic-override={overrides.navItemMenu74}
                            className={classNames(
                              projectcss.all,
                              sty.navItemMenu74
                            )}
                            key={currentIndex}
                          >
                            {false ? (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"icon12X12166"}
                                data-plasmic-override={overrides.icon12X12166}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.icon12X12166
                                )}
                              >
                                <Stack__
                                  as={ContainerIcon}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__aIyPw
                                  )}
                                  role={"img"}
                                />
                              </Stack__>
                            ) : null}
                            <ItemMegaMenuSubitem
                              className={classNames(
                                "__wab_instance",
                                sty.itemMegaMenuSubitem___2KWq
                              )}
                              label={(() => {
                                try {
                                  return currentItem.label;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              unnamedGroupOfVariants={["footer"]}
                              url={(() => {
                                try {
                                  return currentItem.url;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            />

                            {false ? (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"icon12X12167"}
                                data-plasmic-override={overrides.icon12X12167}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.icon12X12167
                                )}
                              >
                                <Stack__
                                  as={Container2Icon}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__biva0
                                  )}
                                  role={"img"}
                                />
                              </Stack__>
                            ) : null}
                          </div>
                        );
                      })}
                    </div>
                  </Stack__>
                );
              })}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__uFeT)}>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $queries.getMegaMenuNav.data.response.items.filter(
                      link => link.fields.label === "Advocacy"
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame37"}
                    data-plasmic-override={overrides.frame37}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame37)}
                    key={currentIndex}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"navItemSimple15"}
                      data-plasmic-override={overrides.navItemSimple15}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.navItemSimple15
                      )}
                    >
                      {false ? (
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"icon12X12154"}
                          data-plasmic-override={overrides.icon12X12154}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.icon12X12154
                          )}
                        >
                          <Stack__
                            as={ContainerIcon}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.svg__vXg3J
                            )}
                            role={"img"}
                          />
                        </Stack__>
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__jjwh
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.fields.label;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Education";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      {false ? (
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"icon12X12155"}
                          data-plasmic-override={overrides.icon12X12155}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.icon12X12155
                          )}
                        >
                          <Stack__
                            as={Container2Icon}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.svg___9WuXa
                            )}
                            role={"img"}
                          />
                        </Stack__>
                      ) : null}
                    </Stack__>
                    <div
                      data-plasmic-name={"frame38"}
                      data-plasmic-override={overrides.frame38}
                      className={classNames(projectcss.all, sty.frame38)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $state.advocacyMenu;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_1, __plasmic_idx_1) => {
                        const currentItem = __plasmic_item_1;
                        const currentIndex = __plasmic_idx_1;
                        return (
                          <div
                            data-plasmic-name={"navItemMenu77"}
                            data-plasmic-override={overrides.navItemMenu77}
                            className={classNames(
                              projectcss.all,
                              sty.navItemMenu77
                            )}
                            key={currentIndex}
                          >
                            {false ? (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"icon12X12172"}
                                data-plasmic-override={overrides.icon12X12172}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.icon12X12172
                                )}
                              >
                                <Stack__
                                  as={ContainerIcon}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__jkU7
                                  )}
                                  role={"img"}
                                />
                              </Stack__>
                            ) : null}
                            <ItemMegaMenuSubitem
                              className={classNames(
                                "__wab_instance",
                                sty.itemMegaMenuSubitem__xy4Q
                              )}
                              label={(() => {
                                try {
                                  return currentItem.label;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              unnamedGroupOfVariants={["footer"]}
                              url={(() => {
                                try {
                                  return currentItem.url;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            />

                            {false ? (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"icon12X12173"}
                                data-plasmic-override={overrides.icon12X12173}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.icon12X12173
                                )}
                              >
                                <Stack__
                                  as={Container2Icon}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__i8My4
                                  )}
                                  role={"img"}
                                />
                              </Stack__>
                            ) : null}
                          </div>
                        );
                      })}
                    </div>
                  </Stack__>
                );
              })}
            </div>
          </Stack__>
          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.column___4MWhN)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__s7Kr6)}>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $queries.getMegaMenuNav.data.response.items.filter(
                      link => link.fields.label === "Membership"
                    );
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame35"}
                    data-plasmic-override={overrides.frame35}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame35)}
                    key={currentIndex}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"navItemSimple14"}
                      data-plasmic-override={overrides.navItemSimple14}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.navItemSimple14
                      )}
                    >
                      {false ? (
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"icon12X12152"}
                          data-plasmic-override={overrides.icon12X12152}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.icon12X12152
                          )}
                        >
                          <Stack__
                            as={ContainerIcon}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.svg__voWvp
                            )}
                            role={"img"}
                          />
                        </Stack__>
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bw0D9
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem.fields.label;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Education";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      {false ? (
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"icon12X12153"}
                          data-plasmic-override={overrides.icon12X12153}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.icon12X12153
                          )}
                        >
                          <Stack__
                            as={Container2Icon}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.svg__mdGbl
                            )}
                            role={"img"}
                          />
                        </Stack__>
                      ) : null}
                    </Stack__>
                    <div
                      data-plasmic-name={"frame36"}
                      data-plasmic-override={overrides.frame36}
                      className={classNames(projectcss.all, sty.frame36)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $state.membershipMenu;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_1, __plasmic_idx_1) => {
                        const currentItem = __plasmic_item_1;
                        const currentIndex = __plasmic_idx_1;
                        return (
                          <div
                            data-plasmic-name={"navItemMenu76"}
                            data-plasmic-override={overrides.navItemMenu76}
                            className={classNames(
                              projectcss.all,
                              sty.navItemMenu76
                            )}
                            key={currentIndex}
                          >
                            {false ? (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"icon12X12170"}
                                data-plasmic-override={overrides.icon12X12170}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.icon12X12170
                                )}
                              >
                                <Stack__
                                  as={ContainerIcon}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__d08B6
                                  )}
                                  role={"img"}
                                />
                              </Stack__>
                            ) : null}
                            <ItemMegaMenuSubitem
                              className={classNames(
                                "__wab_instance",
                                sty.itemMegaMenuSubitem__d0SxW
                              )}
                              label={(() => {
                                try {
                                  return currentItem.label;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              unnamedGroupOfVariants={["footer"]}
                              url={(() => {
                                try {
                                  return currentItem.url;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            />

                            {false ? (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"icon12X12171"}
                                data-plasmic-override={overrides.icon12X12171}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.icon12X12171
                                )}
                              >
                                <Stack__
                                  as={Container2Icon}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg___8WLnJ
                                  )}
                                  role={"img"}
                                />
                              </Stack__>
                            ) : null}
                          </div>
                        );
                      })}
                    </div>
                  </Stack__>
                );
              })}
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__roYev)}>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $queries.getExploreMenu.data.response.items[0].fields
                      .label;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"frame39"}
                    data-plasmic-override={overrides.frame39}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame39)}
                    key={currentIndex}
                  >
                    <Stack__
                      as={"div"}
                      data-plasmic-name={"navItemSimple16"}
                      data-plasmic-override={overrides.navItemSimple16}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.navItemSimple16
                      )}
                    >
                      {false ? (
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"icon12X12156"}
                          data-plasmic-override={overrides.icon12X12156}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.icon12X12156
                          )}
                        >
                          <Stack__
                            as={ContainerIcon}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.svg__eAdkI
                            )}
                            role={"img"}
                          />
                        </Stack__>
                      ) : null}
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___9Jgvo
                        )}
                      >
                        <React.Fragment>
                          {(() => {
                            try {
                              return currentItem;
                            } catch (e) {
                              if (
                                e instanceof TypeError ||
                                e?.plasmicType === "PlasmicUndefinedDataError"
                              ) {
                                return "Education";
                              }
                              throw e;
                            }
                          })()}
                        </React.Fragment>
                      </div>
                      {false ? (
                        <Stack__
                          as={"div"}
                          data-plasmic-name={"icon12X12157"}
                          data-plasmic-override={overrides.icon12X12157}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.icon12X12157
                          )}
                        >
                          <Stack__
                            as={Container2Icon}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.svg___8Yvh
                            )}
                            role={"img"}
                          />
                        </Stack__>
                      ) : null}
                    </Stack__>
                    <div
                      data-plasmic-name={"frame40"}
                      data-plasmic-override={overrides.frame40}
                      className={classNames(projectcss.all, sty.frame40)}
                    >
                      {(_par =>
                        !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                        (() => {
                          try {
                            return $state.exploreMenu;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return [];
                            }
                            throw e;
                          }
                        })()
                      ).map((__plasmic_item_1, __plasmic_idx_1) => {
                        const currentItem = __plasmic_item_1;
                        const currentIndex = __plasmic_idx_1;
                        return (
                          <div
                            data-plasmic-name={"navItemMenu78"}
                            data-plasmic-override={overrides.navItemMenu78}
                            className={classNames(
                              projectcss.all,
                              sty.navItemMenu78
                            )}
                            key={currentIndex}
                          >
                            {false ? (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"icon12X12174"}
                                data-plasmic-override={overrides.icon12X12174}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.icon12X12174
                                )}
                              >
                                <Stack__
                                  as={ContainerIcon}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg__nBp2C
                                  )}
                                  role={"img"}
                                />
                              </Stack__>
                            ) : null}
                            <ItemMegaMenuSubitem
                              className={classNames(
                                "__wab_instance",
                                sty.itemMegaMenuSubitem__cmcfH
                              )}
                              label={(() => {
                                try {
                                  return currentItem.label;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return undefined;
                                  }
                                  throw e;
                                }
                              })()}
                              unnamedGroupOfVariants={["footer"]}
                              url={(() => {
                                try {
                                  return currentItem.url;
                                } catch (e) {
                                  if (
                                    e instanceof TypeError ||
                                    e?.plasmicType ===
                                      "PlasmicUndefinedDataError"
                                  ) {
                                    return "";
                                  }
                                  throw e;
                                }
                              })()}
                            />

                            {false ? (
                              <Stack__
                                as={"div"}
                                data-plasmic-name={"icon12X12175"}
                                data-plasmic-override={overrides.icon12X12175}
                                hasGap={true}
                                className={classNames(
                                  projectcss.all,
                                  sty.icon12X12175
                                )}
                              >
                                <Stack__
                                  as={Container2Icon}
                                  hasGap={true}
                                  className={classNames(
                                    projectcss.all,
                                    sty.svg___01Oxo
                                  )}
                                  role={"img"}
                                />
                              </Stack__>
                            ) : null}
                          </div>
                        );
                      })}
                    </div>
                  </Stack__>
                );
              })}
            </div>
          </Stack__>
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"container"}
          data-plasmic-override={overrides.container}
          hasGap={true}
          className={classNames(projectcss.all, sty.container)}
        >
          <div
            data-plasmic-name={"copyright"}
            data-plasmic-override={overrides.copyright}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.copyright
            )}
          >
            {
              "Copyright 2025, American Society for Surgery of the Hand, All rights reserved. "
            }
          </div>
          <div
            data-plasmic-name={"secondTierNavigation"}
            data-plasmic-override={overrides.secondTierNavigation}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.secondTierNavigation
            )}
          >
            {"Privacy Policy  |  Terms of Use  |  Sitemap"}
          </div>
        </Stack__>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "footer",
    "frame5",
    "group1",
    "social",
    "socialIcon",
    "socialIcon2",
    "socialIcon3",
    "socialIcon4",
    "socialIcon5",
    "columns",
    "frame7",
    "contact",
    "navItemMenu",
    "icon16X16",
    "navigationItem",
    "icon12X12",
    "navItemMenu2",
    "icon16X162",
    "navigationItem2",
    "icon12X122",
    "navItemMenu3",
    "icon16X163",
    "navigationItem3",
    "icon12X123",
    "frame8",
    "navItemMenu4",
    "icon12X124",
    "navigationItem4",
    "icon12X125",
    "navItemMenu5",
    "icon12X126",
    "navigationItem5",
    "icon12X127",
    "buttonSecondary",
    "icon12X128",
    "text",
    "icon12X129",
    "frame27",
    "navItemSimple10",
    "icon12X12144",
    "icon12X12145",
    "frame28",
    "navItemMenu72",
    "icon12X12162",
    "icon12X12163",
    "frame33",
    "navItemSimple13",
    "icon12X12150",
    "icon12X12151",
    "frame34",
    "navItemMenu75",
    "icon12X12168",
    "icon12X12169",
    "frame29",
    "navItemSimple11",
    "icon12X12146",
    "icon12X12147",
    "frame30",
    "navItemMenu73",
    "icon12X12164",
    "icon12X12165",
    "frame31",
    "navItemSimple12",
    "icon12X12148",
    "icon12X12149",
    "frame32",
    "navItemMenu74",
    "icon12X12166",
    "icon12X12167",
    "frame37",
    "navItemSimple15",
    "icon12X12154",
    "icon12X12155",
    "frame38",
    "navItemMenu77",
    "icon12X12172",
    "icon12X12173",
    "frame35",
    "navItemSimple14",
    "icon12X12152",
    "icon12X12153",
    "frame36",
    "navItemMenu76",
    "icon12X12170",
    "icon12X12171",
    "frame39",
    "navItemSimple16",
    "icon12X12156",
    "icon12X12157",
    "frame40",
    "navItemMenu78",
    "icon12X12174",
    "icon12X12175",
    "container",
    "copyright",
    "secondTierNavigation"
  ],

  footer: [
    "footer",
    "frame5",
    "group1",
    "social",
    "socialIcon",
    "socialIcon2",
    "socialIcon3",
    "socialIcon4",
    "socialIcon5",
    "columns",
    "frame7",
    "contact",
    "navItemMenu",
    "icon16X16",
    "navigationItem",
    "icon12X12",
    "navItemMenu2",
    "icon16X162",
    "navigationItem2",
    "icon12X122",
    "navItemMenu3",
    "icon16X163",
    "navigationItem3",
    "icon12X123",
    "frame8",
    "navItemMenu4",
    "icon12X124",
    "navigationItem4",
    "icon12X125",
    "navItemMenu5",
    "icon12X126",
    "navigationItem5",
    "icon12X127",
    "buttonSecondary",
    "icon12X128",
    "text",
    "icon12X129",
    "frame27",
    "navItemSimple10",
    "icon12X12144",
    "icon12X12145",
    "frame28",
    "navItemMenu72",
    "icon12X12162",
    "icon12X12163",
    "frame33",
    "navItemSimple13",
    "icon12X12150",
    "icon12X12151",
    "frame34",
    "navItemMenu75",
    "icon12X12168",
    "icon12X12169",
    "frame29",
    "navItemSimple11",
    "icon12X12146",
    "icon12X12147",
    "frame30",
    "navItemMenu73",
    "icon12X12164",
    "icon12X12165",
    "frame31",
    "navItemSimple12",
    "icon12X12148",
    "icon12X12149",
    "frame32",
    "navItemMenu74",
    "icon12X12166",
    "icon12X12167",
    "frame37",
    "navItemSimple15",
    "icon12X12154",
    "icon12X12155",
    "frame38",
    "navItemMenu77",
    "icon12X12172",
    "icon12X12173",
    "frame35",
    "navItemSimple14",
    "icon12X12152",
    "icon12X12153",
    "frame36",
    "navItemMenu76",
    "icon12X12170",
    "icon12X12171",
    "frame39",
    "navItemSimple16",
    "icon12X12156",
    "icon12X12157",
    "frame40",
    "navItemMenu78",
    "icon12X12174",
    "icon12X12175",
    "container",
    "copyright",
    "secondTierNavigation"
  ],

  frame5: [
    "frame5",
    "group1",
    "social",
    "socialIcon",
    "socialIcon2",
    "socialIcon3",
    "socialIcon4",
    "socialIcon5"
  ],

  group1: ["group1"],
  social: [
    "social",
    "socialIcon",
    "socialIcon2",
    "socialIcon3",
    "socialIcon4",
    "socialIcon5"
  ],

  socialIcon: ["socialIcon"],
  socialIcon2: ["socialIcon2"],
  socialIcon3: ["socialIcon3"],
  socialIcon4: ["socialIcon4"],
  socialIcon5: ["socialIcon5"],
  columns: [
    "columns",
    "frame7",
    "contact",
    "navItemMenu",
    "icon16X16",
    "navigationItem",
    "icon12X12",
    "navItemMenu2",
    "icon16X162",
    "navigationItem2",
    "icon12X122",
    "navItemMenu3",
    "icon16X163",
    "navigationItem3",
    "icon12X123",
    "frame8",
    "navItemMenu4",
    "icon12X124",
    "navigationItem4",
    "icon12X125",
    "navItemMenu5",
    "icon12X126",
    "navigationItem5",
    "icon12X127",
    "buttonSecondary",
    "icon12X128",
    "text",
    "icon12X129",
    "frame27",
    "navItemSimple10",
    "icon12X12144",
    "icon12X12145",
    "frame28",
    "navItemMenu72",
    "icon12X12162",
    "icon12X12163",
    "frame33",
    "navItemSimple13",
    "icon12X12150",
    "icon12X12151",
    "frame34",
    "navItemMenu75",
    "icon12X12168",
    "icon12X12169",
    "frame29",
    "navItemSimple11",
    "icon12X12146",
    "icon12X12147",
    "frame30",
    "navItemMenu73",
    "icon12X12164",
    "icon12X12165",
    "frame31",
    "navItemSimple12",
    "icon12X12148",
    "icon12X12149",
    "frame32",
    "navItemMenu74",
    "icon12X12166",
    "icon12X12167",
    "frame37",
    "navItemSimple15",
    "icon12X12154",
    "icon12X12155",
    "frame38",
    "navItemMenu77",
    "icon12X12172",
    "icon12X12173",
    "frame35",
    "navItemSimple14",
    "icon12X12152",
    "icon12X12153",
    "frame36",
    "navItemMenu76",
    "icon12X12170",
    "icon12X12171",
    "frame39",
    "navItemSimple16",
    "icon12X12156",
    "icon12X12157",
    "frame40",
    "navItemMenu78",
    "icon12X12174",
    "icon12X12175"
  ],

  frame7: [
    "frame7",
    "contact",
    "navItemMenu",
    "icon16X16",
    "navigationItem",
    "icon12X12",
    "navItemMenu2",
    "icon16X162",
    "navigationItem2",
    "icon12X122",
    "navItemMenu3",
    "icon16X163",
    "navigationItem3",
    "icon12X123",
    "frame8",
    "navItemMenu4",
    "icon12X124",
    "navigationItem4",
    "icon12X125",
    "navItemMenu5",
    "icon12X126",
    "navigationItem5",
    "icon12X127",
    "buttonSecondary",
    "icon12X128",
    "text",
    "icon12X129"
  ],

  contact: [
    "contact",
    "navItemMenu",
    "icon16X16",
    "navigationItem",
    "icon12X12",
    "navItemMenu2",
    "icon16X162",
    "navigationItem2",
    "icon12X122",
    "navItemMenu3",
    "icon16X163",
    "navigationItem3",
    "icon12X123"
  ],

  navItemMenu: ["navItemMenu", "icon16X16", "navigationItem", "icon12X12"],
  icon16X16: ["icon16X16"],
  navigationItem: ["navigationItem"],
  icon12X12: ["icon12X12"],
  navItemMenu2: ["navItemMenu2", "icon16X162", "navigationItem2", "icon12X122"],
  icon16X162: ["icon16X162"],
  navigationItem2: ["navigationItem2"],
  icon12X122: ["icon12X122"],
  navItemMenu3: ["navItemMenu3", "icon16X163", "navigationItem3", "icon12X123"],
  icon16X163: ["icon16X163"],
  navigationItem3: ["navigationItem3"],
  icon12X123: ["icon12X123"],
  frame8: [
    "frame8",
    "navItemMenu4",
    "icon12X124",
    "navigationItem4",
    "icon12X125",
    "navItemMenu5",
    "icon12X126",
    "navigationItem5",
    "icon12X127"
  ],

  navItemMenu4: ["navItemMenu4", "icon12X124", "navigationItem4", "icon12X125"],
  icon12X124: ["icon12X124"],
  navigationItem4: ["navigationItem4"],
  icon12X125: ["icon12X125"],
  navItemMenu5: ["navItemMenu5", "icon12X126", "navigationItem5", "icon12X127"],
  icon12X126: ["icon12X126"],
  navigationItem5: ["navigationItem5"],
  icon12X127: ["icon12X127"],
  buttonSecondary: ["buttonSecondary", "icon12X128", "text", "icon12X129"],
  icon12X128: ["icon12X128"],
  text: ["text"],
  icon12X129: ["icon12X129"],
  frame27: [
    "frame27",
    "navItemSimple10",
    "icon12X12144",
    "icon12X12145",
    "frame28",
    "navItemMenu72",
    "icon12X12162",
    "icon12X12163"
  ],

  navItemSimple10: ["navItemSimple10", "icon12X12144", "icon12X12145"],
  icon12X12144: ["icon12X12144"],
  icon12X12145: ["icon12X12145"],
  frame28: ["frame28", "navItemMenu72", "icon12X12162", "icon12X12163"],
  navItemMenu72: ["navItemMenu72", "icon12X12162", "icon12X12163"],
  icon12X12162: ["icon12X12162"],
  icon12X12163: ["icon12X12163"],
  frame33: [
    "frame33",
    "navItemSimple13",
    "icon12X12150",
    "icon12X12151",
    "frame34",
    "navItemMenu75",
    "icon12X12168",
    "icon12X12169"
  ],

  navItemSimple13: ["navItemSimple13", "icon12X12150", "icon12X12151"],
  icon12X12150: ["icon12X12150"],
  icon12X12151: ["icon12X12151"],
  frame34: ["frame34", "navItemMenu75", "icon12X12168", "icon12X12169"],
  navItemMenu75: ["navItemMenu75", "icon12X12168", "icon12X12169"],
  icon12X12168: ["icon12X12168"],
  icon12X12169: ["icon12X12169"],
  frame29: [
    "frame29",
    "navItemSimple11",
    "icon12X12146",
    "icon12X12147",
    "frame30",
    "navItemMenu73",
    "icon12X12164",
    "icon12X12165"
  ],

  navItemSimple11: ["navItemSimple11", "icon12X12146", "icon12X12147"],
  icon12X12146: ["icon12X12146"],
  icon12X12147: ["icon12X12147"],
  frame30: ["frame30", "navItemMenu73", "icon12X12164", "icon12X12165"],
  navItemMenu73: ["navItemMenu73", "icon12X12164", "icon12X12165"],
  icon12X12164: ["icon12X12164"],
  icon12X12165: ["icon12X12165"],
  frame31: [
    "frame31",
    "navItemSimple12",
    "icon12X12148",
    "icon12X12149",
    "frame32",
    "navItemMenu74",
    "icon12X12166",
    "icon12X12167"
  ],

  navItemSimple12: ["navItemSimple12", "icon12X12148", "icon12X12149"],
  icon12X12148: ["icon12X12148"],
  icon12X12149: ["icon12X12149"],
  frame32: ["frame32", "navItemMenu74", "icon12X12166", "icon12X12167"],
  navItemMenu74: ["navItemMenu74", "icon12X12166", "icon12X12167"],
  icon12X12166: ["icon12X12166"],
  icon12X12167: ["icon12X12167"],
  frame37: [
    "frame37",
    "navItemSimple15",
    "icon12X12154",
    "icon12X12155",
    "frame38",
    "navItemMenu77",
    "icon12X12172",
    "icon12X12173"
  ],

  navItemSimple15: ["navItemSimple15", "icon12X12154", "icon12X12155"],
  icon12X12154: ["icon12X12154"],
  icon12X12155: ["icon12X12155"],
  frame38: ["frame38", "navItemMenu77", "icon12X12172", "icon12X12173"],
  navItemMenu77: ["navItemMenu77", "icon12X12172", "icon12X12173"],
  icon12X12172: ["icon12X12172"],
  icon12X12173: ["icon12X12173"],
  frame35: [
    "frame35",
    "navItemSimple14",
    "icon12X12152",
    "icon12X12153",
    "frame36",
    "navItemMenu76",
    "icon12X12170",
    "icon12X12171"
  ],

  navItemSimple14: ["navItemSimple14", "icon12X12152", "icon12X12153"],
  icon12X12152: ["icon12X12152"],
  icon12X12153: ["icon12X12153"],
  frame36: ["frame36", "navItemMenu76", "icon12X12170", "icon12X12171"],
  navItemMenu76: ["navItemMenu76", "icon12X12170", "icon12X12171"],
  icon12X12170: ["icon12X12170"],
  icon12X12171: ["icon12X12171"],
  frame39: [
    "frame39",
    "navItemSimple16",
    "icon12X12156",
    "icon12X12157",
    "frame40",
    "navItemMenu78",
    "icon12X12174",
    "icon12X12175"
  ],

  navItemSimple16: ["navItemSimple16", "icon12X12156", "icon12X12157"],
  icon12X12156: ["icon12X12156"],
  icon12X12157: ["icon12X12157"],
  frame40: ["frame40", "navItemMenu78", "icon12X12174", "icon12X12175"],
  navItemMenu78: ["navItemMenu78", "icon12X12174", "icon12X12175"],
  icon12X12174: ["icon12X12174"],
  icon12X12175: ["icon12X12175"],
  container: ["container", "copyright", "secondTierNavigation"],
  copyright: ["copyright"],
  secondTierNavigation: ["secondTierNavigation"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSectionFooterSection__ArgProps,
          internalVariantPropNames: PlasmicSectionFooterSection__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSectionFooterSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSectionFooterSection";
  } else {
    func.displayName = `PlasmicSectionFooterSection.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionFooterSection = Object.assign(
  // Top-level PlasmicSectionFooterSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    footer: makeNodeComponent("footer"),
    frame5: makeNodeComponent("frame5"),
    group1: makeNodeComponent("group1"),
    social: makeNodeComponent("social"),
    socialIcon: makeNodeComponent("socialIcon"),
    socialIcon2: makeNodeComponent("socialIcon2"),
    socialIcon3: makeNodeComponent("socialIcon3"),
    socialIcon4: makeNodeComponent("socialIcon4"),
    socialIcon5: makeNodeComponent("socialIcon5"),
    columns: makeNodeComponent("columns"),
    frame7: makeNodeComponent("frame7"),
    contact: makeNodeComponent("contact"),
    navItemMenu: makeNodeComponent("navItemMenu"),
    icon16X16: makeNodeComponent("icon16X16"),
    navigationItem: makeNodeComponent("navigationItem"),
    icon12X12: makeNodeComponent("icon12X12"),
    navItemMenu2: makeNodeComponent("navItemMenu2"),
    icon16X162: makeNodeComponent("icon16X162"),
    navigationItem2: makeNodeComponent("navigationItem2"),
    icon12X122: makeNodeComponent("icon12X122"),
    navItemMenu3: makeNodeComponent("navItemMenu3"),
    icon16X163: makeNodeComponent("icon16X163"),
    navigationItem3: makeNodeComponent("navigationItem3"),
    icon12X123: makeNodeComponent("icon12X123"),
    frame8: makeNodeComponent("frame8"),
    navItemMenu4: makeNodeComponent("navItemMenu4"),
    icon12X124: makeNodeComponent("icon12X124"),
    navigationItem4: makeNodeComponent("navigationItem4"),
    icon12X125: makeNodeComponent("icon12X125"),
    navItemMenu5: makeNodeComponent("navItemMenu5"),
    icon12X126: makeNodeComponent("icon12X126"),
    navigationItem5: makeNodeComponent("navigationItem5"),
    icon12X127: makeNodeComponent("icon12X127"),
    buttonSecondary: makeNodeComponent("buttonSecondary"),
    icon12X128: makeNodeComponent("icon12X128"),
    text: makeNodeComponent("text"),
    icon12X129: makeNodeComponent("icon12X129"),
    frame27: makeNodeComponent("frame27"),
    navItemSimple10: makeNodeComponent("navItemSimple10"),
    icon12X12144: makeNodeComponent("icon12X12144"),
    icon12X12145: makeNodeComponent("icon12X12145"),
    frame28: makeNodeComponent("frame28"),
    navItemMenu72: makeNodeComponent("navItemMenu72"),
    icon12X12162: makeNodeComponent("icon12X12162"),
    icon12X12163: makeNodeComponent("icon12X12163"),
    frame33: makeNodeComponent("frame33"),
    navItemSimple13: makeNodeComponent("navItemSimple13"),
    icon12X12150: makeNodeComponent("icon12X12150"),
    icon12X12151: makeNodeComponent("icon12X12151"),
    frame34: makeNodeComponent("frame34"),
    navItemMenu75: makeNodeComponent("navItemMenu75"),
    icon12X12168: makeNodeComponent("icon12X12168"),
    icon12X12169: makeNodeComponent("icon12X12169"),
    frame29: makeNodeComponent("frame29"),
    navItemSimple11: makeNodeComponent("navItemSimple11"),
    icon12X12146: makeNodeComponent("icon12X12146"),
    icon12X12147: makeNodeComponent("icon12X12147"),
    frame30: makeNodeComponent("frame30"),
    navItemMenu73: makeNodeComponent("navItemMenu73"),
    icon12X12164: makeNodeComponent("icon12X12164"),
    icon12X12165: makeNodeComponent("icon12X12165"),
    frame31: makeNodeComponent("frame31"),
    navItemSimple12: makeNodeComponent("navItemSimple12"),
    icon12X12148: makeNodeComponent("icon12X12148"),
    icon12X12149: makeNodeComponent("icon12X12149"),
    frame32: makeNodeComponent("frame32"),
    navItemMenu74: makeNodeComponent("navItemMenu74"),
    icon12X12166: makeNodeComponent("icon12X12166"),
    icon12X12167: makeNodeComponent("icon12X12167"),
    frame37: makeNodeComponent("frame37"),
    navItemSimple15: makeNodeComponent("navItemSimple15"),
    icon12X12154: makeNodeComponent("icon12X12154"),
    icon12X12155: makeNodeComponent("icon12X12155"),
    frame38: makeNodeComponent("frame38"),
    navItemMenu77: makeNodeComponent("navItemMenu77"),
    icon12X12172: makeNodeComponent("icon12X12172"),
    icon12X12173: makeNodeComponent("icon12X12173"),
    frame35: makeNodeComponent("frame35"),
    navItemSimple14: makeNodeComponent("navItemSimple14"),
    icon12X12152: makeNodeComponent("icon12X12152"),
    icon12X12153: makeNodeComponent("icon12X12153"),
    frame36: makeNodeComponent("frame36"),
    navItemMenu76: makeNodeComponent("navItemMenu76"),
    icon12X12170: makeNodeComponent("icon12X12170"),
    icon12X12171: makeNodeComponent("icon12X12171"),
    frame39: makeNodeComponent("frame39"),
    navItemSimple16: makeNodeComponent("navItemSimple16"),
    icon12X12156: makeNodeComponent("icon12X12156"),
    icon12X12157: makeNodeComponent("icon12X12157"),
    frame40: makeNodeComponent("frame40"),
    navItemMenu78: makeNodeComponent("navItemMenu78"),
    icon12X12174: makeNodeComponent("icon12X12174"),
    icon12X12175: makeNodeComponent("icon12X12175"),
    container: makeNodeComponent("container"),
    copyright: makeNodeComponent("copyright"),
    secondTierNavigation: makeNodeComponent("secondTierNavigation"),
    // Metadata about props expected for PlasmicSectionFooterSection
    internalVariantProps: PlasmicSectionFooterSection__VariantProps,
    internalArgProps: PlasmicSectionFooterSection__ArgProps
  }
);

export default PlasmicSectionFooterSection;
/* prettier-ignore-end */
