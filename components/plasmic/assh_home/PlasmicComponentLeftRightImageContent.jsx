/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: Fbqd2pDdEbk7
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicComponentLeftRightImageContent.module.css"; // plasmic-import: Fbqd2pDdEbk7/css

createPlasmicElementProxy;

export const PlasmicComponentLeftRightImageContent__VariantProps = new Array(
  "rightImage"
);

export const PlasmicComponentLeftRightImageContent__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicComponentLeftRightImageContent__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "rightImage",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.rightImage
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        { [sty.rootrightImage]: hasVariant($state, "rightImage", "rightImage") }
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"frame3"}
        data-plasmic-override={overrides.frame3}
        hasGap={true}
        className={classNames(projectcss.all, sty.frame3)}
      >
        <div
          data-plasmic-name={"column"}
          data-plasmic-override={overrides.column}
          className={classNames(projectcss.all, sty.column)}
        />

        <Stack__
          as={"div"}
          data-plasmic-name={"frame7"}
          data-plasmic-override={overrides.frame7}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame7)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__aS8AM
            )}
          >
            {"Job Market for Hand Surgeons"}
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__zZ3Gx,
              {
                [sty.textrightImage__zZ3GxARrzf]: hasVariant(
                  $state,
                  "rightImage",
                  "rightImage"
                )
              }
            )}
          >
            {
              "The job market for hand surgery has been stable for many years. There are always more job openings per year than the number of hand surgery fellows who are completing their training. The American Society for Surgery of the Hand website offers a space for job seekers to post resumes, and hand surgeon employers to post positions. Visit the\u00a0Jobs section\u00a0to learn more."
            }
          </div>
        </Stack__>
      </Stack__>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "frame3", "column", "frame7"],
  frame3: ["frame3", "column", "frame7"],
  column: ["column"],
  frame7: ["frame7"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicComponentLeftRightImageContent__ArgProps,
          internalVariantPropNames:
            PlasmicComponentLeftRightImageContent__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicComponentLeftRightImageContent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicComponentLeftRightImageContent";
  } else {
    func.displayName = `PlasmicComponentLeftRightImageContent.${nodeName}`;
  }
  return func;
}

export const PlasmicComponentLeftRightImageContent = Object.assign(
  // Top-level PlasmicComponentLeftRightImageContent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    frame3: makeNodeComponent("frame3"),
    column: makeNodeComponent("column"),
    frame7: makeNodeComponent("frame7"),
    // Metadata about props expected for PlasmicComponentLeftRightImageContent
    internalVariantProps: PlasmicComponentLeftRightImageContent__VariantProps,
    internalArgProps: PlasmicComponentLeftRightImageContent__ArgProps
  }
);

export default PlasmicComponentLeftRightImageContent;
/* prettier-ignore-end */
