/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: xnR31SmiTDW4
import * as React from "react";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicContentfulContents.module.css"; // plasmic-import: xnR31SmiTDW4/css

createPlasmicElementProxy;

export const PlasmicContentfulContents__VariantProps = new Array();

export const PlasmicContentfulContents__ArgProps = new Array("contents");

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicContentfulContents__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        "contentful-content"
      )}
    >
      <Embed
        data-plasmic-name={"embedHtml"}
        data-plasmic-override={overrides.embedHtml}
        className={classNames("__wab_instance", sty.embedHtml)}
        code={(() => {
          try {
            return (() => {
              let html = "";
              if ($props.contents) {
                $props.contents.forEach(item => {
                  if (item.content) {
                    item.content.forEach(citem => {
                      if (citem.nodeType == "hyperlink") {
                        citem.content.forEach(itemnode => {
                          html += `<div class="${citem.nodeType}"><a href="${citem.data.uri}">${itemnode.value}</a></div>`;
                        });
                      } else {
                        html += `<div class="${item.nodeType}">${citem.value}</div>`;
                      }
                    });
                  }
                });
              }
              return `<div class="contentfulcontents">${html}</div>`;
            })();
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "<div>Paste your embed code via the right sidebar</div>";
            }
            throw e;
          }
        })()}
      />
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "embedHtml"],
  embedHtml: ["embedHtml"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicContentfulContents__ArgProps,
          internalVariantPropNames: PlasmicContentfulContents__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicContentfulContents__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicContentfulContents";
  } else {
    func.displayName = `PlasmicContentfulContents.${nodeName}`;
  }
  return func;
}

export const PlasmicContentfulContents = Object.assign(
  // Top-level PlasmicContentfulContents renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    embedHtml: makeNodeComponent("embedHtml"),
    // Metadata about props expected for PlasmicContentfulContents
    internalVariantProps: PlasmicContentfulContents__VariantProps,
    internalArgProps: PlasmicContentfulContents__ArgProps
  }
);

export default PlasmicContentfulContents;
/* prettier-ignore-end */
