/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: kBvjOsoSkGDp
import * as React from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import ItemMenuLinkItem from "../../ItemMenuLinkItem"; // plasmic-import: MET00VyMH6Cv/component
import MenuExploreAsshDropdown from "../../MenuExploreAsshDropdown"; // plasmic-import: oIPk7PUdbLu5/component
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: -2HqLDJqJBwh/component
import ItemMenuCurrentUser from "../../ItemMenuCurrentUser"; // plasmic-import: zbpbv6MhDowI/component
import { useScreenVariants as useScreenVariantsdjBtUr72ZExV } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: DJBtUr72ZExV/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicMenuMegaMenuJakeTest.module.css"; // plasmic-import: kBvjOsoSkGDp/css
import CloseBoldSvgrepoComSvgIcon from "./icons/PlasmicIcon__CloseBoldSvgrepoComSvg"; // plasmic-import: kgKw8A-hT9fj/icon
import StoreSvgIcon from "./icons/PlasmicIcon__StoreSvg"; // plasmic-import: dpcKEE_taXyj/icon
import SearchSvgrepoComSvgIcon from "./icons/PlasmicIcon__SearchSvgrepoComSvg"; // plasmic-import: 2p_-OD5ovH0K/icon
import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: r4GsAl932zAm/icon

createPlasmicElementProxy;

export const PlasmicMenuMegaMenuJakeTest__VariantProps = new Array();

export const PlasmicMenuMegaMenuJakeTest__ArgProps = new Array(
  "exploreOpen",
  "onExploreOpenChange",
  "cartQuantity",
  "accountName",
  "imgUrl",
  "accountImageUrl"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMenuMegaMenuJakeTest__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          cartQuantity: 0,
          accountName: "Account"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "exploreOpen",
        type: "writable",
        variableType: "boolean",
        valueProp: "exploreOpen",
        onChangeProp: "onExploreOpenChange"
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    utilityNav: usePlasmicDataOp(() => {
      return {
        sourceId: "tbVV8SR67UpQ6Z9zuPcDPB",
        opId: "858b15fe-df67-4026-84b1-0b1a68e1122d",
        userArgs: {},
        cacheKey: `plasmic.$.858b15fe-df67-4026-84b1-0b1a68e1122d.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    query2: usePlasmicDataOp(() => {
      return {
        sourceId: "tbVV8SR67UpQ6Z9zuPcDPB",
        opId: "c89fcc75-a075-4fea-8f4f-d44115f026b1",
        userArgs: {},
        cacheKey: `plasmic.$.c89fcc75-a075-4fea-8f4f-d44115f026b1.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getExploreDropdown: usePlasmicDataOp(() => {
      return {
        sourceId: "tbVV8SR67UpQ6Z9zuPcDPB",
        opId: "fcf773fa-bc2c-4450-a5c3-4bf1758c6f3f",
        userArgs: {},
        cacheKey: `plasmic.$.fcf773fa-bc2c-4450-a5c3-4bf1758c6f3f.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getImage: usePlasmicDataOp(() => {
      return {
        sourceId: "n5sYZavh6xkK4D8BEueUSq",
        opId: "515110a1-5998-4e90-a360-48af6b25eebe",
        userArgs: {},
        cacheKey: `plasmic.$.515110a1-5998-4e90-a360-48af6b25eebe.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsdjBtUr72ZExV()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <section
        data-plasmic-name={"exploreDropdown"}
        data-plasmic-override={overrides.exploreDropdown}
        className={classNames(projectcss.all, sty.exploreDropdown)}
      >
        <PlasmicLink__
          data-plasmic-name={"closeLink"}
          data-plasmic-override={overrides.closeLink}
          className={classNames(projectcss.all, projectcss.a, sty.closeLink)}
          component={Link}
          platform={"nextjs"}
        >
          <CloseBoldSvgrepoComSvgIcon
            data-plasmic-name={"closeIcon2"}
            data-plasmic-override={overrides.closeIcon2}
            className={classNames(projectcss.all, sty.closeIcon2)}
            role={"img"}
          />
        </PlasmicLink__>
        {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
          (() => {
            try {
              return $queries.getExploreDropdown.data.response.items;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
        ).map((__plasmic_item_0, __plasmic_idx_0) => {
          const currentItem = __plasmic_item_0;
          const currentIndex = __plasmic_idx_0;
          return (
            <div
              className={classNames(projectcss.all, sty.freeBox___1Viax)}
              key={currentIndex}
            >
              <div className={classNames(projectcss.all, sty.freeBox__zn6X)}>
                <ItemMenuLinkItem
                  data-plasmic-name={"itemMenuLinkItem"}
                  data-plasmic-override={overrides.itemMenuLinkItem}
                  assetId={(() => {
                    try {
                      return currentItem.fields.icon.sys.id;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  className={classNames("__wab_instance", sty.itemMenuLinkItem)}
                  label={(() => {
                    try {
                      return currentItem.fields.label;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  url={(() => {
                    try {
                      return currentItem.fields.url;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "https://www.assh.org";
                      }
                      throw e;
                    }
                  })()}
                />
              </div>
            </div>
          );
        })}
      </section>
      <div className={classNames(projectcss.all, sty.freeBox__ttHkv)}>
        <div
          data-plasmic-name={"topBar"}
          data-plasmic-override={overrides.topBar}
          className={classNames(projectcss.all, sty.topBar)}
        >
          <section
            data-plasmic-name={"topBarExplore"}
            data-plasmic-override={overrides.topBarExplore}
            className={classNames(projectcss.all, sty.topBarExplore)}
          >
            <MenuExploreAsshDropdown
              data-plasmic-name={"menuExploreAsshDropdown"}
              data-plasmic-override={overrides.menuExploreAsshDropdown}
              className={classNames(
                "__wab_instance",
                sty.menuExploreAsshDropdown
              )}
            />
          </section>
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__cd1Xp)}>
        <div
          data-plasmic-name={"logoBar"}
          data-plasmic-override={overrides.logoBar}
          className={classNames(projectcss.all, sty.logoBar)}
        >
          <section
            data-plasmic-name={"logoBarLeft"}
            data-plasmic-override={overrides.logoBarLeft}
            className={classNames(projectcss.all, sty.logoBarLeft)}
          >
            <div
              data-plasmic-name={"exploreAsshDropdownButton3"}
              data-plasmic-override={overrides.exploreAsshDropdownButton3}
              className={classNames(
                projectcss.all,
                sty.exploreAsshDropdownButton3
              )}
            >
              <PlasmicImg__
                data-plasmic-name={"hands"}
                data-plasmic-override={overrides.hands}
                alt={""}
                className={classNames(sty.hands)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "smallDesktop")
                    ? "40px"
                    : "80px"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={
                  hasVariant(globalVariants, "screen", "smallMobile")
                    ? "auto"
                    : hasVariant(globalVariants, "screen", "smallDesktop")
                    ? "40px"
                    : "80px"
                }
                loading={"lazy"}
                src={{
                  src: "/plasmic/assh_home/images/hands3Color.svg",
                  fullWidth: 80,
                  fullHeight: 80,
                  aspectRatio: 1
                }}
              />

              <PlasmicImg__
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={
                  hasVariant(globalVariants, "screen", "smallMobile")
                    ? "auto"
                    : hasVariant(globalVariants, "screen", "smallDesktop")
                    ? "30px"
                    : "40px"
                }
                displayMaxHeight={"none"}
                displayMaxWidth={"none"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={{
                  src: "/plasmic/assh_home/images/logotextPng.png",
                  fullWidth: 440,
                  fullHeight: 55,
                  aspectRatio: undefined
                }}
              />
            </div>
          </section>
          <section
            data-plasmic-name={"logoBarRight"}
            data-plasmic-override={overrides.logoBarRight}
            className={classNames(projectcss.all, sty.logoBarRight)}
          >
            <div className={classNames(projectcss.all, sty.freeBox___4Bngm)}>
              <PlasmicLink__
                data-plasmic-name={"foundationLink"}
                data-plasmic-override={overrides.foundationLink}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.foundationLink
                )}
                component={Link}
                platform={"nextjs"}
              >
                <div
                  data-plasmic-name={"foundation"}
                  data-plasmic-override={overrides.foundation}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.foundation
                  )}
                >
                  {"Foundation"}
                </div>
              </PlasmicLink__>
              <section
                data-plasmic-name={"menuBar"}
                data-plasmic-override={overrides.menuBar}
                className={classNames(projectcss.all, sty.menuBar)}
              />

              <PlasmicLink__
                data-plasmic-name={"memberDirectoryLink"}
                data-plasmic-override={overrides.memberDirectoryLink}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.memberDirectoryLink
                )}
                component={Link}
                platform={"nextjs"}
              >
                <div
                  data-plasmic-name={"memberDirectory"}
                  data-plasmic-override={overrides.memberDirectory}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.memberDirectory
                  )}
                >
                  {"Member Directory"}
                </div>
              </PlasmicLink__>
              <section
                data-plasmic-name={"menuBar2"}
                data-plasmic-override={overrides.menuBar2}
                className={classNames(projectcss.all, sty.menuBar2)}
              />

              <PlasmicLink__
                data-plasmic-name={"storeLink"}
                data-plasmic-override={overrides.storeLink}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  sty.storeLink
                )}
                component={Link}
                platform={"nextjs"}
              >
                <StoreSvgIcon
                  className={classNames(projectcss.all, sty.svg__nblr)}
                  role={"img"}
                />

                <div
                  data-plasmic-name={"store"}
                  data-plasmic-override={overrides.store}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.store
                  )}
                >
                  {"Store"}
                </div>
              </PlasmicLink__>
              <Stack__
                as={"div"}
                data-plasmic-name={"rightButtons"}
                data-plasmic-override={overrides.rightButtons}
                hasGap={true}
                className={classNames(projectcss.all, sty.rightButtons)}
              >
                <ButtonPrimary
                  data-plasmic-name={"buttonPrimary"}
                  data-plasmic-override={overrides.buttonPrimary}
                  className={classNames("__wab_instance", sty.buttonPrimary)}
                  text={"Dashboard"}
                  url={"https://www.assh.org/dashboard"}
                />

                <ItemMenuCurrentUser
                  data-plasmic-name={"itemMenuCurrentUser"}
                  data-plasmic-override={overrides.itemMenuCurrentUser}
                  className={classNames(
                    "__wab_instance",
                    sty.itemMenuCurrentUser
                  )}
                />

                <PlasmicLink__
                  data-plasmic-name={"link"}
                  data-plasmic-override={overrides.link}
                  className={classNames(projectcss.all, projectcss.a, sty.link)}
                  component={Link}
                  platform={"nextjs"}
                >
                  <SearchSvgrepoComSvgIcon
                    className={classNames(projectcss.all, sty.svg___1Jbnu)}
                    role={"img"}
                  />
                </PlasmicLink__>
              </Stack__>
            </div>
          </section>
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__b93L9)} />
      <div className={classNames(projectcss.all, sty.freeBox__yrUmN)}>
        <div
          data-plasmic-name={"nav"}
          data-plasmic-override={overrides.nav}
          className={classNames(projectcss.all, sty.nav)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__nSTox)}>
            <PlasmicLink__
              data-plasmic-name={"educationLink"}
              data-plasmic-override={overrides.educationLink}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.educationLink
              )}
              component={Link}
              platform={"nextjs"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dqpX
                )}
              >
                {"Education"}
              </div>
              <ChevronDownIcon
                className={classNames(projectcss.all, sty.svg__pJRpH)}
                role={"img"}
              />
            </PlasmicLink__>
            <PlasmicLink__
              data-plasmic-name={"membershipLink"}
              data-plasmic-override={overrides.membershipLink}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.membershipLink
              )}
              component={Link}
              platform={"nextjs"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bb6Ck
                )}
              >
                {"Membership"}
              </div>
              <ChevronDownIcon
                className={classNames(projectcss.all, sty.svg__w0YSw)}
                role={"img"}
              />
            </PlasmicLink__>
            <PlasmicLink__
              data-plasmic-name={"meetingsLink"}
              data-plasmic-override={overrides.meetingsLink}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.meetingsLink
              )}
              component={Link}
              platform={"nextjs"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___4ElRp
                )}
              >
                {"Meetings"}
              </div>
              <ChevronDownIcon
                className={classNames(projectcss.all, sty.svg__yeu6T)}
                role={"img"}
              />
            </PlasmicLink__>
            <PlasmicLink__
              data-plasmic-name={"advocacyLink"}
              data-plasmic-override={overrides.advocacyLink}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.advocacyLink
              )}
              component={Link}
              platform={"nextjs"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nljNx
                )}
              >
                {"Advocacy"}
              </div>
              <ChevronDownIcon
                className={classNames(projectcss.all, sty.svg___1Gwti)}
                role={"img"}
              />
            </PlasmicLink__>
            <PlasmicLink__
              data-plasmic-name={"researchLink"}
              data-plasmic-override={overrides.researchLink}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.researchLink
              )}
              component={Link}
              platform={"nextjs"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__bU2R
                )}
              >
                {"Research"}
              </div>
              <ChevronDownIcon
                className={classNames(projectcss.all, sty.svg__ptSPo)}
                role={"img"}
              />
            </PlasmicLink__>
            <PlasmicLink__
              data-plasmic-name={"newsLink"}
              data-plasmic-override={overrides.newsLink}
              className={classNames(projectcss.all, projectcss.a, sty.newsLink)}
              component={Link}
              platform={"nextjs"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text___7Vmuj
                )}
              >
                {"News & Publications"}
              </div>
              <ChevronDownIcon
                className={classNames(projectcss.all, sty.svg__nHhTi)}
                role={"img"}
              />
            </PlasmicLink__>
            <PlasmicLink__
              data-plasmic-name={"aboutLink"}
              data-plasmic-override={overrides.aboutLink}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.aboutLink
              )}
              component={Link}
              platform={"nextjs"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vPx8
                )}
              >
                {"About"}
              </div>
              <ChevronDownIcon
                className={classNames(projectcss.all, sty.svg__hqDYx)}
                role={"img"}
              />
            </PlasmicLink__>
            <PlasmicLink__
              data-plasmic-name={"resourcesDropdown"}
              data-plasmic-override={overrides.resourcesDropdown}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.resourcesDropdown
              )}
              component={Link}
              platform={"nextjs"}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__nlgrj
                )}
              >
                {"Resources For"}
              </div>
              <ChevronDownIcon
                className={classNames(projectcss.all, sty.svg__f7Zd1)}
                role={"img"}
              />
            </PlasmicLink__>
          </div>
        </div>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__nPsNo)} />
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "exploreDropdown",
    "closeLink",
    "closeIcon2",
    "itemMenuLinkItem",
    "topBar",
    "topBarExplore",
    "menuExploreAsshDropdown",
    "logoBar",
    "logoBarLeft",
    "exploreAsshDropdownButton3",
    "hands",
    "img",
    "logoBarRight",
    "foundationLink",
    "foundation",
    "menuBar",
    "memberDirectoryLink",
    "memberDirectory",
    "menuBar2",
    "storeLink",
    "store",
    "rightButtons",
    "buttonPrimary",
    "itemMenuCurrentUser",
    "link",
    "nav",
    "educationLink",
    "membershipLink",
    "meetingsLink",
    "advocacyLink",
    "researchLink",
    "newsLink",
    "aboutLink",
    "resourcesDropdown"
  ],

  exploreDropdown: [
    "exploreDropdown",
    "closeLink",
    "closeIcon2",
    "itemMenuLinkItem"
  ],

  closeLink: ["closeLink", "closeIcon2"],
  closeIcon2: ["closeIcon2"],
  itemMenuLinkItem: ["itemMenuLinkItem"],
  topBar: ["topBar", "topBarExplore", "menuExploreAsshDropdown"],
  topBarExplore: ["topBarExplore", "menuExploreAsshDropdown"],
  menuExploreAsshDropdown: ["menuExploreAsshDropdown"],
  logoBar: [
    "logoBar",
    "logoBarLeft",
    "exploreAsshDropdownButton3",
    "hands",
    "img",
    "logoBarRight",
    "foundationLink",
    "foundation",
    "menuBar",
    "memberDirectoryLink",
    "memberDirectory",
    "menuBar2",
    "storeLink",
    "store",
    "rightButtons",
    "buttonPrimary",
    "itemMenuCurrentUser",
    "link"
  ],

  logoBarLeft: ["logoBarLeft", "exploreAsshDropdownButton3", "hands", "img"],
  exploreAsshDropdownButton3: ["exploreAsshDropdownButton3", "hands", "img"],
  hands: ["hands"],
  img: ["img"],
  logoBarRight: [
    "logoBarRight",
    "foundationLink",
    "foundation",
    "menuBar",
    "memberDirectoryLink",
    "memberDirectory",
    "menuBar2",
    "storeLink",
    "store",
    "rightButtons",
    "buttonPrimary",
    "itemMenuCurrentUser",
    "link"
  ],

  foundationLink: ["foundationLink", "foundation"],
  foundation: ["foundation"],
  menuBar: ["menuBar"],
  memberDirectoryLink: ["memberDirectoryLink", "memberDirectory"],
  memberDirectory: ["memberDirectory"],
  menuBar2: ["menuBar2"],
  storeLink: ["storeLink", "store"],
  store: ["store"],
  rightButtons: [
    "rightButtons",
    "buttonPrimary",
    "itemMenuCurrentUser",
    "link"
  ],

  buttonPrimary: ["buttonPrimary"],
  itemMenuCurrentUser: ["itemMenuCurrentUser"],
  link: ["link"],
  nav: [
    "nav",
    "educationLink",
    "membershipLink",
    "meetingsLink",
    "advocacyLink",
    "researchLink",
    "newsLink",
    "aboutLink",
    "resourcesDropdown"
  ],

  educationLink: ["educationLink"],
  membershipLink: ["membershipLink"],
  meetingsLink: ["meetingsLink"],
  advocacyLink: ["advocacyLink"],
  researchLink: ["researchLink"],
  newsLink: ["newsLink"],
  aboutLink: ["aboutLink"],
  resourcesDropdown: ["resourcesDropdown"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMenuMegaMenuJakeTest__ArgProps,
          internalVariantPropNames: PlasmicMenuMegaMenuJakeTest__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMenuMegaMenuJakeTest__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMenuMegaMenuJakeTest";
  } else {
    func.displayName = `PlasmicMenuMegaMenuJakeTest.${nodeName}`;
  }
  return func;
}

export const PlasmicMenuMegaMenuJakeTest = Object.assign(
  // Top-level PlasmicMenuMegaMenuJakeTest renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    exploreDropdown: makeNodeComponent("exploreDropdown"),
    closeLink: makeNodeComponent("closeLink"),
    closeIcon2: makeNodeComponent("closeIcon2"),
    itemMenuLinkItem: makeNodeComponent("itemMenuLinkItem"),
    topBar: makeNodeComponent("topBar"),
    topBarExplore: makeNodeComponent("topBarExplore"),
    menuExploreAsshDropdown: makeNodeComponent("menuExploreAsshDropdown"),
    logoBar: makeNodeComponent("logoBar"),
    logoBarLeft: makeNodeComponent("logoBarLeft"),
    exploreAsshDropdownButton3: makeNodeComponent("exploreAsshDropdownButton3"),
    hands: makeNodeComponent("hands"),
    img: makeNodeComponent("img"),
    logoBarRight: makeNodeComponent("logoBarRight"),
    foundationLink: makeNodeComponent("foundationLink"),
    foundation: makeNodeComponent("foundation"),
    menuBar: makeNodeComponent("menuBar"),
    memberDirectoryLink: makeNodeComponent("memberDirectoryLink"),
    memberDirectory: makeNodeComponent("memberDirectory"),
    menuBar2: makeNodeComponent("menuBar2"),
    storeLink: makeNodeComponent("storeLink"),
    store: makeNodeComponent("store"),
    rightButtons: makeNodeComponent("rightButtons"),
    buttonPrimary: makeNodeComponent("buttonPrimary"),
    itemMenuCurrentUser: makeNodeComponent("itemMenuCurrentUser"),
    link: makeNodeComponent("link"),
    nav: makeNodeComponent("nav"),
    educationLink: makeNodeComponent("educationLink"),
    membershipLink: makeNodeComponent("membershipLink"),
    meetingsLink: makeNodeComponent("meetingsLink"),
    advocacyLink: makeNodeComponent("advocacyLink"),
    researchLink: makeNodeComponent("researchLink"),
    newsLink: makeNodeComponent("newsLink"),
    aboutLink: makeNodeComponent("aboutLink"),
    resourcesDropdown: makeNodeComponent("resourcesDropdown"),
    // Metadata about props expected for PlasmicMenuMegaMenuJakeTest
    internalVariantProps: PlasmicMenuMegaMenuJakeTest__VariantProps,
    internalArgProps: PlasmicMenuMegaMenuJakeTest__ArgProps
  }
);

export default PlasmicMenuMegaMenuJakeTest;
/* prettier-ignore-end */
