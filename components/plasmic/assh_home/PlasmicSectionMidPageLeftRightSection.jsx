/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: ooBF5SQo3_hl
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import { useScreenVariants as useScreenVariantsdjBtUr72ZExV } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: DJBtUr72ZExV/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicSectionMidPageLeftRightSection.module.css"; // plasmic-import: ooBF5SQo3_hl/css

createPlasmicElementProxy;

export const PlasmicSectionMidPageLeftRightSection__VariantProps = new Array(
  "leftOrRight"
);

export const PlasmicSectionMidPageLeftRightSection__ArgProps = new Array(
  "title"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSectionMidPageLeftRightSection__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          title: "Hero: Become a Hand Surgeon - Certification"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "leftOrRight",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.leftOrRight
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    getImage: usePlasmicDataOp(() => {
      return {
        sourceId: "n5sYZavh6xkK4D8BEueUSq",
        opId: "0c2afc0b-6aa8-47c9-b10b-6228850bafaf",
        userArgs: {
          path: [
            $queries.getHeroContent.data.response.items[0].fields
              .backgroundImage.sys.id
          ]
        },
        cacheKey: `plasmic.$.0c2afc0b-6aa8-47c9-b10b-6228850bafaf.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getHeroContent: usePlasmicDataOp(() => {
      return {
        sourceId: "tbVV8SR67UpQ6Z9zuPcDPB",
        opId: "84ab1dbe-22a0-4ab0-b1ff-3bd83c164121",
        userArgs: {
          params: [$props.title]
        },
        cacheKey: `plasmic.$.84ab1dbe-22a0-4ab0-b1ff-3bd83c164121.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsdjBtUr72ZExV()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootleftOrRight_left]: hasVariant($state, "leftOrRight", "left"),
          [sty.rootleftOrRight_right]: hasVariant(
            $state,
            "leftOrRight",
            "right"
          )
        }
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__a5INw)}>
        <Stack__
          as={"div"}
          data-plasmic-name={"columns"}
          data-plasmic-override={overrides.columns}
          hasGap={true}
          className={classNames(projectcss.all, sty.columns, {
            [sty.columnsleftOrRight_left]: hasVariant(
              $state,
              "leftOrRight",
              "left"
            ),
            [sty.columnsleftOrRight_right]: hasVariant(
              $state,
              "leftOrRight",
              "right"
            )
          })}
        >
          <div className={classNames(projectcss.all, sty.column__pSpRv)}>
            <div className={classNames(projectcss.all, sty.freeBox__wpOaW)}>
              <Embed
                className={classNames("__wab_instance", sty.embedHtml___7Wj2)}
                code={(() => {
                  try {
                    return (() => {
                      return `<div style="
  width: 100%;
  height: 100%;
  background-image: url(${$queries.getImage.data.response.fields.file.url});
  background-size: cover;
  background-position: center;
  background-repeat: no-repeat;
"></div>`;
                    })();
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              />
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.column__s4GwT)}>
            <Stack__
              as={"div"}
              data-plasmic-name={"frame7"}
              data-plasmic-override={overrides.frame7}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame7)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"frame8"}
                data-plasmic-override={overrides.frame8}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame8)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__jAIF
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $queries.getHeroContent.data.response.items[0]
                          .fields.header;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Test Your Knowledge";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </Stack__>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__hI02Y,
                  {
                    [sty.textleftOrRight_left__hI02YBj4Bo]: hasVariant(
                      $state,
                      "leftOrRight",
                      "left"
                    )
                  }
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $queries.getHeroContent.data.response.items[0]
                        .fields.subheader;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Sharpen your skills, prepare for recertification, and stay current \u2014 all on your schedule. The ASSH Self-Assessment Exam is your trusted tool for advancing upper extremity expertise with confidence.";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <Embed
                className={classNames("__wab_instance", sty.embedHtml__q8Lus, {
                  [sty.embedHtmlleftOrRight_left__q8Lusbj4Bo]: hasVariant(
                    $state,
                    "leftOrRight",
                    "left"
                  )
                })}
                code={(() => {
                  try {
                    return $queries.getHeroContent.data.response.items[0].fields
                      .description;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "<div>Paste your embed code via the right sidebar</div>";
                    }
                    throw e;
                  }
                })()}
              />
            </Stack__>
          </div>
        </Stack__>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "columns", "frame7", "frame8"],
  columns: ["columns", "frame7", "frame8"],
  frame7: ["frame7", "frame8"],
  frame8: ["frame8"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSectionMidPageLeftRightSection__ArgProps,
          internalVariantPropNames:
            PlasmicSectionMidPageLeftRightSection__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSectionMidPageLeftRightSection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSectionMidPageLeftRightSection";
  } else {
    func.displayName = `PlasmicSectionMidPageLeftRightSection.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionMidPageLeftRightSection = Object.assign(
  // Top-level PlasmicSectionMidPageLeftRightSection renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    frame7: makeNodeComponent("frame7"),
    frame8: makeNodeComponent("frame8"),
    // Metadata about props expected for PlasmicSectionMidPageLeftRightSection
    internalVariantProps: PlasmicSectionMidPageLeftRightSection__VariantProps,
    internalArgProps: PlasmicSectionMidPageLeftRightSection__ArgProps
  }
);

export default PlasmicSectionMidPageLeftRightSection;
/* prettier-ignore-end */
