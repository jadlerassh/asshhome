/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: jiQVfwnxU6BH
import * as React from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: -2HqLDJqJBwh/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicItemEventCardItemFullCard.module.css"; // plasmic-import: jiQVfwnxU6BH/css
import ContainerIcon from "./icons/PlasmicIcon__Container"; // plasmic-import: LdpaQ2yuf9hP/icon
import Container2Icon from "./icons/PlasmicIcon__Container2"; // plasmic-import: TKWn1DDMMFQp/icon
import Container6Icon from "./icons/PlasmicIcon__Container6"; // plasmic-import: GEVyXgFi5rGf/icon
import Container7Icon from "./icons/PlasmicIcon__Container7"; // plasmic-import: HGdSWGp34SXV/icon

createPlasmicElementProxy;

export const PlasmicItemEventCardItemFullCard__VariantProps = new Array();

export const PlasmicItemEventCardItemFullCard__ArgProps = new Array(
  "imageUrl",
  "title",
  "dates",
  "location",
  "regUrl",
  "infoUrl"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicItemEventCardItemFullCard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          imageUrl:
            "//images.ctfassets.net/k626j787po4v/3qPHHz9Wq7WTO5pHCAmuR8/0338aab922d07f2f99329acc70a77c06/AdobeStock_825115517_final.jpg",
          title: "##th Annual Meeting of the ASSH",
          dates: "Thursday, October 9, 2025 - Saturday, October 11, 2025",
          location: "Vancouver Convention Centre \u2013 Vancouver, BC, Canada",
          regUrl: "https://www.assh.org/annualmeeting/registration",
          infoUrl: "https://www.assh.org/annualmeeting/"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"articleImageCard"}
        data-plasmic-override={overrides.articleImageCard}
        className={classNames(projectcss.all, sty.articleImageCard)}
      >
        <div
          data-plasmic-name={"image"}
          data-plasmic-override={overrides.image}
          className={classNames(projectcss.all, sty.image)}
        >
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"100%"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"100%"}
            loading={"lazy"}
            src={(() => {
              try {
                return $props.imageUrl;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />
        </div>
        <Stack__
          as={"div"}
          data-plasmic-name={"content"}
          data-plasmic-override={overrides.content}
          hasGap={true}
          className={classNames(projectcss.all, sty.content)}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"frame3"}
            data-plasmic-override={overrides.frame3}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame3)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"navItemMenu"}
              data-plasmic-override={overrides.navItemMenu}
              hasGap={true}
              className={classNames(projectcss.all, sty.navItemMenu)}
            >
              {false ? (
                <Stack__
                  as={"div"}
                  data-plasmic-name={"icon12X12"}
                  data-plasmic-override={overrides.icon12X12}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.icon12X12)}
                >
                  <Stack__
                    as={ContainerIcon}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.svg__lByDu)}
                    role={"img"}
                  />
                </Stack__>
              ) : null}
              <PlasmicLink__
                data-plasmic-name={"navigationItem"}
                data-plasmic-override={overrides.navigationItem}
                className={classNames(
                  projectcss.all,
                  projectcss.a,
                  projectcss.__wab_text,
                  sty.navigationItem
                )}
                component={Link}
                href={(() => {
                  try {
                    return $props.infoUrl;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                platform={"nextjs"}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.title;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "80th Annual Meeting of the ASSH";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </PlasmicLink__>
              {false ? (
                <Stack__
                  as={"div"}
                  data-plasmic-name={"icon12X122"}
                  data-plasmic-override={overrides.icon12X122}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.icon12X122)}
                >
                  <Stack__
                    as={Container2Icon}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.svg__n0HeU)}
                    role={"img"}
                  />
                </Stack__>
              ) : null}
            </Stack__>
            <Stack__
              as={"div"}
              data-plasmic-name={"frame2"}
              data-plasmic-override={overrides.frame2}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame2)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"navItemMenu2"}
                data-plasmic-override={overrides.navItemMenu2}
                hasGap={true}
                className={classNames(projectcss.all, sty.navItemMenu2)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"icon16X16"}
                  data-plasmic-override={overrides.icon16X16}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.icon16X16)}
                >
                  <Stack__
                    as={Container6Icon}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.svg__dXu42)}
                    role={"img"}
                  />
                </Stack__>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__u2P9U
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.dates;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Thursday, October 9, 2025 \u2013 Saturday, October 11, 2025";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </Stack__>
              <Stack__
                as={"div"}
                data-plasmic-name={"navItemMenu3"}
                data-plasmic-override={overrides.navItemMenu3}
                hasGap={true}
                className={classNames(projectcss.all, sty.navItemMenu3)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"icon16X162"}
                  data-plasmic-override={overrides.icon16X162}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.icon16X162)}
                >
                  <Stack__
                    as={Container7Icon}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.svg__zCFd)}
                    role={"img"}
                  />
                </Stack__>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__nNP3
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.location;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Vancouver Convention Centre \u2013 Vancouver, BC, Canada";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              </Stack__>
            </Stack__>
          </Stack__>
          <ButtonPrimary
            data-plasmic-name={"buttonPrimary"}
            data-plasmic-override={overrides.buttonPrimary}
            className={classNames("__wab_instance", sty.buttonPrimary)}
            fullWidthBlueInteractions={"brandBlue"}
            text={"Get Registered"}
            url={(() => {
              try {
                return $props.regUrl;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "https://www.assh.org/annualmeeting/registration";
                }
                throw e;
              }
            })()}
          />
        </Stack__>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "articleImageCard",
    "image",
    "img",
    "content",
    "frame3",
    "navItemMenu",
    "icon12X12",
    "navigationItem",
    "icon12X122",
    "frame2",
    "navItemMenu2",
    "icon16X16",
    "navItemMenu3",
    "icon16X162",
    "buttonPrimary"
  ],

  articleImageCard: [
    "articleImageCard",
    "image",
    "img",
    "content",
    "frame3",
    "navItemMenu",
    "icon12X12",
    "navigationItem",
    "icon12X122",
    "frame2",
    "navItemMenu2",
    "icon16X16",
    "navItemMenu3",
    "icon16X162",
    "buttonPrimary"
  ],

  image: ["image", "img"],
  img: ["img"],
  content: [
    "content",
    "frame3",
    "navItemMenu",
    "icon12X12",
    "navigationItem",
    "icon12X122",
    "frame2",
    "navItemMenu2",
    "icon16X16",
    "navItemMenu3",
    "icon16X162",
    "buttonPrimary"
  ],

  frame3: [
    "frame3",
    "navItemMenu",
    "icon12X12",
    "navigationItem",
    "icon12X122",
    "frame2",
    "navItemMenu2",
    "icon16X16",
    "navItemMenu3",
    "icon16X162"
  ],

  navItemMenu: ["navItemMenu", "icon12X12", "navigationItem", "icon12X122"],
  icon12X12: ["icon12X12"],
  navigationItem: ["navigationItem"],
  icon12X122: ["icon12X122"],
  frame2: ["frame2", "navItemMenu2", "icon16X16", "navItemMenu3", "icon16X162"],
  navItemMenu2: ["navItemMenu2", "icon16X16"],
  icon16X16: ["icon16X16"],
  navItemMenu3: ["navItemMenu3", "icon16X162"],
  icon16X162: ["icon16X162"],
  buttonPrimary: ["buttonPrimary"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicItemEventCardItemFullCard__ArgProps,
          internalVariantPropNames:
            PlasmicItemEventCardItemFullCard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicItemEventCardItemFullCard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicItemEventCardItemFullCard";
  } else {
    func.displayName = `PlasmicItemEventCardItemFullCard.${nodeName}`;
  }
  return func;
}

export const PlasmicItemEventCardItemFullCard = Object.assign(
  // Top-level PlasmicItemEventCardItemFullCard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    articleImageCard: makeNodeComponent("articleImageCard"),
    image: makeNodeComponent("image"),
    img: makeNodeComponent("img"),
    content: makeNodeComponent("content"),
    frame3: makeNodeComponent("frame3"),
    navItemMenu: makeNodeComponent("navItemMenu"),
    icon12X12: makeNodeComponent("icon12X12"),
    navigationItem: makeNodeComponent("navigationItem"),
    icon12X122: makeNodeComponent("icon12X122"),
    frame2: makeNodeComponent("frame2"),
    navItemMenu2: makeNodeComponent("navItemMenu2"),
    icon16X16: makeNodeComponent("icon16X16"),
    navItemMenu3: makeNodeComponent("navItemMenu3"),
    icon16X162: makeNodeComponent("icon16X162"),
    buttonPrimary: makeNodeComponent("buttonPrimary"),
    // Metadata about props expected for PlasmicItemEventCardItemFullCard
    internalVariantProps: PlasmicItemEventCardItemFullCard__VariantProps,
    internalArgProps: PlasmicItemEventCardItemFullCard__ArgProps
  }
);

export default PlasmicItemEventCardItemFullCard;
/* prettier-ignore-end */
