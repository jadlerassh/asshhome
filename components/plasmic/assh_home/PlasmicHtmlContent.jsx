/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: LuaLyPZirLWd
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicHtmlContent.module.css"; // plasmic-import: LuaLyPZirLWd/css

createPlasmicElementProxy;

export const PlasmicHtmlContent__VariantProps = new Array();

export const PlasmicHtmlContent__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHtmlContent__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const new$Queries = {
    getMembershipContent: usePlasmicDataOp(() => {
      return {
        sourceId: "tbVV8SR67UpQ6Z9zuPcDPB",
        opId: "19285222-4682-4f1b-9885-fda3af2a5c03",
        userArgs: {
          params: [$ctx.query.dept]
        },
        cacheKey: `plasmic.$.19285222-4682-4f1b-9885-fda3af2a5c03.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHtmlContent.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHtmlContent.pageMetadata.title}
        />

        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHtmlContent.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $queries.getMembershipContent.data.response.items;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <div
                data-plasmic-name={"freeBox"}
                data-plasmic-override={overrides.freeBox}
                className={classNames(projectcss.all, sty.freeBox)}
                key={currentIndex}
              >
                <h3
                  data-plasmic-name={"h3"}
                  data-plasmic-override={overrides.h3}
                  className={classNames(
                    projectcss.all,
                    projectcss.h3,
                    projectcss.__wab_text,
                    sty.h3
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return "Content Title: " + currentItem.fields.title;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "You won't believe what happens next.";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </h3>
                <Embed
                  data-plasmic-name={"embedHtml"}
                  data-plasmic-override={overrides.embedHtml}
                  className={classNames("__wab_instance", sty.embedHtml)}
                  code={(() => {
                    try {
                      return currentItem.fields.bodyContent;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "<div>Paste your embed code via the right sidebar</div>";
                      }
                      throw e;
                    }
                  })()}
                />

                <h4
                  data-plasmic-name={"h4"}
                  data-plasmic-override={overrides.h4}
                  className={classNames(
                    projectcss.all,
                    projectcss.h4,
                    projectcss.__wab_text,
                    sty.h4
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return "Keywords: " + currentItem.fields.metaKeywords;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "You won't believe what happens next.";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </h4>
                <section
                  data-plasmic-name={"section"}
                  data-plasmic-override={overrides.section}
                  className={classNames(projectcss.all, sty.section)}
                />
              </div>
            );
          })}
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "h3", "embedHtml", "h4", "section"],
  freeBox: ["freeBox", "h3", "embedHtml", "h4", "section"],
  h3: ["h3"],
  embedHtml: ["embedHtml"],
  h4: ["h4"],
  section: ["section"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHtmlContent__ArgProps,
          internalVariantPropNames: PlasmicHtmlContent__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHtmlContent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHtmlContent";
  } else {
    func.displayName = `PlasmicHtmlContent.${nodeName}`;
  }
  return func;
}

export const PlasmicHtmlContent = Object.assign(
  // Top-level PlasmicHtmlContent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    h3: makeNodeComponent("h3"),
    embedHtml: makeNodeComponent("embedHtml"),
    h4: makeNodeComponent("h4"),
    section: makeNodeComponent("section"),
    // Metadata about props expected for PlasmicHtmlContent
    internalVariantProps: PlasmicHtmlContent__VariantProps,
    internalArgProps: PlasmicHtmlContent__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "HTML Content Preview",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHtmlContent;
/* prettier-ignore-end */
