/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: TLU750rHnB5j
import * as React from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import { useScreenVariants as useScreenVariantsdjBtUr72ZExV } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: DJBtUr72ZExV/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicHeroWithCards.module.css"; // plasmic-import: TLU750rHnB5j/css
import RightArrowSvgrepoComSvg2Icon from "./icons/PlasmicIcon__RightArrowSvgrepoComSvg2"; // plasmic-import: PhhglPTaZq0t/icon
import ForMembersIconSvgIcon from "./icons/PlasmicIcon__ForMembersIconSvg"; // plasmic-import: lvQjzYBakWd7/icon
import ForResidentsIconSvgIcon from "./icons/PlasmicIcon__ForResidentsIconSvg"; // plasmic-import: MCdIU-WH4UGv/icon
import ForPatientsSvg2Icon from "./icons/PlasmicIcon__ForPatientsSvg2"; // plasmic-import: sUJwv4XjAQ_i/icon
import ForPartnersIconSvgIcon from "./icons/PlasmicIcon__ForPartnersIconSvg"; // plasmic-import: zfa9szY2XOmZ/icon

createPlasmicElementProxy;

export const PlasmicHeroWithCards__VariantProps = new Array();

export const PlasmicHeroWithCards__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHeroWithCards__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const new$Queries = {
    dropdownOptions: usePlasmicDataOp(() => {
      return {
        sourceId: "tbVV8SR67UpQ6Z9zuPcDPB",
        opId: "62256d4b-3261-46f6-97c7-2e9a2058b473",
        userArgs: {},
        cacheKey: `plasmic.$.62256d4b-3261-46f6-97c7-2e9a2058b473.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    heroData: usePlasmicDataOp(() => {
      return {
        sourceId: "tbVV8SR67UpQ6Z9zuPcDPB",
        opId: "c3f6ead2-b630-47ff-95cd-117ded6cb6bc",
        userArgs: {},
        cacheKey: `plasmic.$.c3f6ead2-b630-47ff-95cd-117ded6cb6bc.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getImage: usePlasmicDataOp(() => {
      return {
        sourceId: "n5sYZavh6xkK4D8BEueUSq",
        opId: "0c2afc0b-6aa8-47c9-b10b-6228850bafaf",
        userArgs: {
          path: [
            $queries.heroData.data.response.items[0].fields.backgroundImage.sys
              .id
          ]
        },
        cacheKey: `plasmic.$.0c2afc0b-6aa8-47c9-b10b-6228850bafaf.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsdjBtUr72ZExV()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <section
        data-plasmic-name={"hero"}
        data-plasmic-override={overrides.hero}
        className={classNames(projectcss.all, sty.hero)}
        overflow={"hidden"}
      >
        <PlasmicImg__
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"100%"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"100%"}
          loading={"lazy"}
          src={(() => {
            try {
              return $queries.getImage.data.response.fields.file.url;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()}
        />

        <div className={classNames(projectcss.all, sty.freeBox__vMb5B)}>
          <div className={classNames(projectcss.all, sty.columns__tt4N0)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.column__pd9Is)}
            >
              <h1
                data-plasmic-name={"h1"}
                data-plasmic-override={overrides.h1}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $queries.heroData.data.response.items[0].fields
                        .subheader;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "You won't believe what happens next.";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </h1>
              <PlasmicLink__
                data-plasmic-name={"link"}
                data-plasmic-override={overrides.link}
                className={classNames(projectcss.all, projectcss.a, sty.link)}
                component={Link}
                platform={"nextjs"}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__r6Udj
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $queries.heroData.data.response.items[0].fields
                          .cta1Text;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
                <RightArrowSvgrepoComSvg2Icon
                  className={classNames(projectcss.all, sty.svg__ukdz8)}
                  role={"img"}
                />
              </PlasmicLink__>
            </Stack__>
            <div className={classNames(projectcss.all, sty.column__uKvm)} />
          </div>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__nfXkl)}>
          <div className={classNames(projectcss.all, sty.columns__ehwEb)}>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.column___62Srj
              )}
              component={Link}
              platform={"nextjs"}
            >
              <ForMembersIconSvgIcon
                className={classNames(projectcss.all, sty.svg___0X3Hb)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__cwMxT
                )}
              >
                {"For Members"}
              </div>
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.column__ysfKy
              )}
              component={Link}
              platform={"nextjs"}
            >
              <ForResidentsIconSvgIcon
                className={classNames(projectcss.all, sty.svg__pZq10)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__xZki
                )}
              >
                {"For Residents and Fellows"}
              </div>
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.column__gfd0Q
              )}
              component={Link}
              platform={"nextjs"}
            >
              <ForPatientsSvg2Icon
                className={classNames(projectcss.all, sty.svg__zy2Ce)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__eyq9Q
                )}
              >
                {"For Patients"}
              </div>
            </PlasmicLink__>
            <PlasmicLink__
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.column___255Zj
              )}
              component={Link}
              platform={"nextjs"}
            >
              <ForPartnersIconSvgIcon
                className={classNames(projectcss.all, sty.svg__dReZ)}
                role={"img"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fDru
                )}
              >
                {"For Partners"}
              </div>
            </PlasmicLink__>
          </div>
        </div>
      </section>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "hero", "img", "h1", "link"],
  hero: ["hero", "img", "h1", "link"],
  img: ["img"],
  h1: ["h1"],
  link: ["link"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHeroWithCards__ArgProps,
          internalVariantPropNames: PlasmicHeroWithCards__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHeroWithCards__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeroWithCards";
  } else {
    func.displayName = `PlasmicHeroWithCards.${nodeName}`;
  }
  return func;
}

export const PlasmicHeroWithCards = Object.assign(
  // Top-level PlasmicHeroWithCards renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    hero: makeNodeComponent("hero"),
    img: makeNodeComponent("img"),
    h1: makeNodeComponent("h1"),
    link: makeNodeComponent("link"),
    // Metadata about props expected for PlasmicHeroWithCards
    internalVariantProps: PlasmicHeroWithCards__VariantProps,
    internalArgProps: PlasmicHeroWithCards__ArgProps
  }
);

export default PlasmicHeroWithCards;
/* prettier-ignore-end */
