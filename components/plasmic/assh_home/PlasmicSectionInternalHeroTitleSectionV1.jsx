/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: 8dary0IReKTd
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: -2HqLDJqJBwh/component
import { useScreenVariants as useScreenVariantsdjBtUr72ZExV } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: DJBtUr72ZExV/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicSectionInternalHeroTitleSectionV1.module.css"; // plasmic-import: 8dary0IReKTd/css

createPlasmicElementProxy;

export const PlasmicSectionInternalHeroTitleSectionV1__VariantProps =
  new Array();

export const PlasmicSectionInternalHeroTitleSectionV1__ArgProps = new Array(
  "title",
  "subtitle",
  "description",
  "cta1Text",
  "cta1Link",
  "cta2Text",
  "cta2Link"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSectionInternalHeroTitleSectionV1__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          title: "Title Text",
          subtitle: "This is the subtitle text below the text",
          description:
            "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. ",
          cta1Text: "Button 1 Text",
          cta1Link: "#",
          cta2Text: "Button 2 Text",
          cta2Link: "#"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const new$Queries = {
    getImage: usePlasmicDataOp(() => {
      return {
        sourceId: "tbVV8SR67UpQ6Z9zuPcDPB",
        opId: "0d68a81d-022d-4e35-8e12-05afea449076",
        userArgs: {},
        cacheKey: `plasmic.$.0d68a81d-022d-4e35-8e12-05afea449076.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getEntryById: usePlasmicDataOp(() => {
      return {
        sourceId: "tbVV8SR67UpQ6Z9zuPcDPB",
        opId: "0d68a81d-022d-4e35-8e12-05afea449076",
        userArgs: {},
        cacheKey: `plasmic.$.0d68a81d-022d-4e35-8e12-05afea449076.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsdjBtUr72ZExV()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"row"}
        data-plasmic-override={overrides.row}
        className={classNames(projectcss.all, sty.row)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"frame2"}
          data-plasmic-override={overrides.frame2}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame2)}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"frame3"}
            data-plasmic-override={overrides.frame3}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame3)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"frame4"}
              data-plasmic-override={overrides.frame4}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame4)}
            >
              {(() => {
                try {
                  return $props.title !== undefined;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  data-plasmic-name={"educationCme"}
                  data-plasmic-override={overrides.educationCme}
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.educationCme
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.title;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Education & CME ";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              ) : null}
              {(() => {
                try {
                  return $props.subtitle !== undefined;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___8JiBy
                  )}
                >
                  <React.Fragment>
                    {(() => {
                      try {
                        return $props.subtitle;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "Advance Your Expertise in Hand and Upper Extremity Surgery";
                        }
                        throw e;
                      }
                    })()}
                  </React.Fragment>
                </div>
              ) : null}
            </Stack__>
            {(() => {
              try {
                return $props.description !== undefined;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return true;
                }
                throw e;
              }
            })() ? (
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__fhEn
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.description;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "ASSH delivers trusted education for every stage of your career from board prep to advanced surgical techniques. All created by leaders in the field.";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            ) : null}
            <Stack__
              as={"div"}
              data-plasmic-name={"frame5"}
              data-plasmic-override={overrides.frame5}
              hasGap={true}
              className={classNames(projectcss.all, sty.frame5)}
            >
              {(() => {
                try {
                  return $props.cta1Text !== undefined;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <ButtonPrimary
                  className={classNames(
                    "__wab_instance",
                    sty.buttonPrimary__imjUu
                  )}
                  darkInteractions={"dark"}
                  text={(() => {
                    try {
                      return $props.cta1Text;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  url={(() => {
                    try {
                      return $props.cta1Link;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                />
              ) : null}
              {(() => {
                try {
                  return $props.cta2Text !== undefined;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <ButtonPrimary
                  className={classNames(
                    "__wab_instance",
                    sty.buttonPrimary__ekiJa
                  )}
                  darkInteractions={"dark"}
                  text={(() => {
                    try {
                      return $props.cta2Text;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  url={(() => {
                    try {
                      return $props.cta2Link;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                />
              ) : null}
            </Stack__>
          </Stack__>
        </Stack__>
        <div
          data-plasmic-name={"column"}
          data-plasmic-override={overrides.column}
          className={classNames(projectcss.all, sty.column)}
        />
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "row",
    "frame2",
    "frame3",
    "frame4",
    "educationCme",
    "frame5",
    "column"
  ],

  row: [
    "row",
    "frame2",
    "frame3",
    "frame4",
    "educationCme",
    "frame5",
    "column"
  ],

  frame2: ["frame2", "frame3", "frame4", "educationCme", "frame5"],
  frame3: ["frame3", "frame4", "educationCme", "frame5"],
  frame4: ["frame4", "educationCme"],
  educationCme: ["educationCme"],
  frame5: ["frame5"],
  column: ["column"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames:
            PlasmicSectionInternalHeroTitleSectionV1__ArgProps,
          internalVariantPropNames:
            PlasmicSectionInternalHeroTitleSectionV1__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSectionInternalHeroTitleSectionV1__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSectionInternalHeroTitleSectionV1";
  } else {
    func.displayName = `PlasmicSectionInternalHeroTitleSectionV1.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionInternalHeroTitleSectionV1 = Object.assign(
  // Top-level PlasmicSectionInternalHeroTitleSectionV1 renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    row: makeNodeComponent("row"),
    frame2: makeNodeComponent("frame2"),
    frame3: makeNodeComponent("frame3"),
    frame4: makeNodeComponent("frame4"),
    educationCme: makeNodeComponent("educationCme"),
    frame5: makeNodeComponent("frame5"),
    column: makeNodeComponent("column"),
    // Metadata about props expected for PlasmicSectionInternalHeroTitleSectionV1
    internalVariantProps:
      PlasmicSectionInternalHeroTitleSectionV1__VariantProps,
    internalArgProps: PlasmicSectionInternalHeroTitleSectionV1__ArgProps
  }
);

export default PlasmicSectionInternalHeroTitleSectionV1;
/* prettier-ignore-end */
