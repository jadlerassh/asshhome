/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: 58JBrSEW4yoW
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import ComponentCalloutItem from "../../ComponentCalloutItem"; // plasmic-import: ntQQTfdTjzvC/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicComponentQuicklinks.module.css"; // plasmic-import: 58JBrSEW4yoW/css

createPlasmicElementProxy;

export const PlasmicComponentQuicklinks__VariantProps = new Array();

export const PlasmicComponentQuicklinks__ArgProps = new Array("name");

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicComponentQuicklinks__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          name: "Member Quicklinks"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "subLinks",
        type: "private",
        variableType: "array",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return (() => {
                const entryMap = Object.fromEntries(
                  $queries.getQuickLinks.data.response.includes.Entry.map(
                    entry => [entry.sys.id, entry]
                  )
                );
                return $queries.getQuickLinks.data.response.items[0].fields.childLinks
                  .map(link => {
                    const entry = entryMap[link.sys.id];
                    return {
                      id: link.sys.id,
                      label: entry?.fields.label || "Label missing",
                      subText: entry?.fields.subText || "Subtext missing",
                      order: entry?.fields.order ?? 0,
                      url: entry?.fields.url || "#"
                    };
                  })
                  .sort((a, b) => a.order - b.order);
              })();
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return [];
              }
              throw e;
            }
          })()
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    getQuickLinks: usePlasmicDataOp(() => {
      return {
        sourceId: "tbVV8SR67UpQ6Z9zuPcDPB",
        opId: "cd767760-3d32-4b02-933e-cd25d3232278",
        userArgs: {
          params: [$props.name]
        },
        cacheKey: `plasmic.$.cd767760-3d32-4b02-933e-cd25d3232278.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__wzAhz)}>
        <Stack__
          as={"div"}
          data-plasmic-name={"section10"}
          data-plasmic-override={overrides.section10}
          hasGap={true}
          className={classNames(projectcss.all, sty.section10)}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"calloutBar"}
            data-plasmic-override={overrides.calloutBar}
            hasGap={true}
            className={classNames(projectcss.all, sty.calloutBar)}
          >
            <div
              data-plasmic-name={"text"}
              data-plasmic-override={overrides.text}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.text
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $queries.getQuickLinks.data.response.items[0].fields
                      .label;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "ASSH Education";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox__zyOb)}>
              <div
                data-plasmic-name={"columns"}
                data-plasmic-override={overrides.columns}
                className={classNames(projectcss.all, sty.columns)}
              >
                <div className={classNames(projectcss.all, sty.column__a7TYz)}>
                  <ComponentCalloutItem
                    className={classNames(
                      "__wab_instance",
                      sty.componentCalloutItem__cgEtv
                    )}
                    desc={(() => {
                      try {
                        return $state.subLinks[0].subText;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    linkUrl={(() => {
                      try {
                        return $state.subLinks[0].url;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    name={(() => {
                      try {
                        return $state.subLinks[0].label;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.column__ukLpz)}>
                  <ComponentCalloutItem
                    className={classNames(
                      "__wab_instance",
                      sty.componentCalloutItem__oXKn
                    )}
                    desc={(() => {
                      try {
                        return $state.subLinks[1].subText;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    linkUrl={(() => {
                      try {
                        return $state.subLinks[1].url;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    name={(() => {
                      try {
                        return $state.subLinks[1].label;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.column__sbr33)}>
                  <ComponentCalloutItem
                    className={classNames(
                      "__wab_instance",
                      sty.componentCalloutItem__tdZa
                    )}
                    desc={(() => {
                      try {
                        return $state.subLinks[2].subText;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    linkUrl={(() => {
                      try {
                        return $state.subLinks[2].url;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    name={(() => {
                      try {
                        return $state.subLinks[2].label;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                  />
                </div>
              </div>
            </div>
          </Stack__>
        </Stack__>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "section10", "calloutBar", "text", "columns"],
  section10: ["section10", "calloutBar", "text", "columns"],
  calloutBar: ["calloutBar", "text", "columns"],
  text: ["text"],
  columns: ["columns"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicComponentQuicklinks__ArgProps,
          internalVariantPropNames: PlasmicComponentQuicklinks__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicComponentQuicklinks__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicComponentQuicklinks";
  } else {
    func.displayName = `PlasmicComponentQuicklinks.${nodeName}`;
  }
  return func;
}

export const PlasmicComponentQuicklinks = Object.assign(
  // Top-level PlasmicComponentQuicklinks renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    section10: makeNodeComponent("section10"),
    calloutBar: makeNodeComponent("calloutBar"),
    text: makeNodeComponent("text"),
    columns: makeNodeComponent("columns"),
    // Metadata about props expected for PlasmicComponentQuicklinks
    internalVariantProps: PlasmicComponentQuicklinks__VariantProps,
    internalArgProps: PlasmicComponentQuicklinks__ArgProps
  }
);

export default PlasmicComponentQuicklinks;
/* prettier-ignore-end */
