/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: qpQjKfyYOrul
import * as React from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  get as $stateGet,
  hasVariant,
  set as $stateSet,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import ItemMenuLinkItem from "../../ItemMenuLinkItem"; // plasmic-import: MET00VyMH6Cv/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicMenuHamburger.module.css"; // plasmic-import: qpQjKfyYOrul/css
import CloseBoldSvgrepoComSvgIcon from "./icons/PlasmicIcon__CloseBoldSvgrepoComSvg"; // plasmic-import: kgKw8A-hT9fj/icon

createPlasmicElementProxy;

export const PlasmicMenuHamburger__VariantProps = new Array("clickedOpen");

export const PlasmicMenuHamburger__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMenuHamburger__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "clickedOpen",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.clickedOpen
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    getHamburgerDropdown: usePlasmicDataOp(() => {
      return {
        sourceId: "tbVV8SR67UpQ6Z9zuPcDPB",
        opId: "de0ae713-3d0a-4420-a66d-eb7d88975c7c",
        userArgs: {},
        cacheKey: `plasmic.$.de0ae713-3d0a-4420-a66d-eb7d88975c7c.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root,
        {
          [sty.rootclickedOpen]: hasVariant(
            $state,
            "clickedOpen",
            "clickedOpen"
          )
        }
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__ynZ)}>
        <PlasmicLink__
          data-plasmic-name={"openMenu"}
          data-plasmic-override={overrides.openMenu}
          className={classNames(projectcss.all, projectcss.a, sty.openMenu, {
            [sty.openMenuclickedOpen]: hasVariant(
              $state,
              "clickedOpen",
              "clickedOpen"
            )
          })}
          component={Link}
          onClick={async event => {
            const $steps = {};
            $steps["updateClickedOpen"] = true
              ? (() => {
                  const actionArgs = { vgroup: "clickedOpen", operation: 2 };
                  return (({ vgroup, value }) => {
                    if (typeof value === "string") {
                      value = [value];
                    }
                    const oldValue = $stateGet($state, vgroup);
                    $stateSet($state, vgroup, !oldValue);
                    return !oldValue;
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["updateClickedOpen"] != null &&
              typeof $steps["updateClickedOpen"] === "object" &&
              typeof $steps["updateClickedOpen"].then === "function"
            ) {
              $steps["updateClickedOpen"] = await $steps["updateClickedOpen"];
            }
          }}
          platform={"nextjs"}
        >
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"none"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"24px"}
            loading={"lazy"}
            src={{
              src: "/plasmic/assh_home/images/hamburgerSvgrepoComSvg2.svg",
              fullWidth: 20,
              fullHeight: 20,
              aspectRatio: 1
            }}
          />
        </PlasmicLink__>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox__agDId)}>
        <section
          data-plasmic-name={"exploreDropdown"}
          data-plasmic-override={overrides.exploreDropdown}
          className={classNames(projectcss.all, sty.exploreDropdown, {
            [sty.exploreDropdownclickedOpen]: hasVariant(
              $state,
              "clickedOpen",
              "clickedOpen"
            )
          })}
        >
          <PlasmicLink__
            data-plasmic-name={"closeLink"}
            data-plasmic-override={overrides.closeLink}
            className={classNames(projectcss.all, projectcss.a, sty.closeLink, {
              [sty.closeLinkclickedOpen]: hasVariant(
                $state,
                "clickedOpen",
                "clickedOpen"
              )
            })}
            component={Link}
            onClick={async event => {
              const $steps = {};
              $steps["updateClickedOpen"] = true
                ? (() => {
                    const actionArgs = {
                      vgroup: "clickedOpen",
                      operation: 6,
                      value: "clickedOpen"
                    };
                    return (({ vgroup, value }) => {
                      if (typeof value === "string") {
                        value = [value];
                      }
                      $stateSet($state, vgroup, false);
                      return false;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateClickedOpen"] != null &&
                typeof $steps["updateClickedOpen"] === "object" &&
                typeof $steps["updateClickedOpen"].then === "function"
              ) {
                $steps["updateClickedOpen"] = await $steps["updateClickedOpen"];
              }
            }}
            platform={"nextjs"}
          >
            <CloseBoldSvgrepoComSvgIcon
              data-plasmic-name={"closeIcon2"}
              data-plasmic-override={overrides.closeIcon2}
              className={classNames(projectcss.all, sty.closeIcon2)}
              role={"img"}
            />
          </PlasmicLink__>
          {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
            (() => {
              try {
                return $queries.getHamburgerDropdown.data.response.items;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return [];
                }
                throw e;
              }
            })()
          ).map((__plasmic_item_0, __plasmic_idx_0) => {
            const currentItem = __plasmic_item_0;
            const currentIndex = __plasmic_idx_0;
            return (
              <div
                className={classNames(projectcss.all, sty.freeBox___8Ba)}
                key={currentIndex}
              >
                <div className={classNames(projectcss.all, sty.freeBox__iDsD)}>
                  <ItemMenuLinkItem
                    data-plasmic-name={"itemMenuLinkItem"}
                    data-plasmic-override={overrides.itemMenuLinkItem}
                    assetId={(() => {
                      try {
                        return currentItem.fields.icon.sys.id;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    className={classNames(
                      "__wab_instance",
                      sty.itemMenuLinkItem
                    )}
                    label={(() => {
                      try {
                        return currentItem.fields.label;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return undefined;
                        }
                        throw e;
                      }
                    })()}
                    url={(() => {
                      try {
                        return currentItem.fields.url;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return "https://www.assh.org";
                        }
                        throw e;
                      }
                    })()}
                  />
                </div>
              </div>
            );
          })}
        </section>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "openMenu",
    "img",
    "exploreDropdown",
    "closeLink",
    "closeIcon2",
    "itemMenuLinkItem"
  ],

  openMenu: ["openMenu", "img"],
  img: ["img"],
  exploreDropdown: [
    "exploreDropdown",
    "closeLink",
    "closeIcon2",
    "itemMenuLinkItem"
  ],

  closeLink: ["closeLink", "closeIcon2"],
  closeIcon2: ["closeIcon2"],
  itemMenuLinkItem: ["itemMenuLinkItem"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMenuHamburger__ArgProps,
          internalVariantPropNames: PlasmicMenuHamburger__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMenuHamburger__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMenuHamburger";
  } else {
    func.displayName = `PlasmicMenuHamburger.${nodeName}`;
  }
  return func;
}

export const PlasmicMenuHamburger = Object.assign(
  // Top-level PlasmicMenuHamburger renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    openMenu: makeNodeComponent("openMenu"),
    img: makeNodeComponent("img"),
    exploreDropdown: makeNodeComponent("exploreDropdown"),
    closeLink: makeNodeComponent("closeLink"),
    closeIcon2: makeNodeComponent("closeIcon2"),
    itemMenuLinkItem: makeNodeComponent("itemMenuLinkItem"),
    // Metadata about props expected for PlasmicMenuHamburger
    internalVariantProps: PlasmicMenuHamburger__VariantProps,
    internalArgProps: PlasmicMenuHamburger__ArgProps
  }
);

export default PlasmicMenuHamburger;
/* prettier-ignore-end */
