/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: 2SdcK3piY0EQ
import * as React from "react";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import { Embed } from "@plasmicpkgs/plasmic-basic-components";
import AsshButton from "../../AsshButton"; // plasmic-import: -2HqLDJqJBwh/component
import ComponentHeroLinkOld from "../../ComponentHeroLinkOld"; // plasmic-import: 4D_-oe1r0Jy9/component
import { useScreenVariants as useScreenVariantsdjBtUr72ZExV } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: DJBtUr72ZExV/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicHeroWithLinks.module.css"; // plasmic-import: 2SdcK3piY0EQ/css

createPlasmicElementProxy;

export const PlasmicHeroWithLinks__VariantProps = new Array();

export const PlasmicHeroWithLinks__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHeroWithLinks__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const new$Queries = {
    dropdownOptions: usePlasmicDataOp(() => {
      return {
        sourceId: "tbVV8SR67UpQ6Z9zuPcDPB",
        opId: "62256d4b-3261-46f6-97c7-2e9a2058b473",
        userArgs: {},
        cacheKey: `plasmic.$.62256d4b-3261-46f6-97c7-2e9a2058b473.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    heroData: usePlasmicDataOp(() => {
      return {
        sourceId: "tbVV8SR67UpQ6Z9zuPcDPB",
        opId: "dc6705d6-54be-47f9-8dd2-f7c4db8ae50b",
        userArgs: {},
        cacheKey: `plasmic.$.dc6705d6-54be-47f9-8dd2-f7c4db8ae50b.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getImage: usePlasmicDataOp(() => {
      return {
        sourceId: "n5sYZavh6xkK4D8BEueUSq",
        opId: "0c2afc0b-6aa8-47c9-b10b-6228850bafaf",
        userArgs: {
          path: [
            $queries.heroData.data.response.items[0].fields.backgroundImage.sys
              .id
          ]
        },
        cacheKey: `plasmic.$.0c2afc0b-6aa8-47c9-b10b-6228850bafaf.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    getEntry: usePlasmicDataOp(() => {
      return {
        sourceId: "tbVV8SR67UpQ6Z9zuPcDPB",
        opId: "05ea4b28-de4e-4092-9c56-d4618ff3b319",
        userArgs: {
          path: [
            $queries.heroData.data.response.items[0].fields.options[0].sys.id
          ]
        },
        cacheKey: `plasmic.$.05ea4b28-de4e-4092-9c56-d4618ff3b319.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsdjBtUr72ZExV()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <section
        data-plasmic-name={"hero"}
        data-plasmic-override={overrides.hero}
        className={classNames(projectcss.all, sty.hero)}
        overflow={"hidden"}
      >
        <div className={classNames(projectcss.all, sty.freeBox__inJb2)}>
          <div className={classNames(projectcss.all, sty.columns__tZAmF)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.column__yLTf)}
            >
              <Embed
                data-plasmic-name={"embedHtml"}
                data-plasmic-override={overrides.embedHtml}
                className={classNames("__wab_instance", sty.embedHtml)}
                code={(() => {
                  try {
                    return $queries.heroData.data.response.items[0].fields
                      .description;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "";
                    }
                    throw e;
                  }
                })()}
              />

              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $queries.heroData.data.response.items[0].fields
                        .subheader;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__zYdsI)}
              >
                <AsshButton
                  className={classNames(
                    "__wab_instance",
                    sty.asshButton__xNskv
                  )}
                  darkInteractions={"dark"}
                  text={(() => {
                    try {
                      return $queries.heroData.data.response.items[0].fields
                        .cta1Text;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  url={(() => {
                    try {
                      return $queries.heroData.data.response.items[0].fields
                        .cta1Link;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "https://www.assh.org";
                      }
                      throw e;
                    }
                  })()}
                />

                <AsshButton
                  className={classNames(
                    "__wab_instance",
                    sty.asshButton___3SXrJ
                  )}
                  darkInteractions={"dark"}
                  text={(() => {
                    try {
                      return $queries.heroData.data.response.items[0].fields
                        .cta2Text;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}
                  url={(() => {
                    try {
                      return $queries.heroData.data.response.items[0].fields
                        .cta2Link;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "https://www.assh.org";
                      }
                      throw e;
                    }
                  })()}
                />
              </Stack__>
            </Stack__>
            <div className={classNames(projectcss.all, sty.column__wb8Wk)}>
              <PlasmicImg__
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"100%"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={(() => {
                  try {
                    return $queries.getImage.data.response.fields.file.url;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
              />
            </div>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___3HeZh)}>
            <div className={classNames(projectcss.all, sty.columns___0HspJ)}>
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $queries.heroData.data.response.items[0].fields
                      .options[0];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    className={classNames(projectcss.all, sty.column__uGvR1)}
                    key={currentIndex}
                  >
                    <ComponentHeroLinkOld
                      className={classNames(
                        "__wab_instance",
                        sty.componentHeroLinkOld__vlXmp
                      )}
                      entryId={(() => {
                        try {
                          return currentItem.sys.id;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      first2={"first"}
                    />
                  </div>
                );
              })}
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $queries.heroData.data.response.items[0].fields
                      .options[1];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    className={classNames(projectcss.all, sty.column___0GbUm)}
                    key={currentIndex}
                  >
                    <ComponentHeroLinkOld
                      className={classNames(
                        "__wab_instance",
                        sty.componentHeroLinkOld___6Mhwt
                      )}
                      entryId={(() => {
                        try {
                          return currentItem.sys.id;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      highlightColor={"var(--token-WpPBw5f93wEg)"}
                    />
                  </div>
                );
              })}
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $queries.heroData.data.response.items[0].fields
                      .options[2];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    className={classNames(projectcss.all, sty.column__tkF4)}
                    key={currentIndex}
                  >
                    <ComponentHeroLinkOld
                      className={classNames(
                        "__wab_instance",
                        sty.componentHeroLinkOld__sTksh
                      )}
                      entryId={(() => {
                        try {
                          return currentItem.sys.id;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                    />
                  </div>
                );
              })}
              {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                (() => {
                  try {
                    return $queries.heroData.data.response.items[0].fields
                      .options[3];
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return [];
                    }
                    throw e;
                  }
                })()
              ).map((__plasmic_item_0, __plasmic_idx_0) => {
                const currentItem = __plasmic_item_0;
                const currentIndex = __plasmic_idx_0;
                return (
                  <div
                    className={classNames(projectcss.all, sty.column__jVhcG)}
                    key={currentIndex}
                  >
                    <ComponentHeroLinkOld
                      className={classNames(
                        "__wab_instance",
                        sty.componentHeroLinkOld__tsMtf
                      )}
                      entryId={(() => {
                        try {
                          return currentItem.sys.id;
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return undefined;
                          }
                          throw e;
                        }
                      })()}
                      highlightColor={"var(--token-WpPBw5f93wEg)"}
                      last2={"last"}
                    />
                  </div>
                );
              })}
            </div>
          </div>
        </div>
      </section>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "hero", "embedHtml", "text", "img"],
  hero: ["hero", "embedHtml", "text", "img"],
  embedHtml: ["embedHtml"],
  text: ["text"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHeroWithLinks__ArgProps,
          internalVariantPropNames: PlasmicHeroWithLinks__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHeroWithLinks__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeroWithLinks";
  } else {
    func.displayName = `PlasmicHeroWithLinks.${nodeName}`;
  }
  return func;
}

export const PlasmicHeroWithLinks = Object.assign(
  // Top-level PlasmicHeroWithLinks renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    hero: makeNodeComponent("hero"),
    embedHtml: makeNodeComponent("embedHtml"),
    text: makeNodeComponent("text"),
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicHeroWithLinks
    internalVariantProps: PlasmicHeroWithLinks__VariantProps,
    internalArgProps: PlasmicHeroWithLinks__ArgProps
  }
);

export default PlasmicHeroWithLinks;
/* prettier-ignore-end */
