/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: RE6X9KOLcUTN
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import ItemCheckmarkItem from "../../ItemCheckmarkItem"; // plasmic-import: WDbWI1BSLN9W/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicSectionCheckboxSectionWithRightText.module.css"; // plasmic-import: RE6X9KOLcUTN/css

createPlasmicElementProxy;

export const PlasmicSectionCheckboxSectionWithRightText__VariantProps =
  new Array();

export const PlasmicSectionCheckboxSectionWithRightText__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSectionCheckboxSectionWithRightText__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"frame5"}
          data-plasmic-override={overrides.frame5}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame5)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__g7Jbp
            )}
          >
            {"What Sets Us Apart"}
          </div>
          <Stack__
            as={"div"}
            data-plasmic-name={"frame6"}
            data-plasmic-override={overrides.frame6}
            hasGap={true}
            className={classNames(projectcss.all, sty.frame6)}
          >
            <div className={classNames(projectcss.all, sty.column__xgVrU)}>
              <Stack__
                as={"div"}
                data-plasmic-name={"frame3"}
                data-plasmic-override={overrides.frame3}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame3)}
              >
                <Stack__
                  as={"div"}
                  data-plasmic-name={"checkItem"}
                  data-plasmic-override={overrides.checkItem}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.checkItem)}
                >
                  <ItemCheckmarkItem
                    className={classNames(
                      "__wab_instance",
                      sty.itemCheckmarkItem__qFoy
                    )}
                  />
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"checkItem2"}
                  data-plasmic-override={overrides.checkItem2}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.checkItem2)}
                >
                  <ItemCheckmarkItem
                    className={classNames(
                      "__wab_instance",
                      sty.itemCheckmarkItem__bre96
                    )}
                  />
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"checkItem3"}
                  data-plasmic-override={overrides.checkItem3}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.checkItem3)}
                >
                  <ItemCheckmarkItem
                    className={classNames(
                      "__wab_instance",
                      sty.itemCheckmarkItem__soksj
                    )}
                  />
                </Stack__>
                <Stack__
                  as={"div"}
                  data-plasmic-name={"checkItem4"}
                  data-plasmic-override={overrides.checkItem4}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.checkItem4)}
                >
                  <ItemCheckmarkItem
                    className={classNames(
                      "__wab_instance",
                      sty.itemCheckmarkItem___6Awaj
                    )}
                  />
                </Stack__>
              </Stack__>
            </div>
            <div className={classNames(projectcss.all, sty.column__q0DjL)}>
              <Stack__
                as={"div"}
                data-plasmic-name={"frame7"}
                data-plasmic-override={overrides.frame7}
                hasGap={true}
                className={classNames(projectcss.all, sty.frame7)}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___0FP
                  )}
                >
                  {
                    "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."
                  }
                </div>
              </Stack__>
            </div>
          </Stack__>
        </Stack__>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "freeBox",
    "frame5",
    "frame6",
    "frame3",
    "checkItem",
    "checkItem2",
    "checkItem3",
    "checkItem4",
    "frame7"
  ],

  freeBox: [
    "freeBox",
    "frame5",
    "frame6",
    "frame3",
    "checkItem",
    "checkItem2",
    "checkItem3",
    "checkItem4",
    "frame7"
  ],

  frame5: [
    "frame5",
    "frame6",
    "frame3",
    "checkItem",
    "checkItem2",
    "checkItem3",
    "checkItem4",
    "frame7"
  ],

  frame6: [
    "frame6",
    "frame3",
    "checkItem",
    "checkItem2",
    "checkItem3",
    "checkItem4",
    "frame7"
  ],

  frame3: ["frame3", "checkItem", "checkItem2", "checkItem3", "checkItem4"],
  checkItem: ["checkItem"],
  checkItem2: ["checkItem2"],
  checkItem3: ["checkItem3"],
  checkItem4: ["checkItem4"],
  frame7: ["frame7"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames:
            PlasmicSectionCheckboxSectionWithRightText__ArgProps,
          internalVariantPropNames:
            PlasmicSectionCheckboxSectionWithRightText__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSectionCheckboxSectionWithRightText__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSectionCheckboxSectionWithRightText";
  } else {
    func.displayName = `PlasmicSectionCheckboxSectionWithRightText.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionCheckboxSectionWithRightText = Object.assign(
  // Top-level PlasmicSectionCheckboxSectionWithRightText renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    frame5: makeNodeComponent("frame5"),
    frame6: makeNodeComponent("frame6"),
    frame3: makeNodeComponent("frame3"),
    checkItem: makeNodeComponent("checkItem"),
    checkItem2: makeNodeComponent("checkItem2"),
    checkItem3: makeNodeComponent("checkItem3"),
    checkItem4: makeNodeComponent("checkItem4"),
    frame7: makeNodeComponent("frame7"),
    // Metadata about props expected for PlasmicSectionCheckboxSectionWithRightText
    internalVariantProps:
      PlasmicSectionCheckboxSectionWithRightText__VariantProps,
    internalArgProps: PlasmicSectionCheckboxSectionWithRightText__ArgProps
  }
);

export default PlasmicSectionCheckboxSectionWithRightText;
/* prettier-ignore-end */
