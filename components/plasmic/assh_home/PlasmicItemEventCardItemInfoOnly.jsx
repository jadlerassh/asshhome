/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: UPjziaoo_XKO
import * as React from "react";
import Link from "next/link";
import { useRouter } from "next/router";
import {
  PlasmicLink as PlasmicLink__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import ButtonPrimary from "../../ButtonPrimary"; // plasmic-import: -2HqLDJqJBwh/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicItemEventCardItemInfoOnly.module.css"; // plasmic-import: UPjziaoo_XKO/css
import ContainerIcon from "./icons/PlasmicIcon__Container"; // plasmic-import: LdpaQ2yuf9hP/icon
import Container2Icon from "./icons/PlasmicIcon__Container2"; // plasmic-import: TKWn1DDMMFQp/icon
import Container6Icon from "./icons/PlasmicIcon__Container6"; // plasmic-import: GEVyXgFi5rGf/icon
import Container7Icon from "./icons/PlasmicIcon__Container7"; // plasmic-import: HGdSWGp34SXV/icon

createPlasmicElementProxy;

export const PlasmicItemEventCardItemInfoOnly__VariantProps = new Array();

export const PlasmicItemEventCardItemInfoOnly__ArgProps = new Array(
  "title",
  "dates",
  "registerUrl",
  "location",
  "locationUrl"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicItemEventCardItemInfoOnly__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          title: "##th Annual Meeting of the ASSH",
          dates: "Thursday, October 9, 2025 - Saturday, October 11, 2025",
          registerUrl: "https://www.assh.org/meeting/register",
          location: "ASSH Congention Center - Chicago, IL, USA"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"frame3"}
        data-plasmic-override={overrides.frame3}
        hasGap={true}
        className={classNames(projectcss.all, sty.frame3)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"navItemMenu"}
          data-plasmic-override={overrides.navItemMenu}
          hasGap={true}
          className={classNames(projectcss.all, sty.navItemMenu)}
        >
          {false ? (
            <Stack__
              as={"div"}
              data-plasmic-name={"icon12X12"}
              data-plasmic-override={overrides.icon12X12}
              hasGap={true}
              className={classNames(projectcss.all, sty.icon12X12)}
            >
              <Stack__
                as={ContainerIcon}
                hasGap={true}
                className={classNames(projectcss.all, sty.svg__rH4Ae)}
                role={"img"}
              />
            </Stack__>
          ) : null}
          <div
            data-plasmic-name={"navigationItem"}
            data-plasmic-override={overrides.navigationItem}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.navigationItem
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.title;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "80th Annual Meeting of the ASSH";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          {false ? (
            <Stack__
              as={"div"}
              data-plasmic-name={"icon12X122"}
              data-plasmic-override={overrides.icon12X122}
              hasGap={true}
              className={classNames(projectcss.all, sty.icon12X122)}
            >
              <Stack__
                as={Container2Icon}
                hasGap={true}
                className={classNames(projectcss.all, sty.svg__xTvnS)}
                role={"img"}
              />
            </Stack__>
          ) : null}
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"frame2"}
          data-plasmic-override={overrides.frame2}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame2)}
        >
          {(() => {
            try {
              return $props.dates !== undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              data-plasmic-name={"datesSection"}
              data-plasmic-override={overrides.datesSection}
              hasGap={true}
              className={classNames(projectcss.all, sty.datesSection)}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"icon16X16"}
                data-plasmic-override={overrides.icon16X16}
                hasGap={true}
                className={classNames(projectcss.all, sty.icon16X16)}
              >
                <Stack__
                  as={Container6Icon}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.svg__sTXjT)}
                  role={"img"}
                />
              </Stack__>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__rklD3
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.dates;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Thursday, October 9, 2025 \u2013 Saturday, October 11, 2025";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </Stack__>
          ) : null}
          {(() => {
            try {
              return $props.location !== undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={PlasmicLink__}
              data-plasmic-name={"locationSection"}
              data-plasmic-override={overrides.locationSection}
              hasGap={true}
              className={classNames(
                projectcss.all,
                projectcss.a,
                sty.locationSection
              )}
              component={Link}
              href={(() => {
                try {
                  return $props.locationUrl;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return undefined;
                  }
                  throw e;
                }
              })()}
              platform={"nextjs"}
            >
              <Stack__
                as={"div"}
                data-plasmic-name={"icon16X162"}
                data-plasmic-override={overrides.icon16X162}
                hasGap={true}
                className={classNames(projectcss.all, sty.icon16X162)}
              >
                <Stack__
                  as={Container7Icon}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.svg__wxcv1)}
                  role={"img"}
                />
              </Stack__>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__pfwmq
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $props.location;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "Vancouver Convention Centre \u2013 Vancouver, BC, Canada";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </Stack__>
          ) : null}
          {(() => {
            try {
              return $props.registerUrl !== undefined;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <Stack__
              as={"div"}
              data-plasmic-name={"regButtonSection"}
              data-plasmic-override={overrides.regButtonSection}
              hasGap={true}
              className={classNames(projectcss.all, sty.regButtonSection)}
            >
              <ButtonPrimary
                data-plasmic-name={"buttonPrimary"}
                data-plasmic-override={overrides.buttonPrimary}
                className={classNames("__wab_instance", sty.buttonPrimary)}
                text={"Register Now"}
                textArrowButton={true}
                url={"https://www.assh.org/meeting/register"}
              />
            </Stack__>
          ) : null}
        </Stack__>
      </Stack__>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "frame3",
    "navItemMenu",
    "icon12X12",
    "navigationItem",
    "icon12X122",
    "frame2",
    "datesSection",
    "icon16X16",
    "locationSection",
    "icon16X162",
    "regButtonSection",
    "buttonPrimary"
  ],

  frame3: [
    "frame3",
    "navItemMenu",
    "icon12X12",
    "navigationItem",
    "icon12X122",
    "frame2",
    "datesSection",
    "icon16X16",
    "locationSection",
    "icon16X162",
    "regButtonSection",
    "buttonPrimary"
  ],

  navItemMenu: ["navItemMenu", "icon12X12", "navigationItem", "icon12X122"],
  icon12X12: ["icon12X12"],
  navigationItem: ["navigationItem"],
  icon12X122: ["icon12X122"],
  frame2: [
    "frame2",
    "datesSection",
    "icon16X16",
    "locationSection",
    "icon16X162",
    "regButtonSection",
    "buttonPrimary"
  ],

  datesSection: ["datesSection", "icon16X16"],
  icon16X16: ["icon16X16"],
  locationSection: ["locationSection", "icon16X162"],
  icon16X162: ["icon16X162"],
  regButtonSection: ["regButtonSection", "buttonPrimary"],
  buttonPrimary: ["buttonPrimary"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicItemEventCardItemInfoOnly__ArgProps,
          internalVariantPropNames:
            PlasmicItemEventCardItemInfoOnly__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicItemEventCardItemInfoOnly__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicItemEventCardItemInfoOnly";
  } else {
    func.displayName = `PlasmicItemEventCardItemInfoOnly.${nodeName}`;
  }
  return func;
}

export const PlasmicItemEventCardItemInfoOnly = Object.assign(
  // Top-level PlasmicItemEventCardItemInfoOnly renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    frame3: makeNodeComponent("frame3"),
    navItemMenu: makeNodeComponent("navItemMenu"),
    icon12X12: makeNodeComponent("icon12X12"),
    navigationItem: makeNodeComponent("navigationItem"),
    icon12X122: makeNodeComponent("icon12X122"),
    frame2: makeNodeComponent("frame2"),
    datesSection: makeNodeComponent("datesSection"),
    icon16X16: makeNodeComponent("icon16X16"),
    locationSection: makeNodeComponent("locationSection"),
    icon16X162: makeNodeComponent("icon16X162"),
    regButtonSection: makeNodeComponent("regButtonSection"),
    buttonPrimary: makeNodeComponent("buttonPrimary"),
    // Metadata about props expected for PlasmicItemEventCardItemInfoOnly
    internalVariantProps: PlasmicItemEventCardItemInfoOnly__VariantProps,
    internalArgProps: PlasmicItemEventCardItemInfoOnly__ArgProps
  }
);

export default PlasmicItemEventCardItemInfoOnly;
/* prettier-ignore-end */
