/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: pkNfPBeJPFGR
import * as React from "react";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicBlockQuoteBlock.module.css"; // plasmic-import: pkNfPBeJPFGR/css
import Container2Icon from "./icons/PlasmicIcon__Container2"; // plasmic-import: TKWn1DDMMFQp/icon

createPlasmicElementProxy;

export const PlasmicBlockQuoteBlock__VariantProps = new Array();

export const PlasmicBlockQuoteBlock__ArgProps = new Array(
  "quoteText",
  "drName",
  "title",
  "tagline"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicBlockQuoteBlock__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          quoteText:
            "Being an ASSH member means instant connection to the best minds in hand surgery. The collaborative spirit is invaluable.",
          drName: "Dr. Jane Doe",
          title: "ASSH Membership",
          tagline: "Join a Community Shaping the Future of Hand Surgery"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"calloutBar"}
        data-plasmic-override={overrides.calloutBar}
        className={classNames(projectcss.all, sty.calloutBar)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"frame6"}
          data-plasmic-override={overrides.frame6}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame6)}
        >
          <Stack__
            as={PlasmicImg__}
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            hasGap={true}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"60px"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"60px"}
            loading={"lazy"}
            src={{
              src: "/plasmic/assh_home/images/frame7.svg",
              fullWidth: 60,
              fullHeight: 60,
              aspectRatio: undefined
            }}
          />

          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___3AtRy
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.quoteText;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Being an ASSH member means instant connection to the best minds in hand surgery. The collaborative spirit is invaluable.";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__uUlOi
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.drName;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Dr. Aakash Bashir";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </Stack__>
        <Stack__
          as={"div"}
          data-plasmic-name={"frame7"}
          data-plasmic-override={overrides.frame7}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame7)}
        >
          <Stack__
            as={"div"}
            data-plasmic-name={"navItemSimple"}
            data-plasmic-override={overrides.navItemSimple}
            hasGap={true}
            className={classNames(projectcss.all, sty.navItemSimple)}
          >
            {false ? (
              <Stack__
                as={"div"}
                data-plasmic-name={"icon12X12"}
                data-plasmic-override={overrides.icon12X12}
                hasGap={true}
                className={classNames(projectcss.all, sty.icon12X12)}
              >
                <Stack__
                  as={Container2Icon}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.svg__gde6U)}
                  role={"img"}
                />
              </Stack__>
            ) : null}
            <div
              data-plasmic-name={"navigationItem"}
              data-plasmic-override={overrides.navigationItem}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.navigationItem
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.title;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "ASSH Membership";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </div>
            {false ? (
              <Stack__
                as={"div"}
                data-plasmic-name={"icon12X122"}
                data-plasmic-override={overrides.icon12X122}
                hasGap={true}
                className={classNames(projectcss.all, sty.icon12X122)}
              >
                <Stack__
                  as={Container2Icon}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.svg__bsXz5)}
                  role={"img"}
                />
              </Stack__>
            ) : null}
          </Stack__>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___7QtU3
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.tagline;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Join a Community Shaping the Future of Hand Surgery";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </Stack__>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "calloutBar",
    "frame6",
    "img",
    "frame7",
    "navItemSimple",
    "icon12X12",
    "navigationItem",
    "icon12X122"
  ],

  calloutBar: [
    "calloutBar",
    "frame6",
    "img",
    "frame7",
    "navItemSimple",
    "icon12X12",
    "navigationItem",
    "icon12X122"
  ],

  frame6: ["frame6", "img"],
  img: ["img"],
  frame7: [
    "frame7",
    "navItemSimple",
    "icon12X12",
    "navigationItem",
    "icon12X122"
  ],

  navItemSimple: ["navItemSimple", "icon12X12", "navigationItem", "icon12X122"],
  icon12X12: ["icon12X12"],
  navigationItem: ["navigationItem"],
  icon12X122: ["icon12X122"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicBlockQuoteBlock__ArgProps,
          internalVariantPropNames: PlasmicBlockQuoteBlock__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicBlockQuoteBlock__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicBlockQuoteBlock";
  } else {
    func.displayName = `PlasmicBlockQuoteBlock.${nodeName}`;
  }
  return func;
}

export const PlasmicBlockQuoteBlock = Object.assign(
  // Top-level PlasmicBlockQuoteBlock renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    calloutBar: makeNodeComponent("calloutBar"),
    frame6: makeNodeComponent("frame6"),
    img: makeNodeComponent("img"),
    frame7: makeNodeComponent("frame7"),
    navItemSimple: makeNodeComponent("navItemSimple"),
    icon12X12: makeNodeComponent("icon12X12"),
    navigationItem: makeNodeComponent("navigationItem"),
    icon12X122: makeNodeComponent("icon12X122"),
    // Metadata about props expected for PlasmicBlockQuoteBlock
    internalVariantProps: PlasmicBlockQuoteBlock__VariantProps,
    internalArgProps: PlasmicBlockQuoteBlock__ArgProps
  }
);

export default PlasmicBlockQuoteBlock;
/* prettier-ignore-end */
