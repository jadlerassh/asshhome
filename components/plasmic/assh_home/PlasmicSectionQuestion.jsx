/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: 9B7ukqwaDf9R
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import ContentfulContents from "../../ContentfulContents"; // plasmic-import: xnR31SmiTDW4/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicSectionQuestion.module.css"; // plasmic-import: 9B7ukqwaDf9R/css

createPlasmicElementProxy;

export const PlasmicSectionQuestion__VariantProps = new Array();

export const PlasmicSectionQuestion__ArgProps = new Array("name");

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSectionQuestion__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          name: "Advocacy: Questions?"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const new$Queries = {
    getSectionContent: usePlasmicDataOp(() => {
      return {
        sourceId: "tbVV8SR67UpQ6Z9zuPcDPB",
        opId: "d4ec5113-82bd-4fa4-b5a9-3225195bae2f",
        userArgs: {
          params: [$props.name]
        },
        cacheKey: `plasmic.$.d4ec5113-82bd-4fa4-b5a9-3225195bae2f.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <Stack__
          as={"div"}
          data-plasmic-name={"frame6"}
          data-plasmic-override={overrides.frame6}
          hasGap={true}
          className={classNames(projectcss.all, sty.frame6)}
        >
          <div
            data-plasmic-name={"text"}
            data-plasmic-override={overrides.text}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $queries.getSectionContent.data.response.items[0]
                    .fields.title;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Questions?";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <ContentfulContents
            data-plasmic-name={"contentfulContents"}
            data-plasmic-override={overrides.contentfulContents}
            className={classNames("__wab_instance", sty.contentfulContents)}
            contents={(() => {
              try {
                return $queries.getSectionContent.data.response.items[0].fields
                  .content.content;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return undefined;
                }
                throw e;
              }
            })()}
          />
        </Stack__>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "frame6", "text", "contentfulContents"],
  freeBox: ["freeBox", "frame6", "text", "contentfulContents"],
  frame6: ["frame6", "text", "contentfulContents"],
  text: ["text"],
  contentfulContents: ["contentfulContents"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSectionQuestion__ArgProps,
          internalVariantPropNames: PlasmicSectionQuestion__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSectionQuestion__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSectionQuestion";
  } else {
    func.displayName = `PlasmicSectionQuestion.${nodeName}`;
  }
  return func;
}

export const PlasmicSectionQuestion = Object.assign(
  // Top-level PlasmicSectionQuestion renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    frame6: makeNodeComponent("frame6"),
    text: makeNodeComponent("text"),
    contentfulContents: makeNodeComponent("contentfulContents"),
    // Metadata about props expected for PlasmicSectionQuestion
    internalVariantProps: PlasmicSectionQuestion__VariantProps,
    internalArgProps: PlasmicSectionQuestion__ArgProps
  }
);

export default PlasmicSectionQuestion;
/* prettier-ignore-end */
