/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 34tvEQuyqfK98iGCjMbawB
// Component: BZD1h1HFpB1O
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import AsshButton from "../../AsshButton"; // plasmic-import: -2HqLDJqJBwh/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: 34tvEQuyqfK98iGCjMbawB/projectcss
import sty from "./PlasmicComponentMenuEventHighlight.module.css"; // plasmic-import: BZD1h1HFpB1O/css

createPlasmicElementProxy;

export const PlasmicComponentMenuEventHighlight__VariantProps = new Array();

export const PlasmicComponentMenuEventHighlight__ArgProps = new Array(
  "entryId"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicComponentMenuEventHighlight__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          entryId: "1IlcMR2u6uwVHDkgEEzrpq"
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const new$Queries = {
    getEntry: usePlasmicDataOp(() => {
      return {
        sourceId: "tbVV8SR67UpQ6Z9zuPcDPB",
        opId: "05ea4b28-de4e-4092-9c56-d4618ff3b319",
        userArgs: {
          path: [$props.entryId]
        },
        cacheKey: `plasmic.$.05ea4b28-de4e-4092-9c56-d4618ff3b319.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        data-plasmic-name={"frame4"}
        data-plasmic-override={overrides.frame4}
        hasGap={true}
        className={classNames(projectcss.all, sty.frame4)}
      >
        <div
          data-plasmic-name={"freeBox"}
          data-plasmic-override={overrides.freeBox}
          className={classNames(projectcss.all, sty.freeBox)}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__yh0Cc
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $queries.getEntry.data.response.fields.title;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__cCqqJ
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $queries.getEntry.data.response.fields.dates;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__v1FMw
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $queries.getEntry.data.response.fields.locationName;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </div>
        </div>
        <Stack__
          as={"div"}
          data-plasmic-name={"navItemSimple"}
          data-plasmic-override={overrides.navItemSimple}
          hasGap={true}
          className={classNames(projectcss.all, sty.navItemSimple)}
        >
          <AsshButton
            data-plasmic-name={"asshButton"}
            data-plasmic-override={overrides.asshButton}
            className={classNames("__wab_instance", sty.asshButton)}
            text={"Annual Meeting Overview"}
            textArrowButton={"link"}
            url={(() => {
              try {
                return $queries.getEntry.data.response.fields.infoLink;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "https://www.assh.org";
                }
                throw e;
              }
            })()}
          />
        </Stack__>
      </Stack__>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "frame4", "freeBox", "navItemSimple", "asshButton"],
  frame4: ["frame4", "freeBox", "navItemSimple", "asshButton"],
  freeBox: ["freeBox"],
  navItemSimple: ["navItemSimple", "asshButton"],
  asshButton: ["asshButton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicComponentMenuEventHighlight__ArgProps,
          internalVariantPropNames:
            PlasmicComponentMenuEventHighlight__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicComponentMenuEventHighlight__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicComponentMenuEventHighlight";
  } else {
    func.displayName = `PlasmicComponentMenuEventHighlight.${nodeName}`;
  }
  return func;
}

export const PlasmicComponentMenuEventHighlight = Object.assign(
  // Top-level PlasmicComponentMenuEventHighlight renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    frame4: makeNodeComponent("frame4"),
    freeBox: makeNodeComponent("freeBox"),
    navItemSimple: makeNodeComponent("navItemSimple"),
    asshButton: makeNodeComponent("asshButton"),
    // Metadata about props expected for PlasmicComponentMenuEventHighlight
    internalVariantProps: PlasmicComponentMenuEventHighlight__VariantProps,
    internalArgProps: PlasmicComponentMenuEventHighlight__ArgProps
  }
);

export default PlasmicComponentMenuEventHighlight;
/* prettier-ignore-end */
